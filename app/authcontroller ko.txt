<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Laravel\Sanctum\PersonalAccessToken;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class AuthController extends Controller
{
    

    public function register(Request $request)
    {
        \Log::info('Register Request Data: ', $request->only(['name', 'email', 'address', 'phone'])); // Log only necessary data

        $validate = Validator::make($request->all(), 
        [
            'firstName' => 'required',
            'lastName' => 'required',
            'emailAddress' => 'required|email|unique:users_tbl',
            'contactNumber' => 'required|string|max:11',
            'homeAddress' => 'required|string|max:255',
            'IDCard' => 'required|string|max:255',
            'password' => 'required|string|min:6',
            'roleID' => 'required|integer|exists:roles_tbl,roleID', // Ensure roleID exists in roles_tbl
        ]);

        if ($validate->fails()) {
            \Log::error('Validation Failed: ', $validate->errors()->toArray());
            return response()->json(
                ["status" => "error", "message" => $validate->errors()], 200);
        }

        $validated = $validate->validated();

        try {
            DB::beginTransaction(); // Start transaction

            $user = new User();
            $user->firstName = $validated['firstName'];
            $user->lastName = $validated['lastName'];
            $user->emailAddress = $validated['emailAddress'];
            $user->contactNumber = $validated['contactNumber'];
            $user->homeAddress = $validated['homeAddress'];
            $user->IDCard = $validated['IDCard'];
            $user->roleID = $validated['roleID']; // Use the validated roleID
            $user->password = Hash::make($validated['password']);
            $user->status = 'pending';
            

            if (!$user->save()) {
                throw new \Exception('User save failed');
            }

            DB::commit(); // Commit transaction
            \Log::info('User Registered Successfully: ' . $user->emailAddress);

            return response()->json(
                [
                    "status" => "success", 
                    "message" => "User registered successfully",
                ], 200);
        } catch (\Exception $e) {
            DB::rollBack(); // Rollback transaction on failure
            \Log::error('Registration Error: ' . $e->getMessage());
            return response()->json(
                [
                    "status" => "error", 
                    "message" => "An error occurred during registration. Please try again later."
                ], 500);
        }
    }

    // Login a user
    public function login(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'emailAddress' => 'required|string|email|max:255',
            'password' => 'required|string|min:6',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation error',
                'error' => $validator->errors()], 422);
        }

        $user = User::where('emailAddress', $request->emailAddress)->first();

        Log::info('Password from request: ' . $request->password);
        Log::info('Hashed password from DB: ' . $user->password);
        Log::info('User retrieved: ', $user ? $user->toArray() : []);

        try {
            if (!$user || !Hash::check($request->password, $user->password)) {
                Log::warning('Login failed for email: ' . $request->emailAddress);
                return response()->json([
                    'success' => false,
                    'message' => 'Invalid credentials'
                ], 401);
            }
        } catch (\Throwable $e) {
            Log::error('Hash check failed: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Server error during password validation',
                'error' => $e->getMessage()
            ], 500);
        }

        $token = $user->createToken('PabayoApp')->plainTextToken;
        Log::info('Token created for user ID: ' . $user->id);

        return response()->json(
            ['user' => $user, 'token' => $token], 200);
    }

    // Get the logged-in user's profile
    public function profile(Request $request)
    {
        $user = $request->user();
        Log::info('Accessing /profile - Auth user:', [$request->user()]);

        return response()->json($user);
    }

    // Logout a user (revoke token)
    public function logout(Request $request)
    {
        $request->user()->tokens->delete();
        return response()->json(['message' => 'Successfully logged out'], 200);
    }

    // Update the logged-in user's profile
    public function updateProfile(Request $request)
    {
        $user = $request->user();

        $validator = Validator::make($request->all(), [
            'firstName' => 'nullable|string|max:100',
            'lastName' => 'nullable|string|max:100',
            'emailAddress' => [
                'nullable',
                'email',
                'max:255',
                Rule::unique('users_tbl', 'emailAddress')->ignore(isset($user->userID) ? $user->userID : $user->id, isset($user->userID) ? 'userID' : 'id'),
            ],
            'contactNumber' => 'nullable|string|max:20',
            'homeAddress' => 'nullable|string|max:255',
        ]);

        if ($validator->fails()) {
            \Log::warning('Profile update validation failed', $validator->errors()->toArray());
            return response()->json(["status" => "error", "message" => $validator->errors()], 422);
        }

        $data = $validator->validated();

        // Update only provided fields
        if (array_key_exists('firstName', $data)) {
            $user->firstName = $data['firstName'];
        }
        if (array_key_exists('lastName', $data)) {
            $user->lastName = $data['lastName'];
        }
        if (array_key_exists('emailAddress', $data)) {
            $user->emailAddress = $data['emailAddress'];
        }
        if (array_key_exists('contactNumber', $data)) {
            $user->contactNumber = $data['contactNumber'];
        }
        if (array_key_exists('homeAddress', $data)) {
            $user->homeAddress = $data['homeAddress'];
        }

        try {
            $user->save();
            return response()->json(['status' => 'success', 'user' => $user], 200);
        } catch (\Throwable $e) {
            \Log::error('Profile update failed: ' . $e->getMessage());
            return response()->json(['status' => 'error', 'message' => 'Failed to update profile'], 500);
        }
    }

    // Change the logged-in user's password
    public function changePassword(Request $request)
    {
        $user = $request->user();

        $validator = Validator::make($request->all(), [
            'oldPassword' => 'required|string',
            'newPassword' => 'required|string|min:6',
        ]);

        if ($validator->fails()) {
            return response()->json(['status' => 'error', 'message' => $validator->errors()], 422);
        }

        $data = $validator->validated();

        // Verify old password
        if (!Hash::check($data['oldPassword'], $user->password)) {
            \Log::warning('Password change failed - incorrect old password for userID: ' . (isset($user->userID) ? $user->userID : $user->id));
            return response()->json(['status' => 'error', 'message' => 'Old password is incorrect'], 401);
        }

        try {
            $user->password = Hash::make($data['newPassword']);
            $user->save();
            return response()->json(['status' => 'success', 'message' => 'Password updated'], 200);
        } catch (\Throwable $e) {
            \Log::error('Password change failed: ' . $e->getMessage());
            return response()->json(['status' => 'error', 'message' => 'Failed to update password'], 500);
        }
    }

}
