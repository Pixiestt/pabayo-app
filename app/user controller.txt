<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Role;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function pendingUsers()
    {
        $users = User::where('status', 'pending')->orderBy('created_at', 'desc')->paginate(10); // Add pagination
        return view('users.request', ['users' => $users]); // Pass paginated users to the view
    }

    public function approvedUsers()
    {
        $users = User::where('status', 'approved')->orderBy('created_at', 'desc')->paginate(10);
        return view('users.index', compact('users')); // Pass only approved users to the view
    }

    public function acceptUser($id)
    {
        $user = User::findOrFail($id);
        $user->status = 'approved';
        $user->save();
        return redirect()->back()->with('success', 'User approved successfully.');
    }

    public function rejectUser($id)
    {
        $user = User::findOrFail($id);
        $user->status = 'archived';
        $user->save();
        return redirect()->back()->with('success', 'User rejected and archived successfully.');
    }

    public function archiveUser($id)
    {
        $user = User::findOrFail($id);
        $user->status = 'archived';
        $user->save();
        return redirect()->back()->with('success', 'User archived successfully.');
    }

    public function archivedUsers()
    {
        $users = User::where('status', 'archived')->orderBy('created_at', 'desc')->paginate(5); // Add pagination
        return view('users.archive', ['users' => $users]); // Pass paginated users to the view
    }

    public function show($id)
    {
        $user = User::where('userID', $id)->firstOrFail();
        $roles = Role::all(); // Fetch all roles to display in the dropdown
        return view('users.show', compact('user', 'roles')); // Pass the roles to the view
    }

    public function showArchivedUser($id)
    {
        $user = User::where('userID', $id)->where('status', 'archived')->firstOrFail();
        return view('users.showArchived', compact('user')); // Pass the user to the view
    }

    public function changeRole(Request $request, $id)
    {
        $request->validate([
            'roleID' => 'required|exists:roles_tbl,roleID', // Ensure the roleID exists in roles_tbl
        ]);

        $user = User::findOrFail($id);
        $user->roleID = $request->roleID;
        $user->save();

        return redirect()->back()->with('success', 'Role updated successfully.');
    }
}
