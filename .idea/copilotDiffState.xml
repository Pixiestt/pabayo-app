<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/adapter/CustomerTrackAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/adapter/CustomerTrackAdapter.kt" />
              <option name="originalContent" value="package com.example.capstone2.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.capstone2.R&#10;import com.example.capstone2.data.models.Request&#10;&#10;class CustomerTrackAdapter(&#10;    private var requests: List&lt;Request&gt;,&#10;    private val onMarkCompleteClick: (Request) -&gt; Unit // Callback for mark complete button&#10;) : RecyclerView.Adapter&lt;CustomerTrackAdapter.CustomerTrackViewHolder&gt;() {&#10;&#10;    inner class CustomerTrackViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val requestId: TextView = itemView.findViewById(R.id.tvRequestID)&#10;        val dateRequested: TextView = itemView.findViewById(R.id.tvDateRequested)&#10;        val sackQty: TextView = itemView.findViewById(R.id.tvSackQty)&#10;        val services: TextView = itemView.findViewById(R.id.tvServices)&#10;        val pickupLocation: TextView = itemView.findViewById(R.id.tvPickupLocation)&#10;        val deliveryLocation: TextView = itemView.findViewById(R.id.tvDeliveryLocation)&#10;        val paymentMethod: TextView = itemView.findViewById(R.id.tvPaymentMethod)&#10;        val status: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val btnMarkComplete: Button = itemView.findViewById(R.id.btnMarkComplete)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CustomerTrackViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_customer_track, parent, false)&#10;        return CustomerTrackViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: CustomerTrackViewHolder, position: Int) {&#10;        val request = requests[position]&#10;&#10;        holder.requestId.text = &quot;Request ID: ${request.requestID}&quot;&#10;        holder.dateRequested.text = &quot;Date Requested: ${request.submittedAt ?: &quot;N/A&quot;}&quot;&#10;        holder.sackQty.text = &quot;Sack Quantity: ${request.sackQuantity}&quot;&#10;        holder.services.text = &quot;Service: ${request.serviceName}&quot;&#10;&#10;        // Handle pickup location&#10;        if (!request.pickupLocation.isNullOrEmpty()) {&#10;            holder.pickupLocation.text = &quot;Pickup Location: ${request.pickupLocation}&quot;&#10;            holder.pickupLocation.visibility = View.VISIBLE&#10;        } else {&#10;            // Check if service includes pickup (serviceID 1,2,5,6)&#10;            when (request.serviceID) {&#10;                1L, 2L, 5L, 6L -&gt; {&#10;                    holder.pickupLocation.text = &quot;Pickup Location: Not specified&quot;&#10;                    holder.pickupLocation.visibility = View.VISIBLE&#10;                }&#10;                else -&gt; holder.pickupLocation.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Handle delivery location&#10;        if (!request.deliveryLocation.isNullOrEmpty()) {&#10;            holder.deliveryLocation.text = &quot;Delivery Location: ${request.deliveryLocation}&quot;&#10;            holder.deliveryLocation.visibility = View.VISIBLE&#10;        } else {&#10;            // Check if service includes delivery (serviceID 1,3,5,7)&#10;            when (request.serviceID) {&#10;                1L, 3L, 5L, 7L -&gt; {&#10;                    holder.deliveryLocation.text = &quot;Delivery Location: Not specified&quot;&#10;                    holder.deliveryLocation.visibility = View.VISIBLE&#10;                }&#10;                else -&gt; holder.deliveryLocation.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        holder.paymentMethod.text = &quot;Payment Method: ${request.paymentMethod}&quot;&#10;&#10;        // Map status IDs to readable names based on the database status table&#10;        val statusText = when (request.statusID) {&#10;            1 -&gt; &quot;Subject for approval&quot;&#10;            2 -&gt; &quot;Delivery boy pickup&quot;&#10;            3 -&gt; &quot;Waiting for customer drop off&quot;&#10;            4 -&gt; &quot;In Queue&quot;&#10;            5 -&gt; &quot;Processing&quot;&#10;            6 -&gt; &quot;Rider out for delivery&quot;&#10;            7 -&gt; &quot;Waiting for customer pickup&quot;&#10;            8 -&gt; &quot;Completed&quot;&#10;            9 -&gt; &quot;Rejected&quot;&#10;            10 -&gt; &quot;Request Accepted&quot;&#10;            11 -&gt; &quot;Partially Accepted&quot;&#10;            else -&gt; &quot;Unknown Status&quot;&#10;        }&#10;        holder.status.text = &quot;Status: $statusText&quot;&#10;&#10;        // Only show the Mark Complete button for active requests (not completed or rejected)&#10;        if (request.statusID == 8 || request.statusID == 9) {&#10;            holder.btnMarkComplete.visibility = View.GONE&#10;        } else {&#10;            holder.btnMarkComplete.visibility = View.VISIBLE&#10;            holder.btnMarkComplete.setOnClickListener {&#10;                onMarkCompleteClick(request)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = requests.size&#10;&#10;    fun updateRequests(newRequests: List&lt;Request&gt;) {&#10;        // Filter out requests with status ID 8 (Completed)&#10;        requests = newRequests.filter { it.statusID != 8 }&#10;        notifyDataSetChanged()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.capstone2.adapter&#10;&#10;import android.app.Dialog&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.capstone2.R&#10;import com.example.capstone2.data.models.Request&#10;&#10;class CustomerTrackAdapter(&#10;    private var requests: List&lt;Request&gt;,&#10;    private val onMarkCompleteClick: (Request) -&gt; Unit // Callback for mark complete button&#10;) : RecyclerView.Adapter&lt;CustomerTrackAdapter.CustomerTrackViewHolder&gt;() {&#10;&#10;    inner class CustomerTrackViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val requestId: TextView = itemView.findViewById(R.id.tvRequestID)&#10;        val dateRequested: TextView = itemView.findViewById(R.id.tvDateRequested)&#10;        val status: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val btnMarkComplete: Button = itemView.findViewById(R.id.btnMarkComplete)&#10;        val btnMore: Button = itemView.findViewById(R.id.btnMore)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CustomerTrackViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_customer_track, parent, false)&#10;        return CustomerTrackViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: CustomerTrackViewHolder, position: Int) {&#10;        val request = requests[position]&#10;        val ctx = holder.itemView.context&#10;&#10;        holder.requestId.text = ctx.getString(R.string.request_id_format, request.requestID)&#10;        holder.dateRequested.text = ctx.getString(R.string.date_requested_format, request.submittedAt ?: &quot;N/A&quot;)&#10;&#10;        // Map status IDs to readable names based on the database status table&#10;        val statusText = when (request.statusID) {&#10;            1 -&gt; &quot;Subject for approval&quot;&#10;            2 -&gt; &quot;Delivery boy pickup&quot;&#10;            3 -&gt; &quot;Waiting for customer drop off&quot;&#10;            4 -&gt; &quot;In Queue&quot;&#10;            5 -&gt; &quot;Processing&quot;&#10;            6 -&gt; &quot;Rider out for delivery&quot;&#10;            7 -&gt; &quot;Waiting for customer pickup&quot;&#10;            8 -&gt; &quot;Completed&quot;&#10;            9 -&gt; &quot;Rejected&quot;&#10;            10 -&gt; &quot;Request Accepted&quot;&#10;            11 -&gt; &quot;Partially Accepted&quot;&#10;            else -&gt; &quot;Unknown Status&quot;&#10;        }&#10;        holder.status.text = ctx.getString(R.string.status_format, statusText)&#10;&#10;        // Mark complete button visibility/handler&#10;        if (request.statusID == 8 || request.statusID == 9) {&#10;            holder.btnMarkComplete.visibility = View.GONE&#10;        } else {&#10;            holder.btnMarkComplete.visibility = View.VISIBLE&#10;            holder.btnMarkComplete.setOnClickListener {&#10;                onMarkCompleteClick(request)&#10;            }&#10;        }&#10;&#10;        // More button opens a dialog showing full details&#10;        holder.btnMore.setOnClickListener {&#10;            showDetailsDialog(ctx, request)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = requests.size&#10;&#10;    fun updateRequests(newRequests: List&lt;Request&gt;) {&#10;        // Filter out requests with status ID 8 (Completed)&#10;        requests = newRequests.filter { it.statusID != 8 }&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    private fun showDetailsDialog(context: android.content.Context, request: Request) {&#10;        val dialog = Dialog(context)&#10;        dialog.setContentView(R.layout.dialog_request_details)&#10;        dialog.window?.setLayout(&#10;            ViewGroup.LayoutParams.MATCH_PARENT,&#10;            ViewGroup.LayoutParams.WRAP_CONTENT&#10;        )&#10;&#10;        // Find views in dialog&#10;        val tvDetailCustomerName: TextView = dialog.findViewById(R.id.tvDetailCustomerName)&#10;        val tvDetailSackQty: TextView = dialog.findViewById(R.id.tvDetailSackQty)&#10;        val tvDetailServices: TextView = dialog.findViewById(R.id.tvDetailServices)&#10;        val tvDetailSchedule: TextView = dialog.findViewById(R.id.tvDetailSchedule)&#10;        val tvDetailPaymentMethod: TextView = dialog.findViewById(R.id.tvDetailPaymentMethod)&#10;        val tvDetailPickupLocation: TextView = dialog.findViewById(R.id.tvDetailPickupLocation)&#10;        val tvDetailDeliveryLocation: TextView = dialog.findViewById(R.id.tvDetailDeliveryLocation)&#10;        val tvDetailComment: TextView = dialog.findViewById(R.id.tvDetailComment)&#10;        val tvDetailSubmittedAt: TextView = dialog.findViewById(R.id.tvDetailSubmittedAt)&#10;        val btnClose: Button = dialog.findViewById(R.id.btnClose)&#10;&#10;        // Use formatted string resources to populate the dialog&#10;        tvDetailCustomerName.text = context.getString(R.string.customer_format, request.customerName)&#10;        tvDetailSackQty.text = context.getString(R.string.sacks_format, request.sackQuantity)&#10;        tvDetailServices.text = context.getString(R.string.services_format, request.serviceName)&#10;        tvDetailSchedule.text = context.getString(R.string.schedule_format, request.schedule ?: &quot;Not set&quot;)&#10;        tvDetailPaymentMethod.text = context.getString(R.string.payment_method_format, request.paymentMethod)&#10;&#10;        // Show pickup location if available or if service requires it&#10;        if (!request.pickupLocation.isNullOrEmpty()) {&#10;            tvDetailPickupLocation.text = context.getString(R.string.pickup_location_format, request.pickupLocation)&#10;            tvDetailPickupLocation.visibility = View.VISIBLE&#10;        } else {&#10;            // Check if service includes pickup (serviceID 1,2,5,6)&#10;            when (request.serviceID) {&#10;                1L, 2L, 5L, 6L -&gt; {&#10;                    tvDetailPickupLocation.text = context.getString(R.string.pickup_location_format, &quot;Not specified&quot;)&#10;                    tvDetailPickupLocation.visibility = View.VISIBLE&#10;                }&#10;                else -&gt; tvDetailPickupLocation.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Show delivery location if available or if service requires it&#10;        if (!request.deliveryLocation.isNullOrEmpty()) {&#10;            tvDetailDeliveryLocation.text = context.getString(R.string.delivery_location_format, request.deliveryLocation)&#10;            tvDetailDeliveryLocation.visibility = View.VISIBLE&#10;        } else {&#10;            // Check if service includes delivery (serviceID 1,3,5,7)&#10;            when (request.serviceID) {&#10;                1L, 3L, 5L, 7L -&gt; {&#10;                    tvDetailDeliveryLocation.text = context.getString(R.string.delivery_location_format, &quot;Not specified&quot;)&#10;                    tvDetailDeliveryLocation.visibility = View.VISIBLE&#10;                }&#10;                else -&gt; tvDetailDeliveryLocation.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        tvDetailComment.text = context.getString(R.string.comment_format, request.comment ?: &quot;None&quot;)&#10;        tvDetailSubmittedAt.text = context.getString(R.string.submitted_at_format, request.submittedAt ?: &quot;Unknown&quot;)&#10;&#10;        btnClose.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        dialog.show()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/authentication/LoginActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/authentication/LoginActivity.kt" />
              <option name="originalContent" value="package com.example.capstone2.authentication&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.text.InputType&#10;import android.text.method.PasswordTransformationMethod&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.capstone2.R&#10;import com.example.capstone2.customer.CustomerMainActivity&#10;import com.example.capstone2.data.models.LoginRequest&#10;import com.example.capstone2.owner.OwnerMainActivity&#10;import com.example.capstone2.viewmodel.UserViewModel&#10;import com.example.capstone2.viewmodel.UserViewModelFactory&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;&#10;    private lateinit var userViewModel: UserViewModel&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.authentication_activity_login)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { view, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            view.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        userViewModel = ViewModelProvider(&#10;            this,&#10;            UserViewModelFactory(applicationContext)&#10;        )[UserViewModel::class.java]&#10;&#10;        val emailEditText = findViewById&lt;EditText&gt;(R.id.emailAddET)&#10;        val passwordEditText = findViewById&lt;EditText&gt;(R.id.passET)&#10;        val loginButton = findViewById&lt;Button&gt;(R.id.loginBtn)&#10;        val signupTextView = findViewById&lt;TextView&gt;(R.id.signupTv)&#10;        val forgotPassTextView = findViewById&lt;TextView&gt;(R.id.forgotpassTv)&#10;&#10;        // Password toggle button&#10;        val togglePassBtn = findViewById&lt;ImageButton&gt;(R.id.togglePassBtn)&#10;        var isPasswordVisible = false&#10;        // Ensure password is masked initially&#10;        passwordEditText.transformationMethod = PasswordTransformationMethod.getInstance()&#10;        passwordEditText.inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD&#10;        togglePassBtn.contentDescription = &quot;Show password&quot;&#10;&#10;        togglePassBtn.setOnClickListener {&#10;            isPasswordVisible = !isPasswordVisible&#10;            if (isPasswordVisible) {&#10;                // show password&#10;                passwordEditText.transformationMethod = null&#10;                togglePassBtn.setImageResource(android.R.drawable.ic_menu_view)&#10;                togglePassBtn.contentDescription = &quot;Hide password&quot;&#10;            } else {&#10;                // hide password&#10;                passwordEditText.transformationMethod = PasswordTransformationMethod.getInstance()&#10;                togglePassBtn.setImageResource(android.R.drawable.ic_menu_close_clear_cancel)&#10;                togglePassBtn.contentDescription = &quot;Show password&quot;&#10;            }&#10;            // keep focus and cursor at the end&#10;            passwordEditText.requestFocus()&#10;            passwordEditText.setSelection(passwordEditText.text?.length ?: 0)&#10;        }&#10;&#10;        signupTextView.setOnClickListener {&#10;            startActivity(Intent(this, SignUpActivity::class.java))&#10;        }&#10;&#10;        forgotPassTextView.setOnClickListener {&#10;            startActivity(Intent(this, PassRecoveryActivity::class.java))&#10;        }&#10;&#10;        loginButton.setOnClickListener {&#10;            val email = emailEditText.text.toString().trim()&#10;            val password = passwordEditText.text.toString().trim()&#10;&#10;            if (email.isNotEmpty() &amp;&amp; password.isNotEmpty()) {&#10;                val loginRequest = LoginRequest(email, password)&#10;&#10;                userViewModel.loginUser(loginRequest).observe(this) { response -&gt;&#10;                    Log.d(&quot;LoginResponse&quot;, &quot;Received: $response&quot;)&#10;                    if (response != null &amp;&amp; response.token.isNotEmpty()) {&#10;                        val user = response.user&#10;                        val token = response.token&#10;&#10;                        // Save token and userID&#10;                        saveAuthToken(token)&#10;                        saveUserID(user.userID)&#10;&#10;                        Toast.makeText(this, &quot;Login successful!&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;                        when (user.roleID.toLong()) {&#10;                            2L -&gt; startActivity(Intent(this, OwnerMainActivity::class.java))&#10;                            3L -&gt; startActivity(Intent(this, CustomerMainActivity::class.java))&#10;                            else -&gt; Toast.makeText(this, &quot;Unknown role ID: ${user.roleID}&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;&#10;                        finish()&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Login failed: invalid credentials or token.&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            } else {&#10;                Toast.makeText(this, &quot;Please enter both email and password&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveAuthToken(token: String?) {&#10;        val sharedPref = getSharedPreferences(&quot;MyAppPrefs&quot;, MODE_PRIVATE)&#10;        sharedPref.edit().putString(&quot;auth_token&quot;, token).apply()&#10;    }&#10;&#10;&#10;    private fun saveUserID(userID: Long) {&#10;        val sharedPref = getSharedPreferences(&quot;MyAppPrefs&quot;, MODE_PRIVATE)&#10;        sharedPref.edit().putLong(&quot;userID&quot;, userID).apply()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.capstone2.authentication&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.text.InputType&#10;import android.text.method.PasswordTransformationMethod&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.capstone2.R&#10;import com.example.capstone2.customer.CustomerMainActivity&#10;import com.example.capstone2.data.models.LoginRequest&#10;import com.example.capstone2.owner.OwnerMainActivity&#10;import com.example.capstone2.viewmodel.UserViewModel&#10;import com.example.capstone2.viewmodel.UserViewModelFactory&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;&#10;    private lateinit var userViewModel: UserViewModel&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.authentication_activity_login)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { view, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            view.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        userViewModel = ViewModelProvider(&#10;            this,&#10;            UserViewModelFactory(applicationContext)&#10;        )[UserViewModel::class.java]&#10;&#10;        val emailEditText = findViewById&lt;EditText&gt;(R.id.emailAddET)&#10;        val passwordEditText = findViewById&lt;EditText&gt;(R.id.passET)&#10;        val loginButton = findViewById&lt;Button&gt;(R.id.loginBtn)&#10;        val signupTextView = findViewById&lt;TextView&gt;(R.id.signupTv)&#10;        val forgotPassTextView = findViewById&lt;TextView&gt;(R.id.forgotpassTv)&#10;&#10;        // Password toggle button&#10;        val togglePassBtn = findViewById&lt;ImageButton&gt;(R.id.togglePassBtn)&#10;        var isPasswordVisible = false&#10;        // Ensure password is masked initially&#10;        passwordEditText.transformationMethod = PasswordTransformationMethod.getInstance()&#10;        passwordEditText.inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD&#10;        togglePassBtn.contentDescription = &quot;Show password&quot;&#10;&#10;        togglePassBtn.setOnClickListener {&#10;            isPasswordVisible = !isPasswordVisible&#10;            if (isPasswordVisible) {&#10;                // show password&#10;                passwordEditText.transformationMethod = null&#10;                togglePassBtn.setImageResource(android.R.drawable.ic_menu_view)&#10;                togglePassBtn.contentDescription = &quot;Hide password&quot;&#10;            } else {&#10;                // hide password&#10;                passwordEditText.transformationMethod = PasswordTransformationMethod.getInstance()&#10;                togglePassBtn.setImageResource(android.R.drawable.ic_menu_close_clear_cancel)&#10;                togglePassBtn.contentDescription = &quot;Show password&quot;&#10;            }&#10;            // keep focus and cursor at the end&#10;            passwordEditText.requestFocus()&#10;            passwordEditText.setSelection(passwordEditText.text?.length ?: 0)&#10;        }&#10;&#10;        signupTextView.setOnClickListener {&#10;            startActivity(Intent(this, SignUpActivity::class.java))&#10;        }&#10;&#10;        forgotPassTextView.setOnClickListener {&#10;            startActivity(Intent(this, PassRecoveryActivity::class.java))&#10;        }&#10;&#10;        loginButton.setOnClickListener {&#10;            val email = emailEditText.text.toString().trim()&#10;            val password = passwordEditText.text.toString().trim()&#10;&#10;            if (email.isNotEmpty() &amp;&amp; password.isNotEmpty()) {&#10;                val loginRequest = LoginRequest(email, password)&#10;&#10;                userViewModel.loginUser(loginRequest).observe(this) { response -&gt;&#10;                    Log.d(&quot;LoginResponse&quot;, &quot;Received: $response&quot;)&#10;                    if (response != null &amp;&amp; response.token.isNotEmpty()) {&#10;                        val user = response.user&#10;                        val token = response.token&#10;&#10;                        // Save token and userID&#10;                        saveAuthToken(token)&#10;                        saveUserID(user.userID)&#10;                        // Save user account status (if provided). Default to &quot;approved&quot; to avoid accidental blocking when API doesn't supply status.&#10;                        saveUserStatus(user.status)&#10;&#10;                        Toast.makeText(this, &quot;Login successful!&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;                        when (user.roleID.toLong()) {&#10;                            2L -&gt; startActivity(Intent(this, OwnerMainActivity::class.java))&#10;                            3L -&gt; startActivity(Intent(this, CustomerMainActivity::class.java))&#10;                            else -&gt; Toast.makeText(this, &quot;Unknown role ID: ${user.roleID}&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;&#10;                        finish()&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Login failed: invalid credentials or token.&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            } else {&#10;                Toast.makeText(this, &quot;Please enter both email and password&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveAuthToken(token: String?) {&#10;        val sharedPref = getSharedPreferences(&quot;MyAppPrefs&quot;, MODE_PRIVATE)&#10;        sharedPref.edit().putString(&quot;auth_token&quot;, token).apply()&#10;    }&#10;&#10;&#10;    private fun saveUserID(userID: Long) {&#10;        val sharedPref = getSharedPreferences(&quot;MyAppPrefs&quot;, MODE_PRIVATE)&#10;        sharedPref.edit().putLong(&quot;userID&quot;, userID).apply()&#10;    }&#10;&#10;    // Persist the user's account status so other parts of the app can check it.&#10;    private fun saveUserStatus(status: String?) {&#10;        val sharedPref = getSharedPreferences(&quot;MyAppPrefs&quot;, MODE_PRIVATE)&#10;        // If API didn't send status, default to &quot;approved&quot; (assumption). Change this if your backend uses a different convention.&#10;        val valueToSave = status ?: &quot;approved&quot;&#10;        sharedPref.edit().putString(&quot;user_status&quot;, valueToSave).apply()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/customer/CustomerFragmentRequest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/customer/CustomerFragmentRequest.kt" />
              <option name="originalContent" value="package com.example.capstone2.customer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import androidx.fragment.app.Fragment&#10;import com.example.capstone2.R&#10;&#10;class CustomerFragmentRequest : Fragment() {&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.fragment_request_simple, container, false)&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        &#10;        val btnStartWizard = view.findViewById&lt;Button&gt;(R.id.btnStartWizard)&#10;        val tvTitle = view.findViewById&lt;TextView&gt;(R.id.tvTitle)&#10;        val tvDescription = view.findViewById&lt;TextView&gt;(R.id.tvDescription)&#10;        &#10;        tvTitle.text = &quot;Create New Request&quot;&#10;        tvDescription.text = &quot;Use our step-by-step wizard to create your rice milling request easily and quickly.&quot;&#10;        &#10;        btnStartWizard.setOnClickListener {&#10;            val intent = Intent(requireContext(), RequestWizardActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.capstone2.customer&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.fragment.app.Fragment&#10;import com.example.capstone2.R&#10;&#10;class CustomerFragmentRequest : Fragment() {&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.fragment_request_simple, container, false)&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        &#10;        val btnStartWizard = view.findViewById&lt;Button&gt;(R.id.btnStartWizard)&#10;        val tvTitle = view.findViewById&lt;TextView&gt;(R.id.tvTitle)&#10;        val tvDescription = view.findViewById&lt;TextView&gt;(R.id.tvDescription)&#10;        &#10;        tvTitle.text = &quot;Create New Request&quot;&#10;        tvDescription.text = &quot;Use our step-by-step wizard to create your rice milling request easily and quickly.&quot;&#10;        &#10;        btnStartWizard.setOnClickListener {&#10;            // Check the user's account status saved in SharedPreferences&#10;            val sharedPref = requireContext().getSharedPreferences(&quot;MyAppPrefs&quot;, Context.MODE_PRIVATE)&#10;            val status = sharedPref.getString(&quot;user_status&quot;, &quot;approved&quot;)?.trim()?.lowercase()&#10;&#10;            if (status == &quot;pending&quot;) {&#10;                // Show blocking dialog informing user their account is not approved&#10;                AlertDialog.Builder(requireContext())&#10;                    .setTitle(&quot;Account not approved&quot;)&#10;                    .setMessage(&quot;Your account is still pending approval. You cannot avail services until your account is approved.&quot;)&#10;                    .setPositiveButton(&quot;OK&quot;, null)&#10;                    .show()&#10;            } else {&#10;                // Proceed to the request wizard&#10;                val intent = Intent(requireContext(), RequestWizardActivity::class.java)&#10;                startActivity(intent)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_customer_track.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_customer_track.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    android:elevation=&quot;4dp&quot;&#10;    android:padding=&quot;18dp&quot;&#10;    android:radius=&quot;10dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvRequestID&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Request ID: &quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvDateRequested&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:text=&quot;Date Requested: &quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSackQty&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:text=&quot;Sack Quantity: &quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvServices&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:text=&quot;Services: &quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvPickupLocation&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:text=&quot;Pickup Location: &quot;&#10;            android:visibility=&quot;visible&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvDeliveryLocation&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:text=&quot;Delivery Location: &quot;&#10;            android:visibility=&quot;visible&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvPaymentMethod&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:text=&quot;Payment Method: &quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvStatus&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:text=&quot;Status: &quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnMarkComplete&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:text=&quot;Mark as Complete&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    android:elevation=&quot;4dp&quot;&#10;    android:padding=&quot;18dp&quot;&#10;    android:radius=&quot;10dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvRequestID&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/label_request_id&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvDateRequested&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:text=&quot;@string/label_date_requested&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvStatus&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:text=&quot;@string/label_status&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnMore&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;12dp&quot;&#10;            android:text=&quot;@string/more&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnMarkComplete&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;12dp&quot;&#10;            android:text=&quot;@string/mark_as_complete&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Capstone&lt;/string&gt;&#10;    &lt;!-- TODO: Remove or change this placeholder text --&gt;&#10;    &lt;string name=&quot;hello_blank_fragment&quot;&gt;Hello blank fragment&lt;/string&gt;&#10;    &lt;string name=&quot;title_activity_login&quot;&gt;LoginActivity&lt;/string&gt;&#10;    &lt;string name=&quot;prompt_email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;prompt_password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;action_sign_in&quot;&gt;Sign in or register&lt;/string&gt;&#10;    &lt;string name=&quot;action_sign_in_short&quot;&gt;Sign in&lt;/string&gt;&#10;    &lt;string name=&quot;welcome&quot;&gt;&quot;Welcome !&quot;&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_username&quot;&gt;Not a valid username&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_password&quot;&gt;Password must be &gt;5 characters&lt;/string&gt;&#10;    &lt;string name=&quot;login_failed&quot;&gt;&quot;Login failed&quot;&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close navigation drawer&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Capstone&lt;/string&gt;&#10;    &lt;!-- TODO: Remove or change this placeholder text --&gt;&#10;    &lt;string name=&quot;hello_blank_fragment&quot;&gt;Hello blank fragment&lt;/string&gt;&#10;    &lt;string name=&quot;title_activity_login&quot;&gt;LoginActivity&lt;/string&gt;&#10;    &lt;string name=&quot;prompt_email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;prompt_password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;action_sign_in&quot;&gt;Sign in or register&lt;/string&gt;&#10;    &lt;string name=&quot;action_sign_in_short&quot;&gt;Sign in&lt;/string&gt;&#10;    &lt;string name=&quot;welcome&quot;&gt;&quot;Welcome !&quot;&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_username&quot;&gt;Not a valid username&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_password&quot;&gt;Password must be &amp;gt;5 characters&lt;/string&gt;&#10;    &lt;string name=&quot;login_failed&quot;&gt;&quot;Login failed&quot;&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close navigation drawer&lt;/string&gt;&#10;&#10;    &lt;!-- Labels for customer track item --&gt;&#10;    &lt;string name=&quot;label_request_id&quot;&gt;Request ID:&lt;/string&gt;&#10;    &lt;string name=&quot;label_date_requested&quot;&gt;Date Requested:&lt;/string&gt;&#10;    &lt;string name=&quot;label_status&quot;&gt;Status:&lt;/string&gt;&#10;    &lt;string name=&quot;more&quot;&gt;More&lt;/string&gt;&#10;    &lt;string name=&quot;mark_as_complete&quot;&gt;Mark as Complete&lt;/string&gt;&#10;&#10;    &lt;!-- Formatted strings (use these in code to avoid concatenation) --&gt;&#10;    &lt;string name=&quot;request_id_format&quot;&gt;Request ID: %1$d&lt;/string&gt;&#10;    &lt;string name=&quot;date_requested_format&quot;&gt;Date Requested: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;sack_qty_format&quot;&gt;Sack Quantity: %1$d&lt;/string&gt;&#10;    &lt;string name=&quot;service_format&quot;&gt;Service: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;pickup_location_format&quot;&gt;Pickup Location: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;delivery_location_format&quot;&gt;Delivery Location: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;payment_method_format&quot;&gt;Payment Method: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;status_format&quot;&gt;Status: %1$s&lt;/string&gt;&#10;&#10;    &lt;!-- Dialog labels --&gt;&#10;    &lt;string name=&quot;customer_format&quot;&gt;Customer: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;sacks_format&quot;&gt;Sacks: %1$d&lt;/string&gt;&#10;    &lt;string name=&quot;services_format&quot;&gt;Services: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;schedule_format&quot;&gt;Schedule: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;comment_format&quot;&gt;Comment: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;submitted_at_format&quot;&gt;Submitted At: %1$s&lt;/string&gt;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>