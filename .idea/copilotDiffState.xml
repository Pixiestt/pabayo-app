<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/authentication/LoginActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/authentication/LoginActivity.kt" />
              <option name="originalContent" value="package com.example.capstone2.authentication&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.text.InputType&#10;import android.text.method.PasswordTransformationMethod&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.capstone2.R&#10;import com.example.capstone2.customer.CustomerMainActivity&#10;import com.example.capstone2.data.models.LoginRequest&#10;import com.example.capstone2.owner.OwnerMainActivity&#10;import com.example.capstone2.viewmodel.UserViewModel&#10;import com.example.capstone2.viewmodel.UserViewModelFactory&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;&#10;    private lateinit var userViewModel: UserViewModel&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.authentication_activity_login)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { view, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            view.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        userViewModel = ViewModelProvider(&#10;            this,&#10;            UserViewModelFactory(applicationContext)&#10;        )[UserViewModel::class.java]&#10;&#10;        val emailEditText = findViewById&lt;EditText&gt;(R.id.emailAddET)&#10;        val passwordEditText = findViewById&lt;EditText&gt;(R.id.passET)&#10;        val loginButton = findViewById&lt;Button&gt;(R.id.loginBtn)&#10;        val signupTextView = findViewById&lt;TextView&gt;(R.id.signupTv)&#10;        val forgotPassTextView = findViewById&lt;TextView&gt;(R.id.forgotpassTv)&#10;&#10;        // Password toggle button&#10;        val togglePassBtn = findViewById&lt;ImageButton&gt;(R.id.togglePassBtn)&#10;        var isPasswordVisible = false&#10;        // Ensure password is masked initially&#10;        passwordEditText.transformationMethod = PasswordTransformationMethod.getInstance()&#10;        passwordEditText.inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD&#10;        togglePassBtn.contentDescription = &quot;Show password&quot;&#10;&#10;        togglePassBtn.setOnClickListener {&#10;            isPasswordVisible = !isPasswordVisible&#10;            if (isPasswordVisible) {&#10;                // show password&#10;                passwordEditText.transformationMethod = null&#10;                togglePassBtn.setImageResource(android.R.drawable.ic_menu_view)&#10;                togglePassBtn.contentDescription = &quot;Hide password&quot;&#10;            } else {&#10;                // hide password&#10;                passwordEditText.transformationMethod = PasswordTransformationMethod.getInstance()&#10;                togglePassBtn.setImageResource(android.R.drawable.ic_menu_close_clear_cancel)&#10;                togglePassBtn.contentDescription = &quot;Show password&quot;&#10;            }&#10;            // keep focus and cursor at the end&#10;            passwordEditText.requestFocus()&#10;            passwordEditText.setSelection(passwordEditText.text?.length ?: 0)&#10;        }&#10;&#10;        signupTextView.setOnClickListener {&#10;            startActivity(Intent(this, SignUpActivity::class.java))&#10;        }&#10;&#10;        forgotPassTextView.setOnClickListener {&#10;            startActivity(Intent(this, PassRecoveryActivity::class.java))&#10;        }&#10;&#10;        loginButton.setOnClickListener {&#10;            val email = emailEditText.text.toString().trim()&#10;            val password = passwordEditText.text.toString().trim()&#10;&#10;            if (email.isNotEmpty() &amp;&amp; password.isNotEmpty()) {&#10;                val loginRequest = LoginRequest(email, password)&#10;&#10;                userViewModel.loginUser(loginRequest).observe(this) { response -&gt;&#10;                    Log.d(&quot;LoginResponse&quot;, &quot;Received: $response&quot;)&#10;                    if (response != null &amp;&amp; response.token.isNotEmpty()) {&#10;                        val user = response.user&#10;                        val token = response.token&#10;&#10;                        // Save token and userID&#10;                        saveAuthToken(token)&#10;                        saveUserID(user.userID)&#10;&#10;                        Toast.makeText(this, &quot;Login successful!&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;                        when (user.roleID.toLong()) {&#10;                            2L -&gt; startActivity(Intent(this, OwnerMainActivity::class.java))&#10;                            3L -&gt; startActivity(Intent(this, CustomerMainActivity::class.java))&#10;                            else -&gt; Toast.makeText(this, &quot;Unknown role ID: ${user.roleID}&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;&#10;                        finish()&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Login failed: invalid credentials or token.&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            } else {&#10;                Toast.makeText(this, &quot;Please enter both email and password&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveAuthToken(token: String?) {&#10;        val sharedPref = getSharedPreferences(&quot;MyAppPrefs&quot;, MODE_PRIVATE)&#10;        sharedPref.edit().putString(&quot;auth_token&quot;, token).apply()&#10;    }&#10;&#10;&#10;    private fun saveUserID(userID: Long) {&#10;        val sharedPref = getSharedPreferences(&quot;MyAppPrefs&quot;, MODE_PRIVATE)&#10;        sharedPref.edit().putLong(&quot;userID&quot;, userID).apply()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.capstone2.authentication&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.text.InputType&#10;import android.text.method.PasswordTransformationMethod&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.capstone2.R&#10;import com.example.capstone2.customer.CustomerMainActivity&#10;import com.example.capstone2.data.models.LoginRequest&#10;import com.example.capstone2.owner.OwnerMainActivity&#10;import com.example.capstone2.viewmodel.UserViewModel&#10;import com.example.capstone2.viewmodel.UserViewModelFactory&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;&#10;    private lateinit var userViewModel: UserViewModel&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.authentication_activity_login)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { view, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            view.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        userViewModel = ViewModelProvider(&#10;            this,&#10;            UserViewModelFactory(applicationContext)&#10;        )[UserViewModel::class.java]&#10;&#10;        val emailEditText = findViewById&lt;EditText&gt;(R.id.emailAddET)&#10;        val passwordEditText = findViewById&lt;EditText&gt;(R.id.passET)&#10;        val loginButton = findViewById&lt;Button&gt;(R.id.loginBtn)&#10;        val signupTextView = findViewById&lt;TextView&gt;(R.id.signupTv)&#10;        val forgotPassTextView = findViewById&lt;TextView&gt;(R.id.forgotpassTv)&#10;&#10;        // Password toggle button&#10;        val togglePassBtn = findViewById&lt;ImageButton&gt;(R.id.togglePassBtn)&#10;        var isPasswordVisible = false&#10;        // Ensure password is masked initially&#10;        passwordEditText.transformationMethod = PasswordTransformationMethod.getInstance()&#10;        passwordEditText.inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD&#10;        togglePassBtn.contentDescription = &quot;Show password&quot;&#10;&#10;        togglePassBtn.setOnClickListener {&#10;            isPasswordVisible = !isPasswordVisible&#10;            if (isPasswordVisible) {&#10;                // show password&#10;                passwordEditText.transformationMethod = null&#10;                togglePassBtn.setImageResource(android.R.drawable.ic_menu_view)&#10;                togglePassBtn.contentDescription = &quot;Hide password&quot;&#10;            } else {&#10;                // hide password&#10;                passwordEditText.transformationMethod = PasswordTransformationMethod.getInstance()&#10;                togglePassBtn.setImageResource(android.R.drawable.ic_menu_close_clear_cancel)&#10;                togglePassBtn.contentDescription = &quot;Show password&quot;&#10;            }&#10;            // keep focus and cursor at the end&#10;            passwordEditText.requestFocus()&#10;            passwordEditText.setSelection(passwordEditText.text?.length ?: 0)&#10;        }&#10;&#10;        signupTextView.setOnClickListener {&#10;            startActivity(Intent(this, SignUpActivity::class.java))&#10;        }&#10;&#10;        forgotPassTextView.setOnClickListener {&#10;            startActivity(Intent(this, PassRecoveryActivity::class.java))&#10;        }&#10;&#10;        loginButton.setOnClickListener {&#10;            val email = emailEditText.text.toString().trim()&#10;            val password = passwordEditText.text.toString().trim()&#10;&#10;            if (email.isNotEmpty() &amp;&amp; password.isNotEmpty()) {&#10;                val loginRequest = LoginRequest(email, password)&#10;&#10;                userViewModel.loginUser(loginRequest).observe(this) { response -&gt;&#10;                    Log.d(&quot;LoginResponse&quot;, &quot;Received: $response&quot;)&#10;                    if (response != null &amp;&amp; response.token.isNotEmpty()) {&#10;                        val user = response.user&#10;                        val token = response.token&#10;&#10;                        // Save token and userID&#10;                        saveAuthToken(token)&#10;                        saveUserID(user.userID)&#10;                        // Save user account status (if provided). Default to &quot;approved&quot; to avoid accidental blocking when API doesn't supply status.&#10;                        saveUserStatus(user.status)&#10;&#10;                        Toast.makeText(this, &quot;Login successful!&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;                        when (user.roleID.toLong()) {&#10;                            2L -&gt; startActivity(Intent(this, OwnerMainActivity::class.java))&#10;                            3L -&gt; startActivity(Intent(this, CustomerMainActivity::class.java))&#10;                            else -&gt; Toast.makeText(this, &quot;Unknown role ID: ${user.roleID}&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;&#10;                        finish()&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Login failed: invalid credentials or token.&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            } else {&#10;                Toast.makeText(this, &quot;Please enter both email and password&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveAuthToken(token: String?) {&#10;        val sharedPref = getSharedPreferences(&quot;MyAppPrefs&quot;, MODE_PRIVATE)&#10;        sharedPref.edit().putString(&quot;auth_token&quot;, token).apply()&#10;    }&#10;&#10;&#10;    private fun saveUserID(userID: Long) {&#10;        val sharedPref = getSharedPreferences(&quot;MyAppPrefs&quot;, MODE_PRIVATE)&#10;        sharedPref.edit().putLong(&quot;userID&quot;, userID).apply()&#10;    }&#10;&#10;    // Persist the user's account status so other parts of the app can check it.&#10;    private fun saveUserStatus(status: String?) {&#10;        val sharedPref = getSharedPreferences(&quot;MyAppPrefs&quot;, MODE_PRIVATE)&#10;        // If API didn't send status, default to &quot;approved&quot; (assumption). Change this if your backend uses a different convention.&#10;        val valueToSave = status ?: &quot;approved&quot;&#10;        sharedPref.edit().putString(&quot;user_status&quot;, valueToSave).apply()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>