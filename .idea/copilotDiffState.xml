<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/customer/ChatFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/customer/ChatFragment.kt" />
              <option name="originalContent" value="package com.example.capstone2.customer&#10;&#10;import android.content.ClipData&#10;import android.content.ClipboardManager&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.LinearLayout&#10;import android.widget.ScrollView&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import androidx.appcompat.widget.SwitchCompat&#10;import com.example.capstone2.R&#10;import com.example.capstone2.adapter.ChatAdapter&#10;import com.example.capstone2.repository.SharedPrefManager&#10;import com.example.capstone2.viewmodel.ChatViewModel&#10;import com.example.capstone2.viewmodel.ChatViewModelFactory&#10;&#10;class ChatFragment : Fragment() {&#10;&#10;    private lateinit var rvMessages: RecyclerView&#10;    private lateinit var etMessage: EditText&#10;    private lateinit var btnSend: ImageButton&#10;    private lateinit var adapter: ChatAdapter&#10;    private lateinit var viewModel: ChatViewModel&#10;    private lateinit var tvChatTitle: TextView&#10;&#10;    // Debug panel views&#10;    private var debugPanel: LinearLayout? = null&#10;    private var scrollDebug: ScrollView? = null&#10;    private var tvDebug: TextView? = null&#10;    private var btnCopyDebug: Button? = null&#10;    private var switchDebugToggle: SwitchCompat? = null&#10;&#10;    // Force debug panel visible by default (set to false to restore original behaviour)&#10;    // Deprecated: preference-controlled now. Default kept false.&#10;    private val FORCE_DEBUG_ALWAYS_ON = false&#10;    // When true show a modal AlertDialog with debug output so it's impossible to miss during testing&#10;    private val SHOW_DEBUG_DIALOG = true&#10;&#10;    private var otherUserId: Long = -1L&#10;    private var conversationID: String? = null&#10;    private var currentUserId: Long = -1L&#10;    private var otherName: String? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setHasOptionsMenu(true)&#10;        arguments?.let {&#10;            // expecting arguments: otherUserID (Long) and optional conversationID (String) and otherName&#10;            if (it.containsKey(&quot;otherUserID&quot;)) {&#10;                otherUserId = it.getLong(&quot;otherUserID&quot;, -1L)&#10;            }&#10;            if (it.containsKey(&quot;conversationID&quot;)) {&#10;                conversationID = it.getString(&quot;conversationID&quot;)&#10;            }&#10;            if (it.containsKey(&quot;otherName&quot;)) {&#10;                otherName = it.getString(&quot;otherName&quot;)&#10;            }&#10;        }&#10;&#10;        // Use centralized SharedPrefManager to read current user id&#10;        currentUserId = SharedPrefManager.getUserId(requireContext()) ?: -1L&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val v = inflater.inflate(R.layout.fragment_chat, container, false)&#10;        tvChatTitle = v.findViewById(R.id.tvChatTitle)&#10;        rvMessages = v.findViewById(R.id.rvMessages)&#10;        etMessage = v.findViewById(R.id.etMessage)&#10;        btnSend = v.findViewById(R.id.btnSend)&#10;&#10;        // Debug panel views&#10;        debugPanel = v.findViewById(R.id.debugPanel)&#10;        scrollDebug = v.findViewById(R.id.scrollDebug)&#10;        tvDebug = v.findViewById(R.id.tvDebug)&#10;        btnCopyDebug = v.findViewById(R.id.btnCopyDebug)&#10;        switchDebugToggle = v.findViewById(R.id.switchDebugToggle)&#10;&#10;        // Initialize switch from preference and set panel visibility accordingly&#10;        try {&#10;            val enabled = SharedPrefManager.isDebugPanelEnabled(requireContext()) || FORCE_DEBUG_ALWAYS_ON&#10;            switchDebugToggle?.isChecked = enabled&#10;            debugPanel?.visibility = if (enabled) View.VISIBLE else View.GONE&#10;        } catch (_: Exception) {&#10;            // fallback to hidden by default&#10;            debugPanel?.visibility = View.GONE&#10;            switchDebugToggle?.isChecked = false&#10;        }&#10;&#10;        // Set placeholder if needed&#10;        if (tvDebug?.text.isNullOrBlank()) tvDebug?.text = getString(R.string.waiting_debug)&#10;&#10;        // Wire the switch listener to persist preference and update panel visibility&#10;        switchDebugToggle?.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            try {&#10;                SharedPrefManager.setDebugPanelEnabled(requireContext(), isChecked)&#10;                debugPanel?.visibility = if (isChecked) View.VISIBLE else View.GONE&#10;            } catch (_: Exception) {}&#10;        }&#10;&#10;        // Show the other party's name when provided so the UI clearly indicates the opened conversation&#10;        otherName?.let {&#10;            tvChatTitle.text = it&#10;            tvChatTitle.visibility = View.VISIBLE&#10;        }&#10;&#10;        // Quick runtime toast to verify ids used by this fragment&#10;        try {&#10;            Toast.makeText(requireContext(), &quot;currentUserId=$currentUserId otherUserId=$otherUserId&quot;, Toast.LENGTH_SHORT).show()&#10;        } catch (_: Exception) {}&#10;&#10;        // RecyclerView setup&#10;        adapter = ChatAdapter(currentUserId)&#10;        rvMessages.setHasFixedSize(true)&#10;        rvMessages.layoutManager = LinearLayoutManager(requireContext()).apply { stackFromEnd = true }&#10;        rvMessages.adapter = adapter&#10;&#10;        val factory = ChatViewModelFactory(requireContext(), currentUserId)&#10;        viewModel = ViewModelProvider(this, factory).get(ChatViewModel::class.java)&#10;&#10;        viewModel.messages.observe(viewLifecycleOwner) { list -&gt;&#10;            Log.d(TAG, &quot;messages observer invoked: size=${list?.size ?: 0}&quot;)&#10;            // provide an immutable snapshot to the adapter to ensure DiffUtil can detect changes&#10;            val snapshot = list?.toList() ?: emptyList()&#10;&#10;            // Ensure messages have readable sender names when possible.&#10;            // - If the API provided senderName, keep it.&#10;            // - If senderID == currentUserId, mark as &quot;You&quot; (or leave server name if present).&#10;            // - If senderID matches otherUserId and `otherName` was passed to the fragment, use that.&#10;            val enriched = snapshot.map { msg -&gt;&#10;                if (msg.senderName != null) return@map msg&#10;                val inferredName = when (msg.senderID) {&#10;                    currentUserId -&gt; SharedPrefManager.getUserFullName(requireContext()) ?: &quot;You&quot;&#10;                    otherUserId -&gt; otherName&#10;                    else -&gt; null&#10;                }&#10;                if (inferredName != null) msg.copy(senderName = inferredName) else msg&#10;            }&#10;&#10;            adapter.submitList(enriched)&#10;&#10;            // If we don't already have a partner name, try to infer it from the messages (useful when server provides sender/receiver names on messages)&#10;            if (tvChatTitle.text.isNullOrBlank() &amp;&amp; otherName.isNullOrBlank()) {&#10;                val partnerMsg = enriched.firstOrNull { it.senderID == otherUserId &amp;&amp; !it.senderName.isNullOrBlank() }&#10;                    ?: enriched.firstOrNull { it.receiverID == otherUserId &amp;&amp; !it.receiverName.isNullOrBlank() }&#10;                partnerMsg?.let { m -&gt;&#10;                    val inferred = when {&#10;                        m.senderID == otherUserId -&gt; m.senderName ?: m.receiverName&#10;                        m.receiverID == otherUserId -&gt; m.receiverName ?: m.senderName&#10;                        else -&gt; m.senderName ?: m.receiverName&#10;                    }&#10;                    if (!inferred.isNullOrBlank()) {&#10;                        otherName = inferred&#10;                        tvChatTitle.text = inferred&#10;                        tvChatTitle.visibility = View.VISIBLE&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Ensure RecyclerView visible&#10;            rvMessages.visibility = View.VISIBLE&#10;&#10;            // Show messages content in debug panel (concise) to make them obvious during troubleshooting&#10;            val joined = enriched.joinToString(separator = &quot;\n&quot;) { m -&gt; &quot;[${m.senderID} -&gt; ${m.receiverID}] ${m.message}&quot; }&#10;            if (joined.isNotBlank()) {&#10;                // Append safely using resources and TextView.append to avoid concatenation/setText lint warnings&#10;                tvDebug?.append(&quot;\n&quot;)&#10;                tvDebug?.append(getString(R.string.messages_label))&#10;                tvDebug?.append(joined)&#10;                scrollDebug?.post { scrollDebug?.fullScroll(View.FOCUS_DOWN) }&#10;            }&#10;&#10;            // Use ListAdapter's diffing (avoid notifyDataSetChanged). Keep scrolling to bottom after submitList so new items are visible.&#10;            rvMessages.post {&#10;                // ListAdapter will handle updating the items efficiently; just scroll to the last item when present.&#10;                if (enriched.isNotEmpty()) try { rvMessages.scrollToPosition(enriched.size - 1) } catch (_: Exception) {}&#10;            }&#10;        }&#10;&#10;        viewModel.error.observe(viewLifecycleOwner) { err -&gt;&#10;            err?.let { Toast.makeText(requireContext(), it, Toast.LENGTH_SHORT).show() }&#10;        }&#10;&#10;        // Observe debug LiveData and show debug panel when content is present&#10;        // Modified: when FORCE_DEBUG_ALWAYS_ON is true we never hide the panel; we still update text.&#10;        viewModel.debug.observe(viewLifecycleOwner) { dbg -&gt;&#10;            Log.d(TAG, &quot;debug observer invoked; length=${'$'}{dbg?.length ?: 0}&quot;)&#10;            val text = dbg ?: &quot;&quot;&#10;            // Use persisted preference (fall back to FORCE_DEBUG_ALWAYS_ON)&#10;            val showPanel = try { SharedPrefManager.isDebugPanelEnabled(requireContext()) || FORCE_DEBUG_ALWAYS_ON } catch (_: Exception) { false }&#10;            // Only show panel if the user enabled it (or FORCE_DEBUG_ALWAYS_ON). When disabled, keep panel hidden&#10;            // but still update the internal tvDebug text so the logs are preserved for when the user enables the panel.&#10;            val prev = tvDebug?.text?.toString() ?: &quot;&quot;&#10;            val combined = if (prev.isBlank() || prev == getString(R.string.waiting_debug)) text else &quot;$prev\n$text&quot;&#10;            tvDebug?.text = combined&#10;            debugPanel?.visibility = if (showPanel) View.VISIBLE else View.GONE&#10;&#10;            // Bring debug panel to front and refresh so it's visible immediately&#10;            debugPanel?.bringToFront()&#10;            debugPanel?.requestLayout()&#10;            debugPanel?.invalidate()&#10;&#10;            // Scroll debug ScrollView to bottom so the latest debug content is visible&#10;            scrollDebug?.post { scrollDebug?.fullScroll(View.FOCUS_DOWN) }&#10;&#10;            // Optionally show a modal dialog with debug content to guarantee visibility&#10;            if (SHOW_DEBUG_DIALOG &amp;&amp; text.isNotBlank()) {&#10;                try {&#10;                    androidx.appcompat.app.AlertDialog.Builder(requireContext())&#10;                        .setTitle(&quot;Debug Output&quot;)&#10;                        .setMessage(text.take(4000))&#10;                        .setPositiveButton(&quot;Close&quot;, null)&#10;                        .show()&#10;                } catch (_: Exception) {}&#10;            }&#10;&#10;            // Also show a Toast for immediate feedback (short-lived)&#10;            if (!text.isBlank()) {&#10;                try { Toast.makeText(requireContext(), text.take(200), Toast.LENGTH_SHORT).show() } catch (_: Exception) {}&#10;            }&#10;        }&#10;&#10;        // Copy debug text to clipboard&#10;        btnCopyDebug?.setOnClickListener {&#10;            val txt = tvDebug?.text?.toString() ?: &quot;&quot;&#10;            val clipboard = requireContext().getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager&#10;            val clip = ClipData.newPlainText(&quot;chat-debug&quot;, txt)&#10;            clipboard.setPrimaryClip(clip)&#10;            Toast.makeText(requireContext(), &quot;Debug copied to clipboard&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // initial load&#10;        if (conversationID != null) {&#10;            tvDebug?.text = getString(R.string.requesting_conversation_id, conversationID ?: &quot;&quot;, currentUserId)&#10;            Toast.makeText(requireContext(), &quot;Loading conversation...&quot;, Toast.LENGTH_SHORT).show()&#10;            viewModel.loadConversation(conversationID = conversationID)&#10;        } else if (otherUserId != -1L) {&#10;            tvDebug?.text = getString(R.string.requesting_conversation_other, otherUserId, currentUserId)&#10;            Toast.makeText(requireContext(), &quot;Loading conversation...&quot;, Toast.LENGTH_SHORT).show()&#10;            viewModel.loadConversation(otherUserID = otherUserId)&#10;        }&#10;&#10;        btnSend.setOnClickListener {&#10;            val text = etMessage.text.toString().trim()&#10;            if (text.isEmpty()) return@setOnClickListener&#10;            if (otherUserId == -1L) {&#10;                Toast.makeText(requireContext(), &quot;No recipient specified&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            viewModel.sendMessage(receiverID = otherUserId, text = text, conversationID = conversationID)&#10;            etMessage.setText(&quot;&quot;)&#10;        }&#10;&#10;        return v&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: android.view.Menu, inflater: android.view.MenuInflater) {&#10;        super.onCreateOptionsMenu(menu, inflater)&#10;        inflater.inflate(R.menu.menu_chat_debug, menu)&#10;        // Initialize menu title based on current preference&#10;        try {&#10;            val enabled = SharedPrefManager.isDebugPanelEnabled(requireContext()) || FORCE_DEBUG_ALWAYS_ON&#10;            val item = menu.findItem(R.id.action_toggle_debug)&#10;            item?.title = if (enabled) getString(R.string.hide_debug) else getString(R.string.show_debug)&#10;        } catch (_: Exception) {}&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: android.view.MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            R.id.action_toggle_debug -&gt; {&#10;                try {&#10;                    val current = SharedPrefManager.isDebugPanelEnabled(requireContext())&#10;                    val next = !current&#10;                    SharedPrefManager.setDebugPanelEnabled(requireContext(), next)&#10;                    debugPanel?.visibility = if (next) View.VISIBLE else View.GONE&#10;                    item.title = if (next) getString(R.string.hide_debug) else getString(R.string.show_debug)&#10;                    // Also update the switch if present&#10;                    switchDebugToggle?.isChecked = next&#10;                } catch (_: Exception) {}&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val TAG = &quot;ChatFragment&quot;&#10;&#10;        @JvmStatic&#10;        fun newInstance(otherUserID: Long, conversationID: String? = null, otherName: String? = null) = ChatFragment().apply {&#10;            arguments = Bundle().apply {&#10;                putLong(&quot;otherUserID&quot;, otherUserID)&#10;                conversationID?.let { putString(&quot;conversationID&quot;, it) }&#10;                otherName?.let { putString(&quot;otherName&quot;, it) }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.capstone2.customer&#10;&#10;import android.content.ClipData&#10;import android.content.ClipboardManager&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.LinearLayout&#10;import android.widget.ScrollView&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import androidx.appcompat.widget.SwitchCompat&#10;import com.example.capstone2.R&#10;import com.example.capstone2.adapter.ChatAdapter&#10;import com.example.capstone2.repository.SharedPrefManager&#10;import com.example.capstone2.viewmodel.ChatViewModel&#10;import com.example.capstone2.viewmodel.ChatViewModelFactory&#10;import androidx.core.view.doOnLayout&#10;import androidx.core.view.updateLayoutParams&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;&#10;class ChatFragment : Fragment() {&#10;&#10;    private lateinit var rvMessages: RecyclerView&#10;    private lateinit var etMessage: EditText&#10;    private lateinit var btnSend: ImageButton&#10;    private lateinit var adapter: ChatAdapter&#10;    private lateinit var viewModel: ChatViewModel&#10;    private lateinit var tvChatTitle: TextView&#10;&#10;    // Debug panel views&#10;    private var debugPanel: LinearLayout? = null&#10;    private var scrollDebug: ScrollView? = null&#10;    private var tvDebug: TextView? = null&#10;    private var btnCopyDebug: Button? = null&#10;    private var switchDebugToggle: SwitchCompat? = null&#10;&#10;    // Force debug panel visible by default (set to false to restore original behaviour)&#10;    // Deprecated: preference-controlled now. Default kept false.&#10;    private val FORCE_DEBUG_ALWAYS_ON = true&#10;    // When true show a modal AlertDialog with debug output so it's impossible to miss during testing&#10;    private val SHOW_DEBUG_DIALOG = false&#10;&#10;    private var otherUserId: Long = -1L&#10;    private var conversationID: String? = null&#10;    private var currentUserId: Long = -1L&#10;    private var otherName: String? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setHasOptionsMenu(true)&#10;        arguments?.let {&#10;            // expecting arguments: otherUserID (Long) and optional conversationID (String) and otherName&#10;            if (it.containsKey(&quot;otherUserID&quot;)) {&#10;                otherUserId = it.getLong(&quot;otherUserID&quot;, -1L)&#10;            }&#10;            if (it.containsKey(&quot;conversationID&quot;)) {&#10;                conversationID = it.getString(&quot;conversationID&quot;)&#10;            }&#10;            if (it.containsKey(&quot;otherName&quot;)) {&#10;                otherName = it.getString(&quot;otherName&quot;)&#10;            }&#10;        }&#10;&#10;        // Use centralized SharedPrefManager to read current user id&#10;        currentUserId = SharedPrefManager.getUserId(requireContext()) ?: -1L&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val v = inflater.inflate(R.layout.fragment_chat, container, false)&#10;        tvChatTitle = v.findViewById(R.id.tvChatTitle)&#10;        rvMessages = v.findViewById(R.id.rvMessages)&#10;        etMessage = v.findViewById(R.id.etMessage)&#10;        btnSend = v.findViewById(R.id.btnSend)&#10;        val layoutInputView = v.findViewById&lt;LinearLayout&gt;(R.id.layoutInput)&#10;&#10;        // Debug panel views&#10;        debugPanel = v.findViewById(R.id.debugPanel)&#10;        scrollDebug = v.findViewById(R.id.scrollDebug)&#10;        tvDebug = v.findViewById(R.id.tvDebug)&#10;        btnCopyDebug = v.findViewById(R.id.btnCopyDebug)&#10;        switchDebugToggle = v.findViewById(R.id.switchDebugToggle)&#10;&#10;        // Initialize switch from preference and set panel visibility accordingly&#10;        try {&#10;            val enabled = SharedPrefManager.isDebugPanelEnabled(requireContext()) || FORCE_DEBUG_ALWAYS_ON&#10;            switchDebugToggle?.isChecked = enabled&#10;            debugPanel?.visibility = if (enabled) View.VISIBLE else View.GONE&#10;        } catch (_: Exception) {&#10;            // fallback to hidden by default&#10;            debugPanel?.visibility = View.GONE&#10;            switchDebugToggle?.isChecked = false&#10;        }&#10;&#10;        // Set placeholder if needed&#10;        if (tvDebug?.text.isNullOrBlank()) tvDebug?.text = getString(R.string.waiting_debug)&#10;&#10;        // Wire the switch listener to persist preference and update panel visibility&#10;        switchDebugToggle?.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            try {&#10;                SharedPrefManager.setDebugPanelEnabled(requireContext(), isChecked)&#10;                debugPanel?.visibility = if (isChecked) View.VISIBLE else View.GONE&#10;            } catch (_: Exception) {}&#10;        }&#10;&#10;        // Show the other party's name when provided so the UI clearly indicates the opened conversation&#10;        otherName?.let {&#10;            tvChatTitle.text = it&#10;            tvChatTitle.visibility = View.VISIBLE&#10;        }&#10;&#10;        // Quick runtime toast to verify ids used by this fragment&#10;        try {&#10;            Toast.makeText(requireContext(), &quot;currentUserId=$currentUserId otherUserId=$otherUserId&quot;, Toast.LENGTH_SHORT).show()&#10;        } catch (_: Exception) {}&#10;&#10;        // RecyclerView setup&#10;        adapter = ChatAdapter(currentUserId)&#10;        rvMessages.setHasFixedSize(true)&#10;        rvMessages.layoutManager = LinearLayoutManager(requireContext()).apply { stackFromEnd = true }&#10;        rvMessages.adapter = adapter&#10;        // Ensure RecyclerView is above other UI elements (debug panel, backgrounds) so messages are visible&#10;        rvMessages.bringToFront()&#10;        rvMessages.isNestedScrollingEnabled = true&#10;        rvMessages.clipToPadding = false&#10;        // Ensure RecyclerView is visually elevated above any overlapping UI (px = dp * density)&#10;        try { rvMessages.elevation = 8f * resources.displayMetrics.density } catch (_: Exception) {}&#10;&#10;        // Programmatically ensure input bar is anchored to fragment bottom and adjust RecyclerView padding so items are not hidden.&#10;        try {&#10;            layoutInputView?.bringToFront()&#10;            // Use a layout listener so sizes are known&#10;            v.viewTreeObserver.addOnGlobalLayoutListener {&#10;                try {&#10;                    layoutInputView?.let { input -&gt;&#10;                        // Force align parent bottom by updating RelativeLayout params if parent is RelativeLayout&#10;                        val parent = input.parent&#10;                        if (parent is android.widget.RelativeLayout) {&#10;                            input.updateLayoutParams&lt;android.widget.RelativeLayout.LayoutParams&gt; {&#10;                                addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM)&#10;                            }&#10;                        }&#10;&#10;                        // Compute bottom inset: input height + bottom navigation height (if present)&#10;                        val inputH = input.height&#10;                        var bottomNavH = 0&#10;                        try {&#10;                            val bottomNav = requireActivity().findViewById&lt;BottomNavigationView?&gt;(R.id.bottomNavigationView)&#10;                            if (bottomNav != null) bottomNavH = bottomNav.height&#10;                        } catch (_: Exception) { }&#10;&#10;                        // Apply bottom padding to RecyclerView so last item is visible above input/navigation&#10;                        val extra = (16 * resources.displayMetrics.density).toInt()&#10;                        val pad = inputH + bottomNavH + extra&#10;                        rvMessages.setPadding(rvMessages.paddingLeft, rvMessages.paddingTop, rvMessages.paddingRight, pad)&#10;&#10;                        // Fallback: explicitly set input Y so it appears at the bottom of the fragment&#10;                        try {&#10;                            val parentH = v.height&#10;                            if (parentH &gt; 0 &amp;&amp; inputH &gt; 0) {&#10;                                val targetY = (parentH - inputH - bottomNavH - extra).toFloat()&#10;                                input.y = targetY&#10;                                input.bringToFront()&#10;                            }&#10;                        } catch (_: Exception) {}&#10;&#10;                        rvMessages.bringToFront()&#10;                    }&#10;                } catch (_: Exception) {}&#10;            }&#10;&#10;            // Additional fallback: post a runnable to ensure input is moved to bottom after layout&#10;            v.post {&#10;                try {&#10;                    layoutInputView?.let { input -&gt;&#10;                        val parentH = v.height&#10;                        val inputH = input.height&#10;                        var bottomNavH = 0&#10;                        try {&#10;                            val bottomNav = requireActivity().findViewById&lt;BottomNavigationView?&gt;(R.id.bottomNavigationView)&#10;                            if (bottomNav != null) bottomNavH = bottomNav.height&#10;                        } catch (_: Exception) { }&#10;                        if (parentH &gt; 0 &amp;&amp; inputH &gt; 0) {&#10;                            val extra = (16 * resources.displayMetrics.density).toInt()&#10;                            val targetY = (parentH - inputH - bottomNavH - extra).toFloat()&#10;                            input.y = targetY&#10;                            input.bringToFront()&#10;                            rvMessages.setPadding(rvMessages.paddingLeft, rvMessages.paddingTop, rvMessages.paddingRight, inputH + bottomNavH + extra)&#10;                        }&#10;                    }&#10;                } catch (_: Exception) {}&#10;            }&#10;        } catch (_: Exception) {}&#10;&#10;        val factory = ChatViewModelFactory(requireContext(), currentUserId)&#10;        viewModel = ViewModelProvider(this, factory).get(ChatViewModel::class.java)&#10;&#10;        viewModel.messages.observe(viewLifecycleOwner) { list -&gt;&#10;            Log.d(TAG, &quot;messages observer invoked: size=${list?.size ?: 0}&quot;)&#10;            // provide an immutable snapshot to the adapter to ensure DiffUtil can detect changes&#10;            val snapshot = list?.toList() ?: emptyList()&#10;&#10;            // Ensure messages have readable sender names when possible.&#10;            // - If the API provided senderName, keep it.&#10;            // - If senderID == currentUserId, mark as &quot;You&quot; (or leave server name if present).&#10;            // - If senderID matches otherUserId and `otherName` was passed to the fragment, use that.&#10;            val enriched = snapshot.map { msg -&gt;&#10;                if (msg.senderName != null) return@map msg&#10;                val inferredName = when (msg.senderID) {&#10;                    currentUserId -&gt; SharedPrefManager.getUserFullName(requireContext()) ?: &quot;You&quot;&#10;                    otherUserId -&gt; otherName&#10;                    else -&gt; null&#10;                }&#10;                if (inferredName != null) msg.copy(senderName = inferredName) else msg&#10;            }&#10;&#10;            adapter.submitList(enriched)&#10;&#10;            // Ensure RecyclerView visible&#10;            rvMessages.visibility = View.VISIBLE&#10;            // Bring to front again after the list update in case other views were re-laid&#10;            try { rvMessages.bringToFront() } catch (_: Exception) {}&#10;&#10;            // Show messages content in debug panel (concise) to make them obvious during troubleshooting&#10;            val joined = enriched.joinToString(separator = &quot;\n&quot;) { m -&gt; &quot;[${m.senderID} -&gt; ${m.receiverID}] ${m.message}&quot; }&#10;            if (joined.isNotBlank()) {&#10;                // Append safely using resources and TextView.append to avoid concatenation/setText lint warnings&#10;                tvDebug?.append(&quot;\n&quot;)&#10;                tvDebug?.append(getString(R.string.messages_label))&#10;                tvDebug?.append(joined)&#10;                scrollDebug?.post { scrollDebug?.fullScroll(View.FOCUS_DOWN) }&#10;            }&#10;&#10;            // Use ListAdapter's diffing (avoid notifyDataSetChanged). Keep scrolling to bottom after submitList so new items are visible.&#10;            rvMessages.post {&#10;                // ListAdapter will handle updating the items efficiently; just scroll to the last item when present.&#10;                if (enriched.isNotEmpty()) try { rvMessages.scrollToPosition(enriched.size - 1) } catch (_: Exception) {}&#10;            }&#10;        }&#10;&#10;        viewModel.error.observe(viewLifecycleOwner) { err -&gt;&#10;            err?.let { Toast.makeText(requireContext(), it, Toast.LENGTH_SHORT).show() }&#10;        }&#10;&#10;        // Observe debug LiveData and show debug panel when content is present&#10;        // Modified: when FORCE_DEBUG_ALWAYS_ON is true we never hide the panel; we still update text.&#10;        viewModel.debug.observe(viewLifecycleOwner) { dbg -&gt;&#10;            Log.d(TAG, &quot;debug observer invoked; length=${'$'}{dbg?.length ?: 0}&quot;)&#10;            val text = dbg ?: &quot;&quot;&#10;            // Use persisted preference (fall back to FORCE_DEBUG_ALWAYS_ON)&#10;            val showPanel = try { SharedPrefManager.isDebugPanelEnabled(requireContext()) || FORCE_DEBUG_ALWAYS_ON } catch (_: Exception) { false }&#10;            // Only show panel if the user enabled it (or FORCE_DEBUG_ALWAYS_ON). When disabled, keep panel hidden&#10;            // but still update the internal tvDebug text so the logs are preserved for when the user enables the panel.&#10;            val prev = tvDebug?.text?.toString() ?: &quot;&quot;&#10;            val combined = if (prev.isBlank() || prev == getString(R.string.waiting_debug)) text else &quot;$prev\n$text&quot;&#10;            tvDebug?.text = combined&#10;            debugPanel?.visibility = if (showPanel) View.VISIBLE else View.GONE&#10;&#10;            // Bring debug panel to front and refresh so it's visible immediately&#10;            debugPanel?.bringToFront()&#10;            debugPanel?.requestLayout()&#10;            debugPanel?.invalidate()&#10;&#10;            // Scroll debug ScrollView to bottom so the latest debug content is visible&#10;            scrollDebug?.post { scrollDebug?.fullScroll(View.FOCUS_DOWN) }&#10;&#10;            // Optionally show a modal dialog with debug content to guarantee visibility&#10;            if (SHOW_DEBUG_DIALOG &amp;&amp; text.isNotBlank()) {&#10;                try {&#10;                    androidx.appcompat.app.AlertDialog.Builder(requireContext())&#10;                        .setTitle(&quot;Debug Output&quot;)&#10;                        .setMessage(text.take(4000))&#10;                        .setPositiveButton(&quot;Close&quot;, null)&#10;                        .show()&#10;                } catch (_: Exception) {}&#10;            }&#10;&#10;            // Also show a Toast for immediate feedback (short-lived)&#10;            if (!text.isBlank()) {&#10;                try { Toast.makeText(requireContext(), text.take(200), Toast.LENGTH_SHORT).show() } catch (_: Exception) {}&#10;            }&#10;        }&#10;&#10;        // Copy debug text to clipboard&#10;        btnCopyDebug?.setOnClickListener {&#10;            val txt = tvDebug?.text?.toString() ?: &quot;&quot;&#10;            val clipboard = requireContext().getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager&#10;            val clip = ClipData.newPlainText(&quot;chat-debug&quot;, txt)&#10;            clipboard.setPrimaryClip(clip)&#10;            Toast.makeText(requireContext(), &quot;Debug copied to clipboard&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // initial load&#10;        if (conversationID != null) {&#10;            tvDebug?.text = getString(R.string.requesting_conversation_id, conversationID ?: &quot;&quot;, currentUserId)&#10;            Toast.makeText(requireContext(), &quot;Loading conversation...&quot;, Toast.LENGTH_SHORT).show()&#10;            viewModel.loadConversation(conversationID = conversationID)&#10;        } else if (otherUserId != -1L) {&#10;            tvDebug?.text = getString(R.string.requesting_conversation_other, otherUserId, currentUserId)&#10;            Toast.makeText(requireContext(), &quot;Loading conversation...&quot;, Toast.LENGTH_SHORT).show()&#10;            viewModel.loadConversation(otherUserID = otherUserId)&#10;        }&#10;&#10;        btnSend.setOnClickListener {&#10;            val text = etMessage.text.toString().trim()&#10;            if (text.isEmpty()) return@setOnClickListener&#10;            if (otherUserId == -1L) {&#10;                Toast.makeText(requireContext(), &quot;No recipient specified&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            viewModel.sendMessage(receiverID = otherUserId, text = text, conversationID = conversationID)&#10;            etMessage.setText(&quot;&quot;)&#10;        }&#10;&#10;        return v&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: android.view.Menu, inflater: android.view.MenuInflater) {&#10;        super.onCreateOptionsMenu(menu, inflater)&#10;        inflater.inflate(R.menu.menu_chat_debug, menu)&#10;        // Initialize menu title based on current preference&#10;        try {&#10;            val enabled = SharedPrefManager.isDebugPanelEnabled(requireContext()) || FORCE_DEBUG_ALWAYS_ON&#10;            val item = menu.findItem(R.id.action_toggle_debug)&#10;            item?.title = if (enabled) getString(R.string.hide_debug) else getString(R.string.show_debug)&#10;        } catch (_: Exception) {}&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: android.view.MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            R.id.action_toggle_debug -&gt; {&#10;                try {&#10;                    val current = SharedPrefManager.isDebugPanelEnabled(requireContext())&#10;                    val next = !current&#10;                    SharedPrefManager.setDebugPanelEnabled(requireContext(), next)&#10;                    debugPanel?.visibility = if (next) View.VISIBLE else View.GONE&#10;                    item.title = if (next) getString(R.string.hide_debug) else getString(R.string.show_debug)&#10;                    // Also update the switch if present&#10;                    switchDebugToggle?.isChecked = next&#10;                } catch (_: Exception) {}&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val TAG = &quot;ChatFragment&quot;&#10;&#10;        @JvmStatic&#10;        fun newInstance(otherUserID: Long, conversationID: String? = null, otherName: String? = null) = ChatFragment().apply {&#10;            arguments = Bundle().apply {&#10;                putLong(&quot;otherUserID&quot;, otherUserID)&#10;                conversationID?.let { putString(&quot;conversationID&quot;, it) }&#10;                otherName?.let { putString(&quot;otherName&quot;, it) }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_message_received_variant_2.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_message_received_variant_2.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#E1F5FE&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &lt;padding android:left=&quot;8dp&quot; android:top=&quot;6dp&quot; android:right=&quot;8dp&quot; android:bottom=&quot;6dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_message_received_variant_3.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_message_received_variant_3.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#E1F5FE&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &lt;padding android:left=&quot;8dp&quot; android:top=&quot;6dp&quot; android:right=&quot;8dp&quot; android:bottom=&quot;6dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/customer_activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/customer_activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/drawer_layout&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.customer.CustomerMainActivity&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:id=&quot;@+id/main&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:id=&quot;@+id/flFragment&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;0sp&quot;&#10;            app:layout_constraintBottom_toTopOf=&quot;@+id/bottomNavigationView&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintHorizontal_bias=&quot;0.5&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.bottomnavigation.BottomNavigationView&#10;            android:id=&quot;@+id/bottomNavigationView&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;75sp&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            app:backgroundTint=&quot;@android:color/transparent&quot;&#10;            app:itemBackground=&quot;@null&quot;&#10;            android:elevation=&quot;0dp&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintHorizontal_bias=&quot;0.5&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:menu=&quot;@menu/bottom_nav_menu&quot; /&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;    &lt;com.google.android.material.navigation.NavigationView&#10;        android:id=&quot;@+id/nav_view&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        app:headerLayout=&quot;@layout/nav_header&quot;&#10;        app:menu=&quot;@menu/drawer_menu&quot; /&gt;&#10;&#10;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/drawer_layout&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.customer.CustomerMainActivity&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:id=&quot;@+id/main&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:id=&quot;@+id/flFragment&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;0dp&quot;&#10;            app:layout_constraintBottom_toTopOf=&quot;@+id/bottomNavigationView&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintHorizontal_bias=&quot;0.5&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.bottomnavigation.BottomNavigationView&#10;            android:id=&quot;@+id/bottomNavigationView&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;75sp&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            app:backgroundTint=&quot;@android:color/transparent&quot;&#10;            app:itemBackground=&quot;@null&quot;&#10;            android:elevation=&quot;0dp&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintHorizontal_bias=&quot;0.5&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:menu=&quot;@menu/bottom_nav_menu&quot; /&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;    &lt;com.google.android.material.navigation.NavigationView&#10;        android:id=&quot;@+id/nav_view&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        app:headerLayout=&quot;@layout/nav_header&quot;&#10;        app:menu=&quot;@menu/drawer_menu&quot; /&gt;&#10;&#10;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_chat.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_chat.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    tools:ignore=&quot;Autofill&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvChatTitle&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toStartOf=&quot;@+id/switchDebugToggle&quot; /&gt;&#10;&#10;    &lt;androidx.appcompat.widget.SwitchCompat&#10;        android:id=&quot;@+id/switchDebugToggle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_margin=&quot;8dp&quot;&#10;        android:text=&quot;Debug&quot;&#10;        android:contentDescription=&quot;Toggle debug panel&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvMessages&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/debugPanel&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/layoutInput&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;!-- Debug panel: shows outgoing request and server response when adb isn't available --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/debugPanel&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:visibility=&quot;visible&quot;&#10;        android:background=&quot;#FFF59D&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:elevation=&quot;8dp&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/tvChatTitle&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/rvMessages&quot;&gt;&#10;&#10;        &lt;ScrollView&#10;            android:id=&quot;@+id/scrollDebug&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:fillViewport=&quot;true&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDebug&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:minHeight=&quot;120dp&quot;&#10;                android:textColor=&quot;#B71C1C&quot;&#10;                android:gravity=&quot;start&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:padding=&quot;4dp&quot; /&gt;&#10;        &lt;/ScrollView&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnCopyDebug&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/copy_debug&quot;&#10;            android:layout_gravity=&quot;center&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layoutInput&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;?android:attr/windowBackground&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:importantForAutofill=&quot;no&quot;&#10;        tools:ignore=&quot;Autofill&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;0.0&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/etMessage&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:hint=&quot;@string/hint_type_message&quot;&#10;            android:inputType=&quot;textMultiLine&quot;&#10;            android:autofillHints=&quot;none&quot;&#10;            android:importantForAutofill=&quot;no&quot;&#10;            tools:ignore=&quot;Autofill&quot; /&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnSend&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:contentDescription=&quot;@string/send&quot;&#10;            android:src=&quot;@android:drawable/ic_menu_send&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:ignore=&quot;Autofill&quot;&gt;&#10;&#10;    &lt;!-- Top bar items --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvChatTitle&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:visibility=&quot;gone&quot; /&gt;&#10;&#10;    &lt;androidx.appcompat.widget.SwitchCompat&#10;        android:id=&quot;@+id/switchDebugToggle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_alignParentEnd=&quot;true&quot;&#10;        android:layout_margin=&quot;8dp&quot;&#10;        android:text=&quot;Debug&quot;&#10;        android:contentDescription=&quot;Toggle debug panel&quot; /&gt;&#10;&#10;    &lt;!-- Debug panel (hidden by default) placed below the title and above the messages --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/debugPanel&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:background=&quot;#FFF59D&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:elevation=&quot;8dp&quot;&#10;        android:layout_below=&quot;@id/tvChatTitle&quot;&gt;&#10;&#10;        &lt;ScrollView&#10;            android:id=&quot;@+id/scrollDebug&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:fillViewport=&quot;true&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDebug&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:minHeight=&quot;120dp&quot;&#10;                android:textColor=&quot;#B71C1C&quot;&#10;                android:gravity=&quot;start&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:padding=&quot;4dp&quot; /&gt;&#10;        &lt;/ScrollView&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnCopyDebug&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/copy_debug&quot;&#10;            android:layout_gravity=&quot;center&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Messages list sits above the input and below the debug panel / switch --&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvMessages&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:layout_above=&quot;@+id/layoutInput&quot;&#10;        android:layout_below=&quot;@id/switchDebugToggle&quot; /&gt;&#10;&#10;    &lt;!-- Input bar anchored to bottom --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layoutInput&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#10;        android:elevation=&quot;4dp&quot;&#10;        android:background=&quot;?android:attr/windowBackground&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:importantForAutofill=&quot;no&quot;&#10;        tools:ignore=&quot;Autofill&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/etMessage&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:hint=&quot;@string/hint_type_message&quot;&#10;            android:inputType=&quot;textMultiLine&quot;&#10;            android:autofillHints=&quot;none&quot;&#10;            android:importantForAutofill=&quot;no&quot;&#10;            tools:ignore=&quot;Autofill&quot; /&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnSend&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:contentDescription=&quot;@string/send&quot;&#10;            android:src=&quot;@android:drawable/ic_menu_send&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/RelativeLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_messages.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_messages.xml" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvConversations&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvEmpty&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:text=&quot;No conversations&quot;&#10;        android:visibility=&quot;gone&quot;/&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_message_received.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_message_received.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:gravity=&quot;start&quot;&#10;    android:padding=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/messageBubbleReceived&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@drawable/bg_message_received&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- New: sender name shown above message for received messages --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSenderName&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#333333&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvMessageReceived&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#000000&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvTimeReceived&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#666666&quot;&#10;            android:textSize=&quot;10sp&quot;&#10;            android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:gravity=&quot;start&quot;&#10;    android:padding=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/messageBubbleReceived&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;8dp&quot;&#10;        android:layout_marginEnd=&quot;48dp&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:background=&quot;@drawable/bg_message_received&quot;&#10;        android:maxWidth=&quot;280dp&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- New: sender name shown above message for received messages --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSenderName&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#333333&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvMessageReceived&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#000000&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvTimeReceived&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#666666&quot;&#10;            android:textSize=&quot;11sp&quot;&#10;            android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_message_sent.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_message_sent.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:gravity=&quot;end&quot;&#10;    android:padding=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/messageBubbleSent&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@drawable/bg_message_sent&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- Sender name for sent messages (usually 'You' or the current user's name) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSenderNameSent&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvMessageSent&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvTimeSent&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#DDDDDD&quot;&#10;            android:textSize=&quot;11sp&quot;&#10;            android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:gravity=&quot;end&quot;&#10;    android:padding=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/messageBubbleSent&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginEnd=&quot;8dp&quot;&#10;        android:layout_marginStart=&quot;48dp&quot;&#10;        android:layout_gravity=&quot;end&quot;&#10;        android:background=&quot;@drawable/bg_message_sent&quot;&#10;        android:maxWidth=&quot;280dp&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- Sender name for sent messages (usually 'You' or the current user's name) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSenderNameSent&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvMessageSent&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvTimeSent&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#DDDDDD&quot;&#10;            android:textSize=&quot;11sp&quot;&#10;            android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/owner_activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/owner_activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.owner.OwnerMainActivity&quot;&gt;&#10;&#10;    &lt;!-- App bar / toolbar so Owner can see overflow menu (Logout) --&gt;&#10;    &lt;androidx.appcompat.widget.Toolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        android:background=&quot;?attr/colorPrimary&quot;&#10;        android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&#10;        app:titleTextColor=&quot;@android:color/white&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:title=&quot;Owner&quot; /&gt;&#10;&#10;    &lt;FrameLayout&#10;        android:id=&quot;@+id/flFragment&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0sp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/bottomNavigationView&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;0.5&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/toolbar&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.bottomnavigation.BottomNavigationView&#10;        android:id=&quot;@+id/bottomNavigationView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;75sp&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        app:backgroundTint=&quot;@android:color/transparent&quot;&#10;        app:itemBackground=&quot;@null&quot;&#10;        android:elevation=&quot;0dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;0.5&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:menu=&quot;@menu/bottom_nav_menu&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.owner.OwnerMainActivity&quot;&gt;&#10;&#10;    &lt;!-- App bar / toolbar so Owner can see overflow menu (Logout) --&gt;&#10;    &lt;androidx.appcompat.widget.Toolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        android:background=&quot;?attr/colorPrimary&quot;&#10;        android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&#10;        app:titleTextColor=&quot;@android:color/white&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:title=&quot;Owner&quot; /&gt;&#10;&#10;    &lt;FrameLayout&#10;        android:id=&quot;@+id/flFragment&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/bottomNavigationView&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;0.5&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/toolbar&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.bottomnavigation.BottomNavigationView&#10;        android:id=&quot;@+id/bottomNavigationView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;75sp&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        app:backgroundTint=&quot;@android:color/transparent&quot;&#10;        app:itemBackground=&quot;@null&quot;&#10;        android:elevation=&quot;0dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;0.5&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:menu=&quot;@menu/bottom_nav_menu&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>