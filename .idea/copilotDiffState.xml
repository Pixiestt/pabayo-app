<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/adapter/TrackAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/adapter/TrackAdapter.kt" />
              <option name="originalContent" value="package com.example.capstone2.adapter&#10;&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.*&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.capstone2.R&#10;import com.example.capstone2.data.models.Request&#10;&#10;class TrackAdapter(&#10;    private var requests: List&lt;Request&gt;,&#10;    private val onButtonClick: (Request, Int) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;TrackAdapter.TrackViewHolder&gt;() {&#10;&#10;    inner class TrackViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val customerName = itemView.findViewById&lt;TextView&gt;(R.id.tvCustomerName)&#10;        val tvSackQty: TextView = itemView.findViewById(R.id.tvSackQty)&#10;        val tvServices: TextView = itemView.findViewById(R.id.tvServices)&#10;        val tvSchedule: TextView = itemView.findViewById(R.id.tvSchedule)&#10;        val tvPickupLocation: TextView = itemView.findViewById(R.id.tvPickupLocation)&#10;        val tvDeliveryLocation: TextView = itemView.findViewById(R.id.tvDeliveryLocation)&#10;        val tvCurrentStatus: TextView = itemView.findViewById(R.id.tvCurrentStatus)&#10;&#10;        val rgStatusOptions = itemView.findViewById&lt;RadioGroup&gt;(R.id.rgStatusOptions)&#10;        val rbDpickup = itemView.findViewById&lt;RadioButton&gt;(R.id.rbDpickup)&#10;        val rbCDropoff = itemView.findViewById&lt;RadioButton&gt;(R.id.rbCDropoff)&#10;        val rbPending = itemView.findViewById&lt;RadioButton&gt;(R.id.rbPending)&#10;        val rbProcessing = itemView.findViewById&lt;RadioButton&gt;(R.id.rbProcessing)&#10;        val rbOutForDelivery = itemView.findViewById&lt;RadioButton&gt;(R.id.rbOutForDelivery)&#10;        val rbCPickup = itemView.findViewById&lt;RadioButton&gt;(R.id.rbCPickup)&#10;&#10;        val btnSubmit = itemView.findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TrackViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_track, parent, false)&#10;        return TrackViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: TrackViewHolder, position: Int) {&#10;        val req = requests[position]&#10;        val ctx = holder.itemView.context&#10;        holder.customerName.text = req.customerName&#10;        holder.tvSackQty.text = ctx.getString(R.string.sacks_format, req.sackQuantity)&#10;        holder.tvServices.text = ctx.getString(R.string.services_format, req.serviceName)&#10;        // Owner track should display the shorter label 'Schedule:' per request&#10;        holder.tvSchedule.text = ctx.getString(R.string.schedule_format_owner, req.schedule ?: ctx.getString(R.string.not_set))&#10;&#10;        // Handle pickup location&#10;        if (!req.pickupLocation.isNullOrEmpty()) {&#10;            holder.tvPickupLocation.text = ctx.getString(R.string.pickup_location_format, req.pickupLocation)&#10;            holder.tvPickupLocation.visibility = View.VISIBLE&#10;        } else {&#10;            // Check if service includes pickup (serviceID 1,2,5,6)&#10;            when (req.serviceID) {&#10;                1L, 2L, 5L, 6L -&gt; {&#10;                    holder.tvPickupLocation.text = ctx.getString(R.string.pickup_location_format, ctx.getString(R.string.not_set))&#10;                    holder.tvPickupLocation.visibility = View.VISIBLE&#10;                }&#10;                else -&gt; holder.tvPickupLocation.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Handle delivery location&#10;        if (!req.deliveryLocation.isNullOrEmpty()) {&#10;            holder.tvDeliveryLocation.text = ctx.getString(R.string.delivery_location_format, req.deliveryLocation)&#10;            holder.tvDeliveryLocation.visibility = View.VISIBLE&#10;        } else {&#10;            // Check if service includes delivery (serviceID 1,3,5,7)&#10;            when (req.serviceID) {&#10;                1L, 3L, 5L, 7L -&gt; {&#10;                    holder.tvDeliveryLocation.text = ctx.getString(R.string.delivery_location_format, ctx.getString(R.string.not_set))&#10;                    holder.tvDeliveryLocation.visibility = View.VISIBLE&#10;                }&#10;                else -&gt; holder.tvDeliveryLocation.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Set current status text&#10;        val currentStatusText = getStatusText(req.statusID.toInt())&#10;        holder.tvCurrentStatus.text = ctx.getString(R.string.status_format, currentStatusText)&#10;&#10;        // Set a color based on status&#10;        val statusColor = when(req.statusID.toInt()) {&#10;            10 -&gt; &quot;#4CAF50&quot; // Green for accepted&#10;            2, 3 -&gt; &quot;#FF9800&quot; // Orange for pickup/dropoff&#10;            4 -&gt; &quot;#2196F3&quot; // Blue for pending&#10;            5 -&gt; &quot;#9C27B0&quot; // Purple for processing&#10;            6, 7 -&gt; &quot;#FF5722&quot; // Deep orange for delivery/pickup&#10;            else -&gt; &quot;#3F51B5&quot; // Indigo default&#10;        }&#10;        holder.tvCurrentStatus.setTextColor(android.graphics.Color.parseColor(statusColor))&#10;&#10;        val statusToRadioMap = mapOf(&#10;            2 to holder.rbDpickup,&#10;            3 to holder.rbCDropoff,&#10;            4 to holder.rbPending,&#10;            5 to holder.rbProcessing,&#10;            6 to holder.rbOutForDelivery,&#10;            7 to holder.rbCPickup&#10;        )&#10;&#10;        val allRadioButtons = listOf(&#10;            holder.rbDpickup, holder.rbCDropoff, holder.rbPending,&#10;            holder.rbProcessing, holder.rbOutForDelivery, holder.rbCPickup&#10;        )&#10;&#10;        // Reset: hide and uncheck all radio buttons and hide radio group/submit by default&#10;        allRadioButtons.forEach {&#10;            it.visibility = View.GONE&#10;            it.isChecked = false&#10;            it.isEnabled = true&#10;            it.isClickable = true&#10;            it.isFocusable = true&#10;            it.setOnClickListener(null) // clear any previous click listeners&#10;        }&#10;        // clear previous group listener before resetting&#10;        holder.rgStatusOptions.setOnCheckedChangeListener(null)&#10;        holder.rgStatusOptions.clearCheck()&#10;        holder.rgStatusOptions.visibility = View.GONE&#10;        holder.rgStatusOptions.isEnabled = false&#10;        holder.rgStatusOptions.isClickable = false&#10;        holder.btnSubmit.visibility = View.GONE&#10;        holder.btnSubmit.isEnabled = false&#10;        holder.btnSubmit.setOnClickListener(null) // clear previous submit listener&#10;&#10;        // Define full step list based on serviceID&#10;        val fullStatusIDs = when (req.serviceID) {&#10;            1L, 5L -&gt; listOf(2, 4, 5, 6)&#10;            2L, 6L -&gt; listOf(2, 4, 5, 7)&#10;            3L, 7L -&gt; listOf(3, 4, 5, 6)&#10;            4L, 8L -&gt; listOf(3, 4, 5, 7)&#10;            else -&gt; listOf()&#10;        }&#10;        &#10;        // Find current index in flow&#10;        val currentIndex = fullStatusIDs.indexOf(req.statusID.toInt())&#10;&#10;        // Determine next status to show (handle case when status isn't in flow, e.g., 10 = Accepted)&#10;        val nextStatus: Int? = when {&#10;            fullStatusIDs.isEmpty() -&gt; null&#10;            currentIndex &gt;= 0 &amp;&amp; currentIndex &lt; fullStatusIDs.size - 1 -&gt; fullStatusIDs[currentIndex + 1]&#10;            currentIndex == -1 -&gt; fullStatusIDs[0] // start flow when current status is 'Accepted' or outside flow&#10;            else -&gt; null&#10;        }&#10;&#10;        if (nextStatus != null) {&#10;            // Show only the radio corresponding to the next status&#10;            val nextStepRadioButton = statusToRadioMap[nextStatus]&#10;            nextStepRadioButton?.let {&#10;                it.visibility = View.VISIBLE&#10;                it.isChecked = false // do NOT auto-check; allow user to tap&#10;                it.isEnabled = true&#10;                it.isClickable = true&#10;                it.isFocusable = true&#10;                holder.rgStatusOptions.visibility = View.VISIBLE&#10;                holder.rgStatusOptions.isEnabled = true&#10;                holder.rgStatusOptions.isClickable = true&#10;                holder.btnSubmit.visibility = View.VISIBLE&#10;                holder.btnSubmit.isEnabled = false&#10;&#10;                // Ensure the parent/item and RadioGroup allow children to receive touch/focus&#10;                // Make the parent not intercept touches so RadioButton receives the first tap&#10;                holder.itemView.isClickable = false&#10;                holder.itemView.isFocusable = false&#10;                holder.itemView.isFocusableInTouchMode = false&#10;                holder.rgStatusOptions.descendantFocusability = ViewGroup.FOCUS_AFTER_DESCENDANTS&#10;&#10;                // Add an explicit click listener to ensure immediate selection&#10;                it.setOnClickListener { rb -&gt;&#10;                    (rb as? RadioButton)?.isChecked = true&#10;                    // ensure the radio group registers the change&#10;                    holder.rgStatusOptions.check((rb as RadioButton).id)&#10;                    holder.btnSubmit.isEnabled = true&#10;                    Log.d(&quot;TrackAdapter&quot;, &quot;Radio clicked for request=${req.requestID}, radioId=${(rb as RadioButton).id}&quot;)&#10;                }&#10;            }&#10;&#10;            // Enable submit only when a selection is made&#10;            holder.rgStatusOptions.setOnCheckedChangeListener { group, checkedId -&gt;&#10;                holder.btnSubmit.isEnabled = checkedId != -1&#10;                Log.d(&quot;TrackAdapter&quot;, &quot;Checked changed request=${req.requestID}, checkedId=$checkedId&quot;)&#10;            }&#10;&#10;            // Map radio id -&gt; status for submit&#10;            val radioIdToStatus = mapOf(&#10;                holder.rbDpickup.id to 2,&#10;                holder.rbCDropoff.id to 3,&#10;                holder.rbPending.id to 4,&#10;                holder.rbProcessing.id to 5,&#10;                holder.rbOutForDelivery.id to 6,&#10;                holder.rbCPickup.id to 7&#10;            )&#10;&#10;            // Add submit button click listener that reads the selected radio at the moment of click&#10;            holder.btnSubmit.setOnClickListener {&#10;                val checkedId = holder.rgStatusOptions.checkedRadioButtonId&#10;                val selectedStatus = radioIdToStatus[checkedId]&#10;                Log.d(&quot;TrackAdapter&quot;, &quot;Submit clicked request=${req.requestID}, checkedId=$checkedId, selectedStatus=$selectedStatus&quot;)&#10;                if (selectedStatus != null) {&#10;                    onButtonClick(req, selectedStatus)&#10;                } else {&#10;                    Toast.makeText(holder.itemView.context, &quot;Please select a status option&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        } else {&#10;            // No next step available -&gt; hide submit (already hidden by reset above)&#10;            holder.btnSubmit.visibility = View.GONE&#10;            holder.btnSubmit.setOnClickListener(null)&#10;            holder.rgStatusOptions.setOnCheckedChangeListener(null)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = requests.size&#10;&#10;    fun updateRequests(newRequests: List&lt;Request&gt;) {&#10;        requests = newRequests&#10;        notifyDataSetChanged()&#10;    }&#10;    &#10;    private fun getStatusText(statusId: Int): String {&#10;        return when (statusId) {&#10;            1 -&gt; &quot;Subject for approval&quot;&#10;            2 -&gt; &quot;Delivery boy pickup&quot;&#10;            3 -&gt; &quot;Waiting for customer drop off&quot;&#10;            4 -&gt; &quot;In queue&quot;&#10;            5 -&gt; &quot;Processing&quot;&#10;            6 -&gt; &quot;Rider out for delivery&quot;&#10;            7 -&gt; &quot;Waiting for customer to claim&quot;&#10;            8 -&gt; &quot;Completed&quot;&#10;            9 -&gt; &quot;Rejected&quot;&#10;            10 -&gt; &quot;Request Accepted&quot;&#10;            11 -&gt; &quot;Partially Accepted&quot;&#10;            else -&gt; &quot;Unknown status&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.capstone2.adapter&#10;&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.*&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.capstone2.R&#10;import com.example.capstone2.data.models.Request&#10;&#10;class TrackAdapter(&#10;    private var requests: List&lt;Request&gt;,&#10;    private val onButtonClick: (Request, Int) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;TrackAdapter.TrackViewHolder&gt;() {&#10;&#10;    inner class TrackViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val customerName = itemView.findViewById&lt;TextView&gt;(R.id.tvCustomerName)&#10;        val tvSackQty: TextView = itemView.findViewById(R.id.tvSackQty)&#10;        val tvServices: TextView = itemView.findViewById(R.id.tvServices)&#10;        val tvSchedule: TextView = itemView.findViewById(R.id.tvSchedule)&#10;        val tvPickupLocation: TextView = itemView.findViewById(R.id.tvPickupLocation)&#10;        val tvDeliveryLocation: TextView = itemView.findViewById(R.id.tvDeliveryLocation)&#10;        val tvCurrentStatus: TextView = itemView.findViewById(R.id.tvCurrentStatus)&#10;&#10;        val rgStatusOptions = itemView.findViewById&lt;RadioGroup&gt;(R.id.rgStatusOptions)&#10;        val rbDpickup = itemView.findViewById&lt;RadioButton&gt;(R.id.rbDpickup)&#10;        val rbCDropoff = itemView.findViewById&lt;RadioButton&gt;(R.id.rbCDropoff)&#10;        val rbPending = itemView.findViewById&lt;RadioButton&gt;(R.id.rbPending)&#10;        val rbProcessing = itemView.findViewById&lt;RadioButton&gt;(R.id.rbProcessing)&#10;        val rbOutForDelivery = itemView.findViewById&lt;RadioButton&gt;(R.id.rbOutForDelivery)&#10;        val rbCPickup = itemView.findViewById&lt;RadioButton&gt;(R.id.rbCPickup)&#10;&#10;        val btnSubmit = itemView.findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;        // More button we added to show extra details (use ImageButton to match layout)&#10;        val btnMore = itemView.findViewById&lt;android.widget.ImageButton&gt;(R.id.btnMore)&#10;        // More label for discoverability&#10;        val btnMoreLabel = itemView.findViewById&lt;TextView&gt;(R.id.btnMoreLabel)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TrackViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_track, parent, false)&#10;        return TrackViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: TrackViewHolder, position: Int) {&#10;        val req = requests[position]&#10;        val ctx = holder.itemView.context&#10;        holder.customerName.text = req.customerName&#10;        holder.tvSackQty.text = ctx.getString(R.string.sacks_format, req.sackQuantity)&#10;        holder.tvServices.text = ctx.getString(R.string.services_format, req.serviceName)&#10;        // Owner track should display the shorter label 'Schedule:' per request&#10;        holder.tvSchedule.text = ctx.getString(R.string.schedule_format_owner, req.schedule ?: ctx.getString(R.string.not_set))&#10;&#10;        // Pickup location is shown in the More dialog only; hide it in the item view&#10;        holder.tvPickupLocation.visibility = View.GONE&#10;&#10;        // Delivery location is shown in the More dialog only; hide it in the item view&#10;        holder.tvDeliveryLocation.visibility = View.GONE&#10;&#10;        // Set current status text&#10;        val currentStatusText = getStatusText(req.statusID.toInt())&#10;        holder.tvCurrentStatus.text = ctx.getString(R.string.status_format, currentStatusText)&#10;&#10;        // Set a color based on status&#10;        val statusColor = when(req.statusID.toInt()) {&#10;            10 -&gt; &quot;#4CAF50&quot; // Green for accepted&#10;            2, 3 -&gt; &quot;#FF9800&quot; // Orange for pickup/dropoff&#10;            4 -&gt; &quot;#2196F3&quot; // Blue for pending&#10;            5 -&gt; &quot;#9C27B0&quot; // Purple for processing&#10;            6, 7 -&gt; &quot;#FF5722&quot; // Deep orange for delivery/pickup&#10;            else -&gt; &quot;#3F51B5&quot; // Indigo default&#10;        }&#10;        holder.tvCurrentStatus.setTextColor(android.graphics.Color.parseColor(statusColor))&#10;&#10;        val statusToRadioMap = mapOf(&#10;            2 to holder.rbDpickup,&#10;            3 to holder.rbCDropoff,&#10;            4 to holder.rbPending,&#10;            5 to holder.rbProcessing,&#10;            6 to holder.rbOutForDelivery,&#10;            7 to holder.rbCPickup&#10;        )&#10;&#10;        val allRadioButtons = listOf(&#10;            holder.rbDpickup, holder.rbCDropoff, holder.rbPending,&#10;            holder.rbProcessing, holder.rbOutForDelivery, holder.rbCPickup&#10;        )&#10;&#10;        // Reset: hide and uncheck all radio buttons and hide radio group/submit by default&#10;        allRadioButtons.forEach {&#10;            it.visibility = View.GONE&#10;            it.isChecked = false&#10;            it.isEnabled = true&#10;            it.isClickable = true&#10;            it.isFocusable = true&#10;            it.setOnClickListener(null) // clear any previous click listeners&#10;        }&#10;        // clear previous group listener before resetting&#10;        holder.rgStatusOptions.setOnCheckedChangeListener(null)&#10;        holder.rgStatusOptions.clearCheck()&#10;        holder.rgStatusOptions.visibility = View.GONE&#10;        holder.rgStatusOptions.isEnabled = false&#10;        holder.rgStatusOptions.isClickable = false&#10;        holder.btnSubmit.visibility = View.GONE&#10;        holder.btnSubmit.isEnabled = false&#10;        holder.btnSubmit.setOnClickListener(null) // clear previous submit listener&#10;&#10;        // Define full step list based on serviceID&#10;        val fullStatusIDs = when (req.serviceID) {&#10;            1L, 5L -&gt; listOf(2, 4, 5, 6)&#10;            2L, 6L -&gt; listOf(2, 4, 5, 7)&#10;            3L, 7L -&gt; listOf(3, 4, 5, 6)&#10;            4L, 8L -&gt; listOf(3, 4, 5, 7)&#10;            else -&gt; listOf()&#10;        }&#10;        &#10;        // Find current index in flow&#10;        val currentIndex = fullStatusIDs.indexOf(req.statusID.toInt())&#10;&#10;        // Determine next status to show (handle case when status isn't in flow, e.g., 10 = Accepted)&#10;        val nextStatus: Int? = when {&#10;            fullStatusIDs.isEmpty() -&gt; null&#10;            currentIndex &gt;= 0 &amp;&amp; currentIndex &lt; fullStatusIDs.size - 1 -&gt; fullStatusIDs[currentIndex + 1]&#10;            currentIndex == -1 -&gt; fullStatusIDs[0] // start flow when current status is 'Accepted' or outside flow&#10;            else -&gt; null&#10;        }&#10;&#10;        if (nextStatus != null) {&#10;            // Show only the radio corresponding to the next status&#10;            val nextStepRadioButton = statusToRadioMap[nextStatus]&#10;            nextStepRadioButton?.let {&#10;                it.visibility = View.VISIBLE&#10;                it.isChecked = false // do NOT auto-check; allow user to tap&#10;                it.isEnabled = true&#10;                it.isClickable = true&#10;                it.isFocusable = true&#10;                holder.rgStatusOptions.visibility = View.VISIBLE&#10;                holder.rgStatusOptions.isEnabled = true&#10;                holder.rgStatusOptions.isClickable = true&#10;                holder.btnSubmit.visibility = View.VISIBLE&#10;                holder.btnSubmit.isEnabled = false&#10;&#10;                // Ensure the parent/item and RadioGroup allow children to receive touch/focus&#10;                // Make the parent not intercept touches so RadioButton receives the first tap&#10;                holder.itemView.isClickable = false&#10;                holder.itemView.isFocusable = false&#10;                holder.itemView.isFocusableInTouchMode = false&#10;                holder.rgStatusOptions.descendantFocusability = ViewGroup.FOCUS_AFTER_DESCENDANTS&#10;&#10;                // Add an explicit click listener to ensure immediate selection&#10;                it.setOnClickListener { rb -&gt;&#10;                    (rb as? RadioButton)?.isChecked = true&#10;                    // ensure the radio group registers the change&#10;                    holder.rgStatusOptions.check((rb as RadioButton).id)&#10;                    holder.btnSubmit.isEnabled = true&#10;                    Log.d(&quot;TrackAdapter&quot;, &quot;Radio clicked for request=${req.requestID}, radioId=${(rb as RadioButton).id}&quot;)&#10;                }&#10;            }&#10;&#10;            // Enable submit only when a selection is made&#10;            holder.rgStatusOptions.setOnCheckedChangeListener { group, checkedId -&gt;&#10;                holder.btnSubmit.isEnabled = checkedId != -1&#10;                Log.d(&quot;TrackAdapter&quot;, &quot;Checked changed request=${req.requestID}, checkedId=$checkedId&quot;)&#10;            }&#10;&#10;            // Map radio id -&gt; status for submit&#10;            val radioIdToStatus = mapOf(&#10;                holder.rbDpickup.id to 2,&#10;                holder.rbCDropoff.id to 3,&#10;                holder.rbPending.id to 4,&#10;                holder.rbProcessing.id to 5,&#10;                holder.rbOutForDelivery.id to 6,&#10;                holder.rbCPickup.id to 7&#10;            )&#10;&#10;            // Add submit button click listener that reads the selected radio at the moment of click&#10;            holder.btnSubmit.setOnClickListener {&#10;                val checkedId = holder.rgStatusOptions.checkedRadioButtonId&#10;                val selectedStatus = radioIdToStatus[checkedId]&#10;                Log.d(&quot;TrackAdapter&quot;, &quot;Submit clicked request=${req.requestID}, checkedId=$checkedId, selectedStatus=$selectedStatus&quot;)&#10;                if (selectedStatus != null) {&#10;                    onButtonClick(req, selectedStatus)&#10;                } else {&#10;                    Toast.makeText(holder.itemView.context, &quot;Please select a status option&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        } else {&#10;            // No next step available -&gt; hide submit (already hidden by reset above)&#10;            holder.btnSubmit.visibility = View.GONE&#10;            holder.btnSubmit.setOnClickListener(null)&#10;            holder.rgStatusOptions.setOnCheckedChangeListener(null)&#10;        }&#10;&#10;        // Wire the More button to show a dialog with extra details&#10;        holder.btnMore.setOnClickListener {&#10;            val detailsBuilder = StringBuilder()&#10;&#10;            // Include pickup location if visible or service requires pickup&#10;            if (!req.pickupLocation.isNullOrEmpty()) {&#10;                detailsBuilder.append(&quot;Pickup location: ${req.pickupLocation}\n&quot;)&#10;            } else {&#10;                when (req.serviceID) {&#10;                    1L, 2L, 5L, 6L -&gt; detailsBuilder.append(&quot;Pickup location: Not set\n&quot;)&#10;                }&#10;            }&#10;&#10;            // Include delivery location if visible or service requires delivery&#10;            if (!req.deliveryLocation.isNullOrEmpty()) {&#10;                detailsBuilder.append(&quot;Delivery location: ${req.deliveryLocation}\n&quot;)&#10;            } else {&#10;                when (req.serviceID) {&#10;                    1L, 3L, 5L, 7L -&gt; detailsBuilder.append(&quot;Delivery location: Not set\n&quot;)&#10;                }&#10;            }&#10;&#10;            // Comment&#10;            detailsBuilder.append(&quot;Comment: ${if (!req.comment.isNullOrEmpty()) req.comment else &quot;None&quot;}\n&quot;)&#10;&#10;            // Contact number — use Request.contactNumber if available&#10;            val contact = if (!req.contactNumber.isNullOrEmpty()) req.contactNumber else &quot;Not available&quot;&#10;            detailsBuilder.append(&quot;Contact number: $contact&quot;)&#10;&#10;            val message = detailsBuilder.toString().trim()&#10;&#10;            // Show dialog&#10;            android.app.AlertDialog.Builder(ctx)&#10;                .setTitle(&quot;Details&quot;)&#10;                .setMessage(if (message.isNotEmpty()) message else &quot;No additional details&quot;)&#10;                .setPositiveButton(&quot;Close&quot;, null)&#10;                .show()&#10;        }&#10;&#10;        // Make the 'More' label trigger the same popup for discoverability&#10;        holder.btnMoreLabel.setOnClickListener {&#10;            holder.btnMore.performClick()&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = requests.size&#10;&#10;    fun updateRequests(newRequests: List&lt;Request&gt;) {&#10;        requests = newRequests&#10;        notifyDataSetChanged()&#10;    }&#10;    &#10;    private fun getStatusText(statusId: Int): String {&#10;        return when (statusId) {&#10;            1 -&gt; &quot;Subject for approval&quot;&#10;            2 -&gt; &quot;Delivery boy pickup&quot;&#10;            3 -&gt; &quot;Waiting for customer drop off&quot;&#10;            4 -&gt; &quot;In queue&quot;&#10;            5 -&gt; &quot;Processing&quot;&#10;            6 -&gt; &quot;Rider out for delivery&quot;&#10;            7 -&gt; &quot;Waiting for customer to claim&quot;&#10;            8 -&gt; &quot;Completed&quot;&#10;            9 -&gt; &quot;Rejected&quot;&#10;            10 -&gt; &quot;Request Accepted&quot;&#10;            11 -&gt; &quot;Partially Accepted&quot;&#10;            else -&gt; &quot;Unknown status&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/data/models/Request.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/data/models/Request.kt" />
              <option name="originalContent" value="package com.example.capstone2.data.models&#10;&#10;import android.os.Parcelable&#10;import kotlinx.parcelize.Parcelize&#10;&#10;@Parcelize&#10;data class Request(&#10;    val requestID: Long,&#10;    val ownerID: Long,&#10;    val customerID: Long,&#10;    val customerName: String,&#10;    val serviceID: Long,&#10;    val serviceName: String,&#10;    val courierID: Long,&#10;    val statusID: Int,&#10;    val pickupDate: String?,&#10;    val paymentMethod: String,&#10;    val deliveryDate: String?,&#10;    val sackQuantity: Int,&#10;    val comment: String?,&#10;    val dateUpdated: String?,&#10;    val schedule: String?,&#10;    val submittedAt: String?,&#10;    val pickupLocation: String?,&#10;    val deliveryLocation: String?,&#10;    // optional fields returned by API when available&#10;    val feedsConversion: Boolean? = null,&#10;    val millingType: String? = null&#10;) : Parcelable&#10;" />
              <option name="updatedContent" value="package com.example.capstone2.data.models&#10;&#10;import android.os.Parcelable&#10;import kotlinx.parcelize.Parcelize&#10;&#10;@Parcelize&#10;data class Request(&#10;    val requestID: Long,&#10;    val ownerID: Long,&#10;    val customerID: Long,&#10;    val customerName: String,&#10;    val serviceID: Long,&#10;    val serviceName: String,&#10;    val courierID: Long,&#10;    val statusID: Int,&#10;    val pickupDate: String?,&#10;    val paymentMethod: String,&#10;    val deliveryDate: String?,&#10;    val sackQuantity: Int,&#10;    val comment: String?,&#10;    val dateUpdated: String?,&#10;    val schedule: String?,&#10;    val submittedAt: String?,&#10;    val pickupLocation: String?,&#10;    val deliveryLocation: String?,&#10;    // optional fields returned by API when available&#10;    val feedsConversion: Boolean? = null,&#10;    val millingType: String? = null,&#10;    // optional contact number for customer (may not be provided by server)&#10;    val contactNumber: String? = null&#10;) : Parcelable" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_circle_icon.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_circle_icon.xml" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;#F2F2F2&quot; /&gt;&#10;    &lt;size android:width=&quot;44dp&quot; android:height=&quot;44dp&quot; /&gt;&#10;    &lt;stroke android:width=&quot;1dp&quot; android:color=&quot;#E0E0E0&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_more_vert.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_more_vert.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF666666&quot;&#10;        android:pathData=&quot;M12,8a2,2 0,1 1 0,-4a2,2 0,0 1 0,4zm0,2a2,2 0,1 1 0,4a2,2 0,0 1 0,-4zm0,6a2,2 0,1 1 0,4a2,2 0,0 1 0,-4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_track.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_track.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;12dp&quot;&#10;    android:elevation=&quot;4dp&quot;&#10;    android:padding=&quot;12dp&quot;&#10;    android:radius=&quot;10dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:descendantFocusability=&quot;afterDescendants&quot;&#10;        android:paddingStart=&quot;4dp&quot;&#10;        android:paddingEnd=&quot;4dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvCustomerName&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/label_customer&quot;&#10;            android:paddingTop=&quot;6dp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginBottom=&quot;6dp&quot;&#10;            android:ellipsize=&quot;end&quot;&#10;            android:maxLines=&quot;1&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSackQty&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/label_sacks&quot;&#10;            android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvServices&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/label_services&quot;&#10;            android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSchedule&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/label_schedule_owner&quot;&#10;            android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvPickupLocation&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/label_pickup_location&quot;&#10;            android:visibility=&quot;visible&quot;&#10;            android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvDeliveryLocation&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/label_delivery_location&quot;&#10;            android:visibility=&quot;visible&quot;&#10;            android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;!-- Current Status TextView and More button aligned to the right --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:layout_marginTop=&quot;6dp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvCurrentStatus&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;@string/label_status&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#3F51B5&quot;&#10;                android:gravity=&quot;start&quot;&#10;                android:padding=&quot;2dp&quot; /&gt;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;            &lt;!-- Use an ImageButton with a visible three-dot icon to make the More action clear --&gt;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMore&quot;&#10;                android:layout_width=&quot;44dp&quot;&#10;                android:layout_height=&quot;44dp&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:contentDescription=&quot;More&quot;&#10;                android:src=&quot;@drawable/ic_more_vert&quot;&#10;                android:background=&quot;@drawable/bg_circle_icon&quot;&#10;                android:foreground=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:tint=&quot;#333333&quot;&#10;                android:scaleType=&quot;centerInside&quot;&#10;                android:padding=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;@string/label_status&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#3F51B5&quot;&#10;                android:gravity=&quot;start&quot;&#10;                android:padding=&quot;2dp&quot; /&gt;&#10;&#10;            &lt;!-- Use an ImageButton with a visible three-dot icon to make the More action clear --&gt;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMore&quot;&#10;                android:layout_width=&quot;44dp&quot;&#10;                android:layout_height=&quot;44dp&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:contentDescription=&quot;More&quot;&#10;                android:src=&quot;@drawable/ic_more_vert&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:tint=&quot;#666666&quot;&#10;                android:scaleType=&quot;centerInside&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Divider below current status --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;1dp&quot;&#10;            android:background=&quot;#DDDDDD&quot;&#10;            android:layout_marginBottom=&quot;10dp&quot; /&gt;&#10;&#10;        &lt;RadioGroup&#10;            android:id=&quot;@+id/rgStatusOptions&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:focusable=&quot;true&quot;&#10;            android:focusableInTouchMode=&quot;true&quot;&#10;            android:paddingStart=&quot;4dp&quot;&#10;            android:paddingEnd=&quot;4dp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt; &lt;!-- ensure group can handle focus in touch mode --&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rbDpickup&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/rb_delivery_boy_pickup&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;@android:color/black&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rbCDropoff&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/rb_waiting_customer_dropoff&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;@android:color/black&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rbPending&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/rb_pending&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;@android:color/black&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rbProcessing&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/rb_processing&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;@android:color/black&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rbOutForDelivery&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/rb_out_for_delivery&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;@android:color/black&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rbCPickup&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/rb_waiting_customer_pickup&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;@android:color/black&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;        &lt;/RadioGroup&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnSubmit&quot;&#10;            android:layout_gravity=&quot;end&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/submit&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;12dp&quot;&#10;    android:elevation=&quot;4dp&quot;&#10;    android:padding=&quot;12dp&quot;&#10;    android:radius=&quot;10dp&quot;&gt;&#10;&#10;    &lt;!-- Use a FrameLayout so we can overlay the More button pinned to the top-end --&gt;&#10;    &lt;FrameLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;!-- Main vertical content (unchanged, except removing inline More controls) --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:descendantFocusability=&quot;afterDescendants&quot;&#10;            android:paddingStart=&quot;4dp&quot;&#10;            android:paddingEnd=&quot;4dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvCustomerName&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_customer&quot;&#10;                android:paddingTop=&quot;6dp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot;&#10;                android:ellipsize=&quot;end&quot;&#10;                android:maxLines=&quot;1&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvSackQty&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_sacks&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvServices&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_services&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvSchedule&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_schedule_owner&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPickupLocation&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_pickup_location&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDeliveryLocation&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_delivery_location&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;!-- Current Status (full-width, but single line to avoid pushing overlay) --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvCurrentStatus&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_status&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#3F51B5&quot;&#10;                android:gravity=&quot;start&quot;&#10;                android:padding=&quot;2dp&quot;&#10;                android:maxLines=&quot;1&quot;&#10;                android:ellipsize=&quot;end&quot;&#10;                android:layout_marginTop=&quot;6dp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;!-- Divider below current status --&gt;&#10;            &lt;View&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;1dp&quot;&#10;                android:background=&quot;#DDDDDD&quot;&#10;                android:layout_marginBottom=&quot;10dp&quot; /&gt;&#10;&#10;            &lt;RadioGroup&#10;                android:id=&quot;@+id/rgStatusOptions&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:focusableInTouchMode=&quot;true&quot;&#10;                android:paddingStart=&quot;4dp&quot;&#10;                android:paddingEnd=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt; &lt;!-- ensure group can handle focus in touch mode --&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbDpickup&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_delivery_boy_pickup&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbCDropoff&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_waiting_customer_dropoff&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbPending&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_pending&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbProcessing&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_processing&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbOutForDelivery&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_out_for_delivery&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbCPickup&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_waiting_customer_pickup&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;            &lt;/RadioGroup&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnSubmit&quot;&#10;                android:layout_gravity=&quot;end&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/submit&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Overlay pinned to top-end so More control is always visible --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_gravity=&quot;end|top&quot;&#10;            android:layout_marginTop=&quot;6dp&quot;&#10;            android:layout_marginEnd=&quot;6dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMore&quot;&#10;                android:layout_width=&quot;44dp&quot;&#10;                android:layout_height=&quot;44dp&quot;&#10;                android:contentDescription=&quot;More&quot;&#10;                android:src=&quot;@drawable/ic_more_vert&quot;&#10;                android:background=&quot;@drawable/bg_circle_icon&quot;&#10;                android:foreground=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:tint=&quot;#333333&quot;&#10;                android:scaleType=&quot;centerInside&quot;&#10;                android:padding=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/btnMoreLabel&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;More&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textColor=&quot;#333333&quot;&#10;                android:layout_marginStart=&quot;6dp&quot;&#10;                android:paddingStart=&quot;4dp&quot;&#10;                android:paddingEnd=&quot;4dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/FrameLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/tools/check_xml_parse.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/tools/check_xml_parse.py" />
              <option name="updatedContent" value="import os&#10;import xml.etree.ElementTree as ET&#10;&#10;root = os.path.join(os.path.dirname(__file__), '..', 'src', 'main', 'res')&#10;root = os.path.normpath(root)&#10;print('Scanning res directory:', root)&#10;errors = 0&#10;for dirpath, dirs, files in os.walk(root):&#10;    for f in files:&#10;        if f.lower().endswith('.xml'):&#10;            p = os.path.join(dirpath, f)&#10;            try:&#10;                ET.parse(p)&#10;            except Exception as e:&#10;                print('PARSE ERROR:', p)&#10;                print('  ', repr(e))&#10;                errors += 1&#10;&#10;if errors == 0:&#10;    print('All XML files parsed OK')&#10;else:&#10;    print('Found', errors, 'XML parse errors')&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>