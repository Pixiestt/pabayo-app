<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/adapter/ChatAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/adapter/ChatAdapter.kt" />
              <option name="originalContent" value="// new file&#10;package com.example.capstone2.adapter&#10;&#10;import android.graphics.Color&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.core.graphics.toColorInt&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.ListAdapter&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.capstone2.R&#10;import com.example.capstone2.data.models.Message&#10;&#10;private const val VIEW_TYPE_SENT = 1&#10;private const val VIEW_TYPE_RECEIVED = 2&#10;&#10;class ChatAdapter(private val currentUserId: Long) : ListAdapter&lt;Message, RecyclerView.ViewHolder&gt;(DiffCallback()) {&#10;&#10;    override fun getItemViewType(position: Int): Int {&#10;        val msg = getItem(position)&#10;        return if (msg.senderID == currentUserId) VIEW_TYPE_SENT else VIEW_TYPE_RECEIVED&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {&#10;        val inflater = LayoutInflater.from(parent.context)&#10;        return if (viewType == VIEW_TYPE_SENT) {&#10;            val v = inflater.inflate(R.layout.item_message_sent, parent, false)&#10;            SentViewHolder(v)&#10;        } else {&#10;            val v = inflater.inflate(R.layout.item_message_received, parent, false)&#10;            ReceivedViewHolder(v)&#10;        }&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {&#10;        val msg = getItem(position)&#10;        if (holder is SentViewHolder) holder.bind(msg, currentUserId)&#10;        if (holder is ReceivedViewHolder) holder.bind(msg, currentUserId)&#10;    }&#10;&#10;    class SentViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val bubble: View? = itemView.findViewById(R.id.messageBubbleSent)&#10;        private val tvSenderName: TextView? = itemView.findViewById(R.id.tvSenderNameSent)&#10;        private val tvMessage: TextView? = itemView.findViewById(R.id.tvMessageSent)&#10;        private val tvTime: TextView? = itemView.findViewById(R.id.tvTimeSent)&#10;&#10;        fun bind(m: Message, currentUserId: Long) {&#10;            // Determine display name&#10;            val name = m.senderName ?: if (m.senderID == currentUserId) &quot;You&quot; else &quot;User ${m.senderID}&quot;&#10;            tvSenderName?.text = name&#10;&#10;            // Message text and time&#10;            tvMessage?.visibility = View.VISIBLE&#10;            tvMessage?.text = m.message&#10;            tvTime?.text = m.timestamp ?: &quot;&quot;&#10;&#10;            // Style sent bubble (prefer drawable but fallback to color)&#10;            try {&#10;                bubble?.setBackgroundResource(R.drawable.bg_message_sent)&#10;            } catch (_: Exception) {&#10;                bubble?.setBackgroundColor(&quot;#DFF0D8&quot;.toColorInt()) // light green fallback&#10;            }&#10;&#10;            // Colors&#10;            tvMessage?.setTextColor(Color.BLACK)&#10;            tvSenderName?.setTextColor(Color.BLACK)&#10;            tvTime?.setTextColor(&quot;#666666&quot;.toColorInt())&#10;        }&#10;    }&#10;&#10;    class ReceivedViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val bubble: View? = itemView.findViewById(R.id.messageBubbleReceived)&#10;        private val tvSenderName: TextView? = itemView.findViewById(R.id.tvSenderNameReceived)&#10;        private val tvMessage: TextView? = itemView.findViewById(R.id.tvMessageReceived)&#10;        private val tvTime: TextView? = itemView.findViewById(R.id.tvTimeReceived)&#10;&#10;        fun bind(m: Message, currentUserId: Long) {&#10;            // Determine display name&#10;            val name = m.senderName ?: m.receiverName ?: if (m.senderID == currentUserId) &quot;You&quot; else &quot;User ${m.senderID}&quot;&#10;            tvSenderName?.text = name&#10;&#10;            // Message text and time&#10;            tvMessage?.visibility = View.VISIBLE&#10;            tvMessage?.text = m.message&#10;            tvTime?.text = m.timestamp ?: &quot;&quot;&#10;&#10;            // Choose a received bubble variant deterministically&#10;            try {&#10;                val key = m.id?.hashCode() ?: (m.message + &quot;:&quot; + m.senderID).hashCode()&#10;                val variants = listOf(&#10;                    R.drawable.bg_message_received_variant_1,&#10;                    R.drawable.bg_message_received_variant_2,&#10;                    R.drawable.bg_message_received_variant_3&#10;                )&#10;                val idx = kotlin.math.abs(key) % variants.size&#10;                bubble?.setBackgroundResource(variants[idx])&#10;            } catch (_: Exception) {&#10;                // fallback to white background if drawables are missing&#10;                bubble?.setBackgroundColor(Color.WHITE)&#10;            }&#10;&#10;            // Colors for received messages&#10;            tvMessage?.setTextColor(Color.BLACK)&#10;            tvSenderName?.setTextColor(&quot;#333333&quot;.toColorInt())&#10;            tvTime?.setTextColor(&quot;#666666&quot;.toColorInt())&#10;        }&#10;    }&#10;&#10;    class DiffCallback : DiffUtil.ItemCallback&lt;Message&gt;() {&#10;        override fun areItemsTheSame(oldItem: Message, newItem: Message): Boolean {&#10;            // Prefer server-assigned id when available&#10;            val oldId = oldItem.id&#10;            val newId = newItem.id&#10;            if (oldId != null &amp;&amp; newId != null) return oldId == newId&#10;            // Fallback: use a composite of senderID + timestamp + message content&#10;            val oldKey = &quot;${oldItem.senderID}:${oldItem.timestamp ?: &quot;&quot;}:${oldItem.message}&quot;&#10;            val newKey = &quot;${newItem.senderID}:${newItem.timestamp ?: &quot;&quot;}:${newItem.message}&quot;&#10;            return oldKey == newKey&#10;        }&#10;&#10;        override fun areContentsTheSame(oldItem: Message, newItem: Message): Boolean {&#10;            return oldItem == newItem&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// new file&#10;package com.example.capstone2.adapter&#10;&#10;import android.graphics.Color&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.core.graphics.toColorInt&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.ListAdapter&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.capstone2.R&#10;import com.example.capstone2.data.models.Message&#10;&#10;private const val VIEW_TYPE_SENT = 1&#10;private const val VIEW_TYPE_RECEIVED = 2&#10;&#10;class ChatAdapter(private val currentUserId: Long) : ListAdapter&lt;Message, RecyclerView.ViewHolder&gt;(DiffCallback()) {&#10;&#10;    override fun getItemViewType(position: Int): Int {&#10;        val msg = getItem(position)&#10;        return if (msg.senderID == currentUserId) VIEW_TYPE_SENT else VIEW_TYPE_RECEIVED&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {&#10;        val inflater = LayoutInflater.from(parent.context)&#10;        return if (viewType == VIEW_TYPE_SENT) {&#10;            val v = inflater.inflate(R.layout.item_message_sent, parent, false)&#10;            SentViewHolder(v)&#10;        } else {&#10;            val v = inflater.inflate(R.layout.item_message_received, parent, false)&#10;            ReceivedViewHolder(v)&#10;        }&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {&#10;        val msg = getItem(position)&#10;        if (holder is SentViewHolder) holder.bind(msg, currentUserId)&#10;        if (holder is ReceivedViewHolder) holder.bind(msg, currentUserId)&#10;    }&#10;&#10;    class SentViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val bubble: View? = itemView.findViewById(R.id.messageBubbleSent)&#10;        private val tvMessage: TextView? = itemView.findViewById(R.id.tvMessageSent)&#10;        private val tvTime: TextView? = itemView.findViewById(R.id.tvTimeSent)&#10;&#10;        fun bind(m: Message, currentUserId: Long) {&#10;            // Message text and time&#10;            tvMessage?.visibility = View.VISIBLE&#10;            tvMessage?.text = m.message&#10;            tvTime?.text = m.timestamp ?: &quot;&quot;&#10;&#10;            // Style sent bubble (prefer drawable but fallback to color)&#10;            try {&#10;                bubble?.setBackgroundResource(R.drawable.bg_message_sent)&#10;            } catch (_: Exception) {&#10;                bubble?.setBackgroundColor(&quot;#DFF0D8&quot;.toColorInt()) // light green fallback&#10;            }&#10;&#10;            // Colors&#10;            tvMessage?.setTextColor(Color.BLACK)&#10;            tvTime?.setTextColor(&quot;#666666&quot;.toColorInt())&#10;        }&#10;    }&#10;&#10;    class ReceivedViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val bubble: View? = itemView.findViewById(R.id.messageBubbleReceived)&#10;        private val tvMessage: TextView? = itemView.findViewById(R.id.tvMessageReceived)&#10;        private val tvTime: TextView? = itemView.findViewById(R.id.tvTimeReceived)&#10;&#10;        fun bind(m: Message, currentUserId: Long) {&#10;            // Message text and time&#10;            tvMessage?.visibility = View.VISIBLE&#10;            tvMessage?.text = m.message&#10;            tvTime?.text = m.timestamp ?: &quot;&quot;&#10;&#10;            // Use a single white bubble for received messages&#10;            try {&#10;                bubble?.setBackgroundResource(R.drawable.bg_message_received)&#10;            } catch (_: Exception) {&#10;                bubble?.setBackgroundColor(Color.WHITE)&#10;            }&#10;&#10;            // Colors for received messages&#10;            tvMessage?.setTextColor(Color.BLACK)&#10;            tvTime?.setTextColor(&quot;#666666&quot;.toColorInt())&#10;        }&#10;    }&#10;&#10;    class DiffCallback : DiffUtil.ItemCallback&lt;Message&gt;() {&#10;        override fun areItemsTheSame(oldItem: Message, newItem: Message): Boolean {&#10;            // Prefer server-assigned id when available&#10;            val oldId = oldItem.id&#10;            val newId = newItem.id&#10;            if (oldId != null &amp;&amp; newId != null) return oldId == newId&#10;            // Fallback: use a composite of senderID + timestamp + message content&#10;            val oldKey = &quot;${oldItem.senderID}:${oldItem.timestamp ?: &quot;&quot;}:${oldItem.message}&quot;&#10;            val newKey = &quot;${newItem.senderID}:${newItem.timestamp ?: &quot;&quot;}:${newItem.message}&quot;&#10;            return oldKey == newKey&#10;        }&#10;&#10;        override fun areContentsTheSame(oldItem: Message, newItem: Message): Boolean {&#10;            return oldItem == newItem&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_messages.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_messages.xml" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvConversations&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvEmpty&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:text=&quot;No conversations&quot;&#10;        android:visibility=&quot;gone&quot;/&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_message_received.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_message_received.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:gravity=&quot;start&quot;&#10;    android:padding=&quot;4dp&quot;&gt;&#10;&#10;    &lt;!-- Left column reserved for sender name / avatar, reduced width to avoid overlap --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:gravity=&quot;top|start&quot;&#10;        android:layout_marginEnd=&quot;8dp&quot;&gt;&#10;&#10;        &lt;!-- Sender name for received messages --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSenderNameReceived&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#333333&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:paddingStart=&quot;4dp&quot;&#10;            android:paddingEnd=&quot;4dp&quot;&#10;            android:visibility=&quot;visible&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Bubble column (message) --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/messageBubbleReceived&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;8dp&quot;&#10;        android:layout_marginEnd=&quot;72dp&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:background=&quot;@drawable/bg_message_received&quot;&#10;        android:maxWidth=&quot;280dp&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvMessageReceived&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#000000&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvTimeReceived&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#666666&quot;&#10;            android:textSize=&quot;11sp&quot;&#10;            android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:gravity=&quot;start&quot;&#10;    android:padding=&quot;4dp&quot;&gt;&#10;&#10;    &lt;!-- Left placeholder to keep received bubbles away from the edge and avoid overlapping title --&gt;&#10;    &lt;View&#10;        android:id=&quot;@+id/leftPlaceholderReceived&quot;&#10;        android:layout_width=&quot;@dimen/received_left_placeholder_width&quot;&#10;        android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;    &lt;!-- Bubble column (message) --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/messageBubbleReceived&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;@dimen/received_bubble_margin_start&quot;&#10;        android:layout_marginEnd=&quot;80dp&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:background=&quot;@drawable/bg_message_received&quot;&#10;        android:maxWidth=&quot;280dp&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvMessageReceived&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#000000&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvTimeReceived&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textColor=&quot;#666666&quot;&#10;            android:textSize=&quot;11sp&quot;&#10;            android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/dimens.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/dimens.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Left placeholder width for received messages (adjust this to move the received bubble horizontally) --&gt;&#10;    &lt;dimen name=&quot;received_left_placeholder_width&quot;&gt;120dp&lt;/dimen&gt;&#10;    &lt;!-- Start margin for the received bubble (additional nudge from the placeholder) --&gt;&#10;    &lt;dimen name=&quot;received_bubble_margin_start&quot;&gt;16dp&lt;/dimen&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>