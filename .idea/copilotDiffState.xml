<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/adapter/TrackAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/adapter/TrackAdapter.kt" />
              <option name="originalContent" value="package com.example.capstone2.adapter&#10;&#10;import android.content.Intent&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.*&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.capstone2.R&#10;import com.example.capstone2.user.ViewUserProfileActivity&#10;import com.example.capstone2.data.models.Request&#10;import com.example.capstone2.repository.SharedPrefManager&#10;&#10;class TrackAdapter(&#10;    private var requests: List&lt;Request&gt;,&#10;    private val onButtonClick: (Request, Int) -&gt; Unit,&#10;    /**&#10;     * Callback to fetch a contact number for a given customerId. Should invoke onResult&#10;     * on the main thread with the resulting contact string (e.g. actual number or &quot;Not available&quot;).&#10;     */&#10;    private val fetchContact: (customerId: Long, onResult: (String) -&gt; Unit) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;TrackAdapter.TrackViewHolder&gt;() {&#10;&#10;    inner class TrackViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val customerName: TextView = itemView.findViewById(R.id.tvCustomerName)&#10;        val tvSackQty: TextView = itemView.findViewById(R.id.tvSackQty)&#10;        val tvServices: TextView = itemView.findViewById(R.id.tvServices)&#10;        val tvSchedule: TextView = itemView.findViewById(R.id.tvSchedule)&#10;        val tvPickupLocation: TextView = itemView.findViewById(R.id.tvPickupLocation)&#10;        val tvDeliveryLocation: TextView = itemView.findViewById(R.id.tvDeliveryLocation)&#10;        val tvCurrentStatus: TextView = itemView.findViewById(R.id.tvCurrentStatus)&#10;        val tvService: TextView? = itemView.findViewById(R.id.tvService)&#10;        val tvPickupPreparingMessage: TextView? = itemView.findViewById(R.id.tvPickupPreparingMessage)&#10;&#10;        val rgStatusOptions: RadioGroup = itemView.findViewById(R.id.rgStatusOptions)&#10;        val rbDpickup: RadioButton = itemView.findViewById(R.id.rbDpickup)&#10;        val rbCDropoff: RadioButton = itemView.findViewById(R.id.rbCDropoff)&#10;        val rbPending: RadioButton = itemView.findViewById(R.id.rbPending)&#10;        val rbProcessing: RadioButton = itemView.findViewById(R.id.rbProcessing)&#10;        val rbOutForDelivery: RadioButton = itemView.findViewById(R.id.rbOutForDelivery)&#10;        val rbCPickup: RadioButton = itemView.findViewById(R.id.rbCPickup)&#10;        val rbMillingDone: RadioButton = itemView.findViewById(R.id.rbMillingDone)&#10;        val rbDelivered: RadioButton = itemView.findViewById(R.id.rbDelivered)&#10;&#10;        val btnSubmit = itemView.findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;        val btnMore = itemView.findViewById&lt;ImageButton&gt;(R.id.btnMore)&#10;        val btnRowMessage: Button? = itemView.findViewById(R.id.btnRowMessage)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TrackViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_track, parent, false)&#10;        return TrackViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: TrackViewHolder, position: Int) {&#10;        val req = requests[position]&#10;        val ctx = holder.itemView.context&#10;&#10;        holder.customerName.text = req.customerName&#10;        holder.tvSackQty.text = ctx.getString(R.string.sacks_format, req.sackQuantity)&#10;        holder.tvServices.text = ctx.getString(R.string.services_format, req.serviceName)&#10;        holder.tvSchedule.text = ctx.getString(&#10;            R.string.schedule_format_owner,&#10;            req.schedule ?: ctx.getString(R.string.not_set)&#10;        )&#10;        // populate optional service label if present&#10;        holder.tvService?.text = ctx.getString(R.string.service_format, req.serviceName)&#10;&#10;        // Hide locations in item row (shown in More dialog)&#10;        holder.tvPickupLocation.visibility = View.GONE&#10;        holder.tvDeliveryLocation.visibility = View.GONE&#10;&#10;        // Current status text and color&#10;        val currentStatusInt = try { req.statusID.toInt() } catch (_: Exception) { 0 }&#10;        val currentStatusText = getStatusText(currentStatusInt)&#10;        holder.tvCurrentStatus.text = ctx.getString(R.string.status_format, currentStatusText)&#10;&#10;        val statusColor = when (currentStatusInt) {&#10;            10 -&gt; &quot;#4CAF50&quot;&#10;            2, 3 -&gt; &quot;#FF9800&quot;&#10;            4 -&gt; &quot;#2196F3&quot;&#10;            5 -&gt; &quot;#9C27B0&quot;&#10;            6, 7 -&gt; &quot;#FF5722&quot;&#10;            12 -&gt; &quot;#2E7D32&quot;&#10;            else -&gt; &quot;#3F51B5&quot;&#10;        }&#10;        try {&#10;            holder.tvCurrentStatus.setTextColor(android.graphics.Color.parseColor(statusColor))&#10;        } catch (_: Exception) { /* ignore color parse issues */ }&#10;&#10;        // All radio buttons list&#10;        val allRadioButtons = listOf(&#10;            holder.rbDpickup, holder.rbCDropoff, holder.rbPending, holder.rbProcessing,&#10;            holder.rbOutForDelivery, holder.rbCPickup, holder.rbMillingDone, holder.rbDelivered&#10;        )&#10;&#10;        // Reset UI state&#10;        allRadioButtons.forEach { rb -&gt;&#10;            rb.visibility = View.GONE&#10;            rb.isChecked = false&#10;            rb.isEnabled = true&#10;            rb.isClickable = true&#10;            rb.setOnClickListener(null)&#10;        }&#10;        holder.rgStatusOptions.setOnCheckedChangeListener(null)&#10;        holder.rgStatusOptions.clearCheck()&#10;        holder.rgStatusOptions.visibility = View.GONE&#10;        holder.rgStatusOptions.isEnabled = false&#10;        holder.btnSubmit.visibility = View.GONE&#10;        holder.btnSubmit.isEnabled = false&#10;        holder.btnSubmit.setOnClickListener(null)&#10;        holder.btnRowMessage?.visibility = View.GONE&#10;        holder.btnRowMessage?.setOnClickListener(null)&#10;&#10;        val currentStatus = currentStatusInt&#10;&#10;        val includesPickup = req.serviceID in listOf(1L, 2L, 5L, 6L)&#10;        val includesDelivery = req.serviceID in listOf(1L, 3L, 5L, 7L)&#10;        val terminalStatuses = setOf(8, 9, 12, 13)&#10;&#10;        // Compute next status strictly following owner-side rules&#10;        val nextStatus: Int? = when {&#10;            currentStatus in terminalStatuses -&gt; null&#10;            includesPickup -&gt; when (currentStatus) {&#10;                10 -&gt; null&#10;                4 -&gt; 5&#10;                5 -&gt; 12&#10;                else -&gt; null&#10;            }&#10;            else -&gt; when (currentStatus) {&#10;                10 -&gt; 3&#10;                3 -&gt; 4&#10;                4 -&gt; 5&#10;                5 -&gt; 12&#10;                else -&gt; null&#10;            }&#10;        }&#10;&#10;        // Show or hide pickup preparing message&#10;        holder.tvPickupPreparingMessage?.visibility = if (includesPickup &amp;&amp; currentStatus == 10 &amp;&amp; nextStatus == null) View.VISIBLE else View.GONE&#10;&#10;        val statusToRadioMap = mapOf(&#10;            3 to holder.rbCDropoff,&#10;            4 to holder.rbPending,&#10;            5 to holder.rbProcessing,&#10;            12 to holder.rbMillingDone&#10;        )&#10;&#10;        if (nextStatus != null) {&#10;            val nextRadio = statusToRadioMap[nextStatus]&#10;            nextRadio?.let { rb -&gt;&#10;                rb.visibility = View.VISIBLE&#10;                rb.isChecked = false&#10;                rb.isEnabled = true&#10;&#10;                holder.rgStatusOptions.visibility = View.VISIBLE&#10;                holder.rgStatusOptions.isEnabled = true&#10;                holder.btnSubmit.visibility = View.VISIBLE&#10;                holder.btnSubmit.isEnabled = false&#10;&#10;                rb.setOnClickListener { view -&gt;&#10;                    if (view is RadioButton) {&#10;                        view.isChecked = true&#10;                        holder.rgStatusOptions.check(view.id)&#10;                        holder.btnSubmit.isEnabled = true&#10;                        Log.d(&quot;TrackAdapter&quot;, &quot;Radio clicked for request=${req.requestID}, radioId=${view.id}&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            holder.rgStatusOptions.setOnCheckedChangeListener { _, checkedId -&gt;&#10;                holder.btnSubmit.isEnabled = checkedId != -1&#10;            }&#10;&#10;            val radioIdToStatus = mapOf(&#10;                holder.rbCDropoff.id to 3,&#10;                holder.rbPending.id to 4,&#10;                holder.rbProcessing.id to 5,&#10;                holder.rbMillingDone.id to 12&#10;            )&#10;&#10;            holder.btnSubmit.setOnClickListener {&#10;                val checkedId = holder.rgStatusOptions.checkedRadioButtonId&#10;                val selectedStatus = radioIdToStatus[checkedId] ?: nextStatus&#10;                if (selectedStatus != null) {&#10;                    onButtonClick(req, selectedStatus)&#10;                } else {&#10;                    Toast.makeText(holder.itemView.context, R.string.submit, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Row-level Message button: show only when Milling done&#10;        if (currentStatus == 12) {&#10;            holder.btnRowMessage?.visibility = View.VISIBLE&#10;            holder.btnRowMessage?.setOnClickListener {&#10;                val context = holder.itemView.context&#10;                val myId = SharedPrefManager.getUserId(context)&#10;                val otherId = when {&#10;                    myId == null -&gt; req.customerID&#10;                    myId == req.ownerID -&gt; req.customerID&#10;                    else -&gt; req.customerID&#10;                }&#10;                val otherName = req.customerName&#10;                val activity = context as? androidx.fragment.app.FragmentActivity&#10;                if (activity != null) {&#10;                    try {&#10;                        val chatFrag = com.example.capstone2.customer.ChatFragment.newInstance(otherId, null, otherName)&#10;                        activity.supportFragmentManager.beginTransaction()&#10;                            .replace(R.id.flFragment, chatFrag)&#10;                            .addToBackStack(null)&#10;                            .commit()&#10;                    } catch (e: Exception) {&#10;                        Toast.makeText(context, &quot;Unable to open chat: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                } else {&#10;                    Toast.makeText(context, &quot;Cannot open chat from this context&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;&#10;        // More button shows details dialog and fetches contact&#10;        holder.btnMore.setOnClickListener {&#10;            val detailsBuilder = StringBuilder()&#10;&#10;            if (!req.pickupLocation.isNullOrEmpty()) {&#10;                detailsBuilder.append(&quot;Pickup location: ${req.pickupLocation}\n&quot;)&#10;            } else if (includesPickup) {&#10;                detailsBuilder.append(&quot;Pickup location: Not set\n&quot;)&#10;            }&#10;&#10;            if (!req.deliveryLocation.isNullOrEmpty()) {&#10;                detailsBuilder.append(&quot;Delivery location: ${req.deliveryLocation}\n&quot;)&#10;            } else if (includesDelivery) {&#10;                detailsBuilder.append(&quot;Delivery location: Not set\n&quot;)&#10;            }&#10;&#10;            detailsBuilder.append(&quot;Comment: ${if (!req.comment.isNullOrEmpty()) req.comment else &quot;None&quot;}\n&quot;)&#10;&#10;            // Create a custom dialog from layout so we can show contact and action buttons&#10;            val dialog = android.app.Dialog(ctx)&#10;            val dlgView = LayoutInflater.from(ctx).inflate(R.layout.dialog_request_details, null, false)&#10;            dialog.setContentView(dlgView)&#10;            dialog.window?.setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT)&#10;&#10;            // Find dialog views&#10;            val tvDetailCustomerName: TextView = dlgView.findViewById(R.id.tvDetailCustomerName)&#10;            val tvDetailSackQty: TextView = dlgView.findViewById(R.id.tvDetailSackQty)&#10;            val tvDetailServices: TextView = dlgView.findViewById(R.id.tvDetailServices)&#10;            val tvDetailSchedule: TextView = dlgView.findViewById(R.id.tvDetailSchedule)&#10;            val tvDetailComment: TextView = dlgView.findViewById(R.id.tvDetailComment)&#10;            val tvDetailSubmittedAt: TextView = dlgView.findViewById(R.id.tvDetailSubmittedAt)&#10;            val tvDetailContact: TextView = dlgView.findViewById(R.id.tvDetailContact)&#10;            val btnMsg: Button = dlgView.findViewById(R.id.btnMessage)&#10;            val btnViewProfile: Button = dlgView.findViewById(R.id.btnViewProfile)&#10;            val btnClose: Button = dlgView.findViewById(R.id.btnClose)&#10;            val tvDetailProgressLabel: TextView? = dlgView.findViewById(R.id.tvDetailProgressLabel)&#10;            val progressBarRequest: ProgressBar? = dlgView.findViewById(R.id.progressBarRequest)&#10;            tvDetailProgressLabel?.visibility = View.GONE&#10;            progressBarRequest?.visibility = View.GONE&#10;&#10;            // Populate basic fields&#10;            tvDetailCustomerName.text = ctx.getString(R.string.customer_format, req.customerName)&#10;            tvDetailSackQty.text = ctx.getString(R.string.sacks_format, req.sackQuantity)&#10;            tvDetailServices.text = ctx.getString(R.string.services_format, req.serviceName)&#10;            tvDetailSchedule.text = ctx.getString(R.string.schedule_format_owner, req.schedule ?: ctx.getString(R.string.not_set))&#10;            tvDetailComment.text = ctx.getString(R.string.comment_format, req.comment ?: &quot;None&quot;)&#10;            tvDetailSubmittedAt.text = ctx.getString(R.string.submitted_at_format, req.submittedAt ?: &quot;Unknown&quot;)&#10;&#10;            // Initially show either the static contact if present or a loading state and fetch&#10;            if (!req.contactNumber.isNullOrBlank()) {&#10;                tvDetailContact.visibility = View.VISIBLE&#10;                tvDetailContact.text = ctx.getString(R.string.contact_number_format, req.contactNumber)&#10;            } else {&#10;                tvDetailContact.visibility = View.VISIBLE&#10;                tvDetailContact.text = ctx.getString(R.string.contact_number_format, ctx.getString(R.string.contact_number_loading))&#10;                fetchContact(req.customerID) { finalContact -&gt;&#10;                    (ctx as? android.app.Activity)?.runOnUiThread {&#10;                        tvDetailContact.text = ctx.getString(R.string.contact_number_format, finalContact)&#10;                    } ?: run {&#10;                        tvDetailContact.text = ctx.getString(R.string.contact_number_format, finalContact)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Wire View profile button&#10;            btnViewProfile.visibility = View.VISIBLE&#10;            btnViewProfile.setOnClickListener {&#10;                try {&#10;                    val intent = Intent(ctx, ViewUserProfileActivity::class.java)&#10;                    intent.putExtra(&quot;userId&quot;, req.customerID)&#10;                    ctx.startActivity(intent)&#10;                } catch (_: Exception) { /* ignore */ }&#10;            }&#10;&#10;            // Close button&#10;            btnClose.setOnClickListener { dialog.dismiss() }&#10;&#10;            // Show Message button in dialog only when Milling done&#10;            if (currentStatus == 12) {&#10;                btnMsg.visibility = View.VISIBLE&#10;                btnMsg.setOnClickListener {&#10;                    val context = dlgView.context&#10;                    val myId = SharedPrefManager.getUserId(context)&#10;                    val otherId = when {&#10;                        myId == null -&gt; req.customerID&#10;                        myId == req.ownerID -&gt; req.customerID&#10;                        else -&gt; req.customerID&#10;                    }&#10;                    val otherName = req.customerName&#10;                    val activity = context as? androidx.fragment.app.FragmentActivity&#10;                    if (activity != null) {&#10;                        try {&#10;                            val chatFrag = com.example.capstone2.customer.ChatFragment.newInstance(otherId, null, otherName)&#10;                            dialog.dismiss()&#10;                            activity.supportFragmentManager.beginTransaction()&#10;                                .replace(R.id.flFragment, chatFrag)&#10;                                .addToBackStack(null)&#10;                                .commit()&#10;                        } catch (e: Exception) {&#10;                            dialog.dismiss()&#10;                            Toast.makeText(context, &quot;Unable to open chat: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    } else {&#10;                        dialog.dismiss()&#10;                        Toast.makeText(context, &quot;Cannot open chat from this context&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            } else {&#10;                btnMsg.visibility = View.GONE&#10;            }&#10;&#10;            dialog.show()&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = requests.size&#10;&#10;    fun updateRequests(newRequests: List&lt;Request&gt;) {&#10;        this.requests = newRequests&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    private fun getStatusText(statusId: Int): String {&#10;        return when (statusId) {&#10;            1 -&gt; &quot;Subject for approval&quot;&#10;            2 -&gt; &quot;Delivery boy pickup&quot;&#10;            3 -&gt; &quot;Waiting for customer drop off&quot;&#10;            4 -&gt; &quot;Pending&quot;&#10;            5 -&gt; &quot;Processing&quot;&#10;            6 -&gt; &quot;Rider out for delivery&quot;&#10;            7 -&gt; &quot;Waiting for customer to claim&quot;&#10;            8 -&gt; &quot;Completed&quot;&#10;            9 -&gt; &quot;Rejected&quot;&#10;            10 -&gt; &quot;Request Accepted&quot;&#10;            11 -&gt; &quot;Partially Accepted&quot;&#10;            12 -&gt; &quot;Milling done&quot;&#10;            13 -&gt; &quot;Delivered&quot;&#10;            else -&gt; &quot;Unknown status&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.capstone2.adapter&#10;&#10;import android.content.Intent&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.*&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.capstone2.R&#10;import com.example.capstone2.user.ViewUserProfileActivity&#10;import com.example.capstone2.data.models.Request&#10;import com.example.capstone2.repository.SharedPrefManager&#10;&#10;class TrackAdapter(&#10;    private var requests: List&lt;Request&gt;,&#10;    private val onButtonClick: (Request, Int) -&gt; Unit,&#10;    /**&#10;     * Callback to fetch a contact number for a given customerId. Should invoke onResult&#10;     * on the main thread with the resulting contact string (e.g. actual number or &quot;Not available&quot;).&#10;     */&#10;    private val fetchContact: (customerId: Long, onResult: (String) -&gt; Unit) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;TrackAdapter.TrackViewHolder&gt;() {&#10;&#10;    inner class TrackViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val customerName: TextView = itemView.findViewById(R.id.tvCustomerName)&#10;        val tvSackQty: TextView = itemView.findViewById(R.id.tvSackQty)&#10;        val tvServices: TextView = itemView.findViewById(R.id.tvServices)&#10;        val tvSchedule: TextView = itemView.findViewById(R.id.tvSchedule)&#10;        val tvPickupLocation: TextView = itemView.findViewById(R.id.tvPickupLocation)&#10;        val tvDeliveryLocation: TextView = itemView.findViewById(R.id.tvDeliveryLocation)&#10;        val tvCurrentStatus: TextView = itemView.findViewById(R.id.tvCurrentStatus)&#10;        val tvPickupPreparingMessage: TextView? = itemView.findViewById(R.id.tvPickupPreparingMessage)&#10;&#10;        val rgStatusOptions: RadioGroup = itemView.findViewById(R.id.rgStatusOptions)&#10;        val rbDpickup: RadioButton = itemView.findViewById(R.id.rbDpickup)&#10;        val rbCDropoff: RadioButton = itemView.findViewById(R.id.rbCDropoff)&#10;        val rbPending: RadioButton = itemView.findViewById(R.id.rbPending)&#10;        val rbProcessing: RadioButton = itemView.findViewById(R.id.rbProcessing)&#10;        val rbOutForDelivery: RadioButton = itemView.findViewById(R.id.rbOutForDelivery)&#10;        val rbCPickup: RadioButton = itemView.findViewById(R.id.rbCPickup)&#10;        val rbMillingDone: RadioButton = itemView.findViewById(R.id.rbMillingDone)&#10;        val rbDelivered: RadioButton = itemView.findViewById(R.id.rbDelivered)&#10;&#10;        val btnSubmit = itemView.findViewById&lt;Button&gt;(R.id.btnSubmit)&#10;        val btnMore = itemView.findViewById&lt;ImageButton&gt;(R.id.btnMore)&#10;        val btnRowMessage: Button? = itemView.findViewById(R.id.btnRowMessage)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TrackViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_track, parent, false)&#10;        return TrackViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: TrackViewHolder, position: Int) {&#10;        val req = requests[position]&#10;        val ctx = holder.itemView.context&#10;&#10;        holder.customerName.text = req.customerName&#10;        holder.tvSackQty.text = ctx.getString(R.string.sacks_format, req.sackQuantity)&#10;        holder.tvServices.text = ctx.getString(R.string.services_format, req.serviceName)&#10;        holder.tvSchedule.text = ctx.getString(&#10;            R.string.schedule_format_owner,&#10;            req.schedule ?: ctx.getString(R.string.not_set)&#10;        )&#10;&#10;        // Hide locations in item row (shown in More dialog)&#10;        holder.tvPickupLocation.visibility = View.GONE&#10;        holder.tvDeliveryLocation.visibility = View.GONE&#10;&#10;        // Current status text and color&#10;        val currentStatusInt = try { req.statusID.toInt() } catch (_: Exception) { 0 }&#10;        val currentStatusText = getStatusText(currentStatusInt)&#10;        holder.tvCurrentStatus.text = ctx.getString(R.string.status_format, currentStatusText)&#10;&#10;        val statusColor = when (currentStatusInt) {&#10;            10 -&gt; &quot;#4CAF50&quot;&#10;            2, 3 -&gt; &quot;#FF9800&quot;&#10;            4 -&gt; &quot;#2196F3&quot;&#10;            5 -&gt; &quot;#9C27B0&quot;&#10;            6, 7 -&gt; &quot;#FF5722&quot;&#10;            12 -&gt; &quot;#2E7D32&quot;&#10;            else -&gt; &quot;#3F51B5&quot;&#10;        }&#10;        try {&#10;            holder.tvCurrentStatus.setTextColor(android.graphics.Color.parseColor(statusColor))&#10;        } catch (_: Exception) { /* ignore color parse issues */ }&#10;&#10;        // All radio buttons list&#10;        val allRadioButtons = listOf(&#10;            holder.rbDpickup, holder.rbCDropoff, holder.rbPending, holder.rbProcessing,&#10;            holder.rbOutForDelivery, holder.rbCPickup, holder.rbMillingDone, holder.rbDelivered&#10;        )&#10;&#10;        // Reset UI state&#10;        allRadioButtons.forEach { rb -&gt;&#10;            rb.visibility = View.GONE&#10;            rb.isChecked = false&#10;            rb.isEnabled = true&#10;            rb.isClickable = true&#10;            rb.setOnClickListener(null)&#10;        }&#10;        holder.rgStatusOptions.setOnCheckedChangeListener(null)&#10;        holder.rgStatusOptions.clearCheck()&#10;        holder.rgStatusOptions.visibility = View.GONE&#10;        holder.rgStatusOptions.isEnabled = false&#10;        holder.btnSubmit.visibility = View.GONE&#10;        holder.btnSubmit.isEnabled = false&#10;        holder.btnSubmit.setOnClickListener(null)&#10;        holder.btnRowMessage?.visibility = View.GONE&#10;        holder.btnRowMessage?.setOnClickListener(null)&#10;&#10;        val currentStatus = currentStatusInt&#10;&#10;        val includesPickup = req.serviceID in listOf(1L, 2L, 5L, 6L)&#10;        val includesDelivery = req.serviceID in listOf(1L, 3L, 5L, 7L)&#10;        val terminalStatuses = setOf(8, 9, 12, 13)&#10;&#10;        // Compute next status strictly following owner-side rules&#10;        val nextStatus: Int? = when {&#10;            currentStatus in terminalStatuses -&gt; null&#10;            includesPickup -&gt; when (currentStatus) {&#10;                10 -&gt; null&#10;                4 -&gt; 5&#10;                5 -&gt; 12&#10;                else -&gt; null&#10;            }&#10;            else -&gt; when (currentStatus) {&#10;                10 -&gt; 3&#10;                3 -&gt; 4&#10;                4 -&gt; 5&#10;                5 -&gt; 12&#10;                else -&gt; null&#10;            }&#10;        }&#10;&#10;        // Show or hide pickup preparing message&#10;        holder.tvPickupPreparingMessage?.visibility = if (includesPickup &amp;&amp; currentStatus == 10 &amp;&amp; nextStatus == null) View.VISIBLE else View.GONE&#10;&#10;        val statusToRadioMap = mapOf(&#10;            3 to holder.rbCDropoff,&#10;            4 to holder.rbPending,&#10;            5 to holder.rbProcessing,&#10;            12 to holder.rbMillingDone&#10;        )&#10;&#10;        if (nextStatus != null) {&#10;            val nextRadio = statusToRadioMap[nextStatus]&#10;            nextRadio?.let { rb -&gt;&#10;                rb.visibility = View.VISIBLE&#10;                rb.isChecked = false&#10;                rb.isEnabled = true&#10;&#10;                holder.rgStatusOptions.visibility = View.VISIBLE&#10;                holder.rgStatusOptions.isEnabled = true&#10;                holder.btnSubmit.visibility = View.VISIBLE&#10;                holder.btnSubmit.isEnabled = false&#10;&#10;                rb.setOnClickListener { view -&gt;&#10;                    if (view is RadioButton) {&#10;                        view.isChecked = true&#10;                        holder.rgStatusOptions.check(view.id)&#10;                        holder.btnSubmit.isEnabled = true&#10;                        Log.d(&quot;TrackAdapter&quot;, &quot;Radio clicked for request=${req.requestID}, radioId=${view.id}&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            holder.rgStatusOptions.setOnCheckedChangeListener { _, checkedId -&gt;&#10;                holder.btnSubmit.isEnabled = checkedId != -1&#10;            }&#10;&#10;            val radioIdToStatus = mapOf(&#10;                holder.rbCDropoff.id to 3,&#10;                holder.rbPending.id to 4,&#10;                holder.rbProcessing.id to 5,&#10;                holder.rbMillingDone.id to 12&#10;            )&#10;&#10;            holder.btnSubmit.setOnClickListener {&#10;                val checkedId = holder.rgStatusOptions.checkedRadioButtonId&#10;                val selectedStatus = radioIdToStatus[checkedId] ?: nextStatus&#10;                if (selectedStatus != null) {&#10;                    onButtonClick(req, selectedStatus)&#10;                } else {&#10;                    Toast.makeText(holder.itemView.context, R.string.submit, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Row-level Message button: show only when Milling done&#10;        if (currentStatus == 12) {&#10;            holder.btnRowMessage?.visibility = View.VISIBLE&#10;            holder.btnRowMessage?.setOnClickListener {&#10;                val context = holder.itemView.context&#10;                val myId = SharedPrefManager.getUserId(context)&#10;                val otherId = when {&#10;                    myId == null -&gt; req.customerID&#10;                    myId == req.ownerID -&gt; req.customerID&#10;                    else -&gt; req.customerID&#10;                }&#10;                val otherName = req.customerName&#10;                val activity = context as? androidx.fragment.app.FragmentActivity&#10;                if (activity != null) {&#10;                    try {&#10;                        val chatFrag = com.example.capstone2.customer.ChatFragment.newInstance(otherId, null, otherName)&#10;                        activity.supportFragmentManager.beginTransaction()&#10;                            .replace(R.id.flFragment, chatFrag)&#10;                            .addToBackStack(null)&#10;                            .commit()&#10;                    } catch (e: Exception) {&#10;                        Toast.makeText(context, &quot;Unable to open chat: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                } else {&#10;                    Toast.makeText(context, &quot;Cannot open chat from this context&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;&#10;        // More button shows details dialog and fetches contact&#10;        holder.btnMore.setOnClickListener {&#10;            val detailsBuilder = StringBuilder()&#10;&#10;            if (!req.pickupLocation.isNullOrEmpty()) {&#10;                detailsBuilder.append(&quot;Pickup location: ${req.pickupLocation}\n&quot;)&#10;            } else if (includesPickup) {&#10;                detailsBuilder.append(&quot;Pickup location: Not set\n&quot;)&#10;            }&#10;&#10;            if (!req.deliveryLocation.isNullOrEmpty()) {&#10;                detailsBuilder.append(&quot;Delivery location: ${req.deliveryLocation}\n&quot;)&#10;            } else if (includesDelivery) {&#10;                detailsBuilder.append(&quot;Delivery location: Not set\n&quot;)&#10;            }&#10;&#10;            detailsBuilder.append(&quot;Comment: ${if (!req.comment.isNullOrEmpty()) req.comment else &quot;None&quot;}\n&quot;)&#10;&#10;            // Create a custom dialog from layout so we can show contact and action buttons&#10;            val dialog = android.app.Dialog(ctx)&#10;            val dlgView = LayoutInflater.from(ctx).inflate(R.layout.dialog_request_details, null, false)&#10;            dialog.setContentView(dlgView)&#10;            dialog.window?.setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT)&#10;&#10;            // Find dialog views&#10;            val tvDetailCustomerName: TextView = dlgView.findViewById(R.id.tvDetailCustomerName)&#10;            val tvDetailSackQty: TextView = dlgView.findViewById(R.id.tvDetailSackQty)&#10;            val tvDetailServices: TextView = dlgView.findViewById(R.id.tvDetailServices)&#10;            val tvDetailSchedule: TextView = dlgView.findViewById(R.id.tvDetailSchedule)&#10;            val tvDetailComment: TextView = dlgView.findViewById(R.id.tvDetailComment)&#10;            val tvDetailSubmittedAt: TextView = dlgView.findViewById(R.id.tvDetailSubmittedAt)&#10;            val tvDetailContact: TextView = dlgView.findViewById(R.id.tvDetailContact)&#10;            val btnMsg: Button = dlgView.findViewById(R.id.btnMessage)&#10;            val btnViewProfile: Button = dlgView.findViewById(R.id.btnViewProfile)&#10;            val btnClose: Button = dlgView.findViewById(R.id.btnClose)&#10;            val tvDetailProgressLabel: TextView? = dlgView.findViewById(R.id.tvDetailProgressLabel)&#10;            val progressBarRequest: ProgressBar? = dlgView.findViewById(R.id.progressBarRequest)&#10;            tvDetailProgressLabel?.visibility = View.GONE&#10;            progressBarRequest?.visibility = View.GONE&#10;&#10;            // Populate basic fields&#10;            tvDetailCustomerName.text = ctx.getString(R.string.customer_format, req.customerName)&#10;            tvDetailSackQty.text = ctx.getString(R.string.sacks_format, req.sackQuantity)&#10;            tvDetailServices.text = ctx.getString(R.string.services_format, req.serviceName)&#10;            tvDetailSchedule.text = ctx.getString(R.string.schedule_format_owner, req.schedule ?: ctx.getString(R.string.not_set))&#10;            tvDetailComment.text = ctx.getString(R.string.comment_format, req.comment ?: &quot;None&quot;)&#10;            tvDetailSubmittedAt.text = ctx.getString(R.string.submitted_at_format, req.submittedAt ?: &quot;Unknown&quot;)&#10;&#10;            // Initially show either the static contact if present or a loading state and fetch&#10;            if (!req.contactNumber.isNullOrBlank()) {&#10;                tvDetailContact.visibility = View.VISIBLE&#10;                tvDetailContact.text = ctx.getString(R.string.contact_number_format, req.contactNumber)&#10;            } else {&#10;                tvDetailContact.visibility = View.VISIBLE&#10;                tvDetailContact.text = ctx.getString(R.string.contact_number_format, ctx.getString(R.string.contact_number_loading))&#10;                fetchContact(req.customerID) { finalContact -&gt;&#10;                    (ctx as? android.app.Activity)?.runOnUiThread {&#10;                        tvDetailContact.text = ctx.getString(R.string.contact_number_format, finalContact)&#10;                    } ?: run {&#10;                        tvDetailContact.text = ctx.getString(R.string.contact_number_format, finalContact)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Wire View profile button&#10;            btnViewProfile.visibility = View.VISIBLE&#10;            btnViewProfile.setOnClickListener {&#10;                try {&#10;                    val intent = Intent(ctx, ViewUserProfileActivity::class.java)&#10;                    intent.putExtra(&quot;userId&quot;, req.customerID)&#10;                    ctx.startActivity(intent)&#10;                } catch (_: Exception) { /* ignore */ }&#10;            }&#10;&#10;            // Close button&#10;            btnClose.setOnClickListener { dialog.dismiss() }&#10;&#10;            // Show Message button in dialog only when Milling done&#10;            if (currentStatus == 12) {&#10;                btnMsg.visibility = View.VISIBLE&#10;                btnMsg.setOnClickListener {&#10;                    val context = dlgView.context&#10;                    val myId = SharedPrefManager.getUserId(context)&#10;                    val otherId = when {&#10;                        myId == null -&gt; req.customerID&#10;                        myId == req.ownerID -&gt; req.customerID&#10;                        else -&gt; req.customerID&#10;                    }&#10;                    val otherName = req.customerName&#10;                    val activity = context as? androidx.fragment.app.FragmentActivity&#10;                    if (activity != null) {&#10;                        try {&#10;                            val chatFrag = com.example.capstone2.customer.ChatFragment.newInstance(otherId, null, otherName)&#10;                            dialog.dismiss()&#10;                            activity.supportFragmentManager.beginTransaction()&#10;                                .replace(R.id.flFragment, chatFrag)&#10;                                .addToBackStack(null)&#10;                                .commit()&#10;                        } catch (e: Exception) {&#10;                            dialog.dismiss()&#10;                            Toast.makeText(context, &quot;Unable to open chat: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    } else {&#10;                        dialog.dismiss()&#10;                        Toast.makeText(context, &quot;Cannot open chat from this context&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            } else {&#10;                btnMsg.visibility = View.GONE&#10;            }&#10;&#10;            dialog.show()&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = requests.size&#10;&#10;    fun updateRequests(newRequests: List&lt;Request&gt;) {&#10;        this.requests = newRequests&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    private fun getStatusText(statusId: Int): String {&#10;        return when (statusId) {&#10;            1 -&gt; &quot;Subject for approval&quot;&#10;            2 -&gt; &quot;Delivery boy pickup&quot;&#10;            3 -&gt; &quot;Waiting for customer drop off&quot;&#10;            4 -&gt; &quot;Pending&quot;&#10;            5 -&gt; &quot;Processing&quot;&#10;            6 -&gt; &quot;Rider out for delivery&quot;&#10;            7 -&gt; &quot;Waiting for customer to claim&quot;&#10;            8 -&gt; &quot;Completed&quot;&#10;            9 -&gt; &quot;Rejected&quot;&#10;            10 -&gt; &quot;Request Accepted&quot;&#10;            11 -&gt; &quot;Partially Accepted&quot;&#10;            12 -&gt; &quot;Milling done&quot;&#10;            13 -&gt; &quot;Delivered&quot;&#10;            else -&gt; &quot;Unknown status&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_messages.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_messages.xml" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvConversations&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvEmpty&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:text=&quot;No conversations&quot;&#10;        android:visibility=&quot;gone&quot;/&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_track.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_track.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;12dp&quot;&#10;    android:elevation=&quot;4dp&quot;&#10;    android:padding=&quot;12dp&quot;&#10;    android:radius=&quot;10dp&quot;&gt;&#10;&#10;    &lt;!-- Use a FrameLayout so we can overlay the More button pinned to the top-end --&gt;&#10;    &lt;FrameLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;!-- Main vertical content (unchanged, except removing inline More controls) --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:descendantFocusability=&quot;afterDescendants&quot;&#10;            android:paddingStart=&quot;4dp&quot;&#10;            android:paddingEnd=&quot;64dp&quot;&gt; &lt;!-- reserve space on the right for the overlayed more button --&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvCustomerName&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_customer&quot;&#10;                android:paddingTop=&quot;6dp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot;&#10;                android:ellipsize=&quot;end&quot;&#10;                android:maxLines=&quot;1&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvSackQty&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_sacks&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvServices&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_services&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvSchedule&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_schedule_owner&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPickupLocation&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_pickup_location&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDeliveryLocation&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_delivery_location&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;!-- Current Status (full-width, but single line to avoid pushing overlay) --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvCurrentStatus&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_status&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#3F51B5&quot;&#10;                android:gravity=&quot;start&quot;&#10;                android:padding=&quot;2dp&quot;&#10;                android:maxLines=&quot;1&quot;&#10;                android:ellipsize=&quot;end&quot;&#10;                android:layout_marginTop=&quot;6dp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvService&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/service_label&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;&#10;&#10;            &lt;!-- Divider below current status --&gt;&#10;            &lt;View&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;1dp&quot;&#10;                android:background=&quot;#DDDDDD&quot;&#10;                android:layout_marginBottom=&quot;10dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPickupPreparingMessage&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/pickup_preparing_message&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textStyle=&quot;italic&quot;&#10;                android:textColor=&quot;#555555&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;RadioGroup&#10;                android:id=&quot;@+id/rgStatusOptions&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:focusableInTouchMode=&quot;true&quot;&#10;                android:paddingStart=&quot;4dp&quot;&#10;                android:paddingEnd=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt; &lt;!-- ensure group can handle focus in touch mode --&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbDpickup&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_delivery_boy_pickup&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbCDropoff&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_waiting_customer_dropoff&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbPending&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_pending&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbProcessing&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_processing&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbOutForDelivery&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_out_for_delivery&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbMillingDone&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_milling_done&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbDelivered&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_delivered&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbCPickup&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_waiting_customer_pickup&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;            &lt;/RadioGroup&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnSubmit&quot;&#10;                android:layout_gravity=&quot;end&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/submit&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;!-- NEW: Row-level Message button, shown only when status is Milling done --&gt;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnRowMessage&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/action_message&quot;&#10;                android:layout_gravity=&quot;end&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Overlay pinned to top-end so More control is always visible --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_gravity=&quot;end|top&quot;&#10;            android:layout_marginTop=&quot;6dp&quot;&#10;            android:layout_marginEnd=&quot;6dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMore&quot;&#10;                android:layout_width=&quot;44dp&quot;&#10;                android:layout_height=&quot;44dp&quot;&#10;                android:contentDescription=&quot;@string/more&quot;&#10;                android:src=&quot;@drawable/ic_more_vert&quot;&#10;                android:background=&quot;@drawable/bg_circle_icon&quot;&#10;                android:foreground=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                app:tint=&quot;#333333&quot;&#10;                android:scaleType=&quot;centerInside&quot;&#10;                android:padding=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/FrameLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;12dp&quot;&#10;    android:elevation=&quot;4dp&quot;&#10;    android:padding=&quot;12dp&quot;&#10;    android:radius=&quot;10dp&quot;&gt;&#10;&#10;    &lt;!-- Use a FrameLayout so we can overlay the More button pinned to the top-end --&gt;&#10;    &lt;FrameLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;!-- Main vertical content (unchanged, except removing inline More controls) --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:descendantFocusability=&quot;afterDescendants&quot;&#10;            android:paddingStart=&quot;4dp&quot;&#10;            android:paddingEnd=&quot;64dp&quot;&gt; &lt;!-- reserve space on the right for the overlayed more button --&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvCustomerName&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_customer&quot;&#10;                android:paddingTop=&quot;6dp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot;&#10;                android:ellipsize=&quot;end&quot;&#10;                android:maxLines=&quot;1&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvSackQty&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_sacks&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvServices&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_services&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvSchedule&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_schedule_owner&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPickupLocation&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_pickup_location&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDeliveryLocation&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_delivery_location&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;!-- Current Status (full-width, but single line to avoid pushing overlay) --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvCurrentStatus&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/label_status&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#3F51B5&quot;&#10;                android:gravity=&quot;start&quot;&#10;                android:padding=&quot;2dp&quot;&#10;                android:maxLines=&quot;1&quot;&#10;                android:ellipsize=&quot;end&quot;&#10;                android:layout_marginTop=&quot;6dp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;!-- Divider below current status --&gt;&#10;            &lt;View&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;1dp&quot;&#10;                android:background=&quot;#DDDDDD&quot;&#10;                android:layout_marginBottom=&quot;10dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPickupPreparingMessage&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/pickup_preparing_message&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textStyle=&quot;italic&quot;&#10;                android:textColor=&quot;#555555&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;RadioGroup&#10;                android:id=&quot;@+id/rgStatusOptions&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:focusableInTouchMode=&quot;true&quot;&#10;                android:paddingStart=&quot;4dp&quot;&#10;                android:paddingEnd=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt; &lt;!-- ensure group can handle focus in touch mode --&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbDpickup&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_delivery_boy_pickup&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbCDropoff&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_waiting_customer_dropoff&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbPending&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_pending&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbProcessing&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_processing&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbOutForDelivery&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_out_for_delivery&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbMillingDone&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_milling_done&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbDelivered&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_delivered&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbCPickup&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/rb_waiting_customer_pickup&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;            &lt;/RadioGroup&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnSubmit&quot;&#10;                android:layout_gravity=&quot;end&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/submit&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;!-- NEW: Row-level Message button, shown only when status is Milling done --&gt;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnRowMessage&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/action_message&quot;&#10;                android:layout_gravity=&quot;end&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Overlay pinned to top-end so More control is always visible --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_gravity=&quot;end|top&quot;&#10;            android:layout_marginTop=&quot;6dp&quot;&#10;            android:layout_marginEnd=&quot;6dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMore&quot;&#10;                android:layout_width=&quot;44dp&quot;&#10;                android:layout_height=&quot;44dp&quot;&#10;                android:contentDescription=&quot;@string/more&quot;&#10;                android:src=&quot;@drawable/ic_more_vert&quot;&#10;                android:background=&quot;@drawable/bg_circle_icon&quot;&#10;                android:foreground=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                app:tint=&quot;#333333&quot;&#10;                android:scaleType=&quot;centerInside&quot;&#10;                android:padding=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/FrameLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>