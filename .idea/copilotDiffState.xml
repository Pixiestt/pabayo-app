<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/owner/OwnerFragmentHistory.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/capstone2/owner/OwnerFragmentHistory.kt" />
              <option name="originalContent" value="package com.example.capstone2.owner&#10;&#10;import android.content.ContentValues&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Environment&#10;import android.provider.MediaStore&#10;import android.util.Log&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.capstone2.R&#10;import com.example.capstone2.adapter.OwnerHistoryAdapter&#10;import com.example.capstone2.network.ApiClient&#10;import com.example.capstone2.repository.RequestRepository&#10;import com.example.capstone2.repository.SharedPrefManager&#10;import com.example.capstone2.viewmodel.OwnerHistoryViewModel&#10;import com.example.capstone2.viewmodel.OwnerHistoryViewModelFactory&#10;import com.example.capstone2.data.models.Request&#10;import android.Manifest&#10;import android.graphics.Canvas&#10;import android.graphics.Paint&#10;import android.graphics.Typeface&#10;import android.graphics.pdf.PdfDocument&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.OutputStream&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;// Material date range picker + java.time for robust date handling&#10;import com.google.android.material.datepicker.MaterialDatePicker&#10;import java.time.Instant&#10;import java.time.ZoneOffset&#10;&#10;class OwnerFragmentHistory : Fragment(R.layout.owner_fragment_history) {&#10;&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var historyAdapter: OwnerHistoryAdapter&#10;    private lateinit var historyViewModel: OwnerHistoryViewModel&#10;    private lateinit var tvNoHistory: TextView&#10;&#10;    // Filter action buttons&#10;    private lateinit var btnFilter: Button&#10;    private lateinit var btnClear: Button&#10;    private lateinit var btnExportPdf: Button&#10;&#10;    // Filter state (selected range)&#10;    private var selectedStartDate: Date? = null&#10;    private var selectedEndDate: Date? = null&#10;&#10;    private val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.UK)&#10;&#10;    // Local copy for filtering&#10;    private var allCompletedRequests: List&lt;Request&gt; = emptyList()&#10;&#10;    // Permission handling for export&#10;    private val REQ_WRITE_EXTERNAL_STORAGE = 201&#10;    private var pendingExportAfterPermission = false&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        recyclerView = view.findViewById(R.id.recyclerViewOwnerHistory)&#10;        tvNoHistory = view.findViewById(R.id.tvNoHistory)&#10;&#10;        // Buttons&#10;        btnFilter = view.findViewById(R.id.btnFilterHistoryOwner)&#10;        btnClear = view.findViewById(R.id.btnClearFilterOwner)&#10;        btnExportPdf = view.findViewById(R.id.btnExportPdfOwner)&#10;&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        historyAdapter = OwnerHistoryAdapter(emptyList())&#10;        recyclerView.adapter = historyAdapter&#10;&#10;        // Get token from shared preferences&#10;        val token = SharedPrefManager.getAuthToken(requireContext())&#10;&#10;        if (token.isNullOrEmpty()) {&#10;            Toast.makeText(requireContext(), &quot;Missing auth token&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        // Setup ViewModel&#10;        val authedApiService = ApiClient.getApiService { token }&#10;        val repository = RequestRepository(authedApiService)&#10;        val viewModelFactory = OwnerHistoryViewModelFactory(repository)&#10;        historyViewModel = ViewModelProvider(this, viewModelFactory)[OwnerHistoryViewModel::class.java]&#10;&#10;        // Observe completed requests&#10;        historyViewModel.completedRequests.observe(viewLifecycleOwner) { requests -&gt;&#10;            Log.d(&quot;OwnerHistory&quot;, &quot;Received ${requests.size} completed requests in fragment&quot;)&#10;&#10;            if (requests.isNotEmpty()) {&#10;                allCompletedRequests = requests&#10;                applyDateFilter() // respect any existing range&#10;                recyclerView.visibility = View.VISIBLE&#10;                tvNoHistory.visibility = View.GONE&#10;            } else {&#10;                allCompletedRequests = emptyList()&#10;                recyclerView.visibility = View.GONE&#10;                tvNoHistory.visibility = View.VISIBLE&#10;                Toast.makeText(requireContext(), getString(R.string.no_completed_requests), Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;&#10;        // Fetch owner's completed requests&#10;        fetchCompletedRequests()&#10;&#10;        // Filter button opens a Material Date Range Picker; on confirm we store range and apply filter&#10;        btnFilter.setOnClickListener {&#10;            val picker = MaterialDatePicker.Builder.dateRangePicker()&#10;                .setTitleText(getString(R.string.action_filter))&#10;                .build()&#10;&#10;            picker.addOnPositiveButtonClickListener { selection -&gt;&#10;                if (selection != null) {&#10;                    val startMillis = selection.first&#10;                    val endMillis = selection.second&#10;                    if (startMillis != null &amp;&amp; endMillis != null) {&#10;                        // Normalize to start of day UTC to match yyyy-MM-dd parsing we use for requests&#10;                        selectedStartDate = Date.from(Instant.ofEpochMilli(startMillis).atZone(ZoneOffset.UTC).toLocalDate().atStartOfDay().toInstant(ZoneOffset.UTC))&#10;                        selectedEndDate = Date.from(Instant.ofEpochMilli(endMillis).atZone(ZoneOffset.UTC).toLocalDate().atStartOfDay().toInstant(ZoneOffset.UTC))&#10;                        applyDateFilter()&#10;                    }&#10;                }&#10;            }&#10;            picker.show(parentFragmentManager, &quot;owner_history_date_range&quot;)&#10;        }&#10;&#10;        btnClear.setOnClickListener {&#10;            selectedStartDate = null&#10;            selectedEndDate = null&#10;            historyAdapter.updateRequests(allCompletedRequests)&#10;            if (allCompletedRequests.isEmpty()) {&#10;                recyclerView.visibility = View.GONE&#10;                tvNoHistory.visibility = View.VISIBLE&#10;            } else {&#10;                recyclerView.visibility = View.VISIBLE&#10;                tvNoHistory.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Export button&#10;        btnExportPdf.setOnClickListener {&#10;            maybeExportPdf()&#10;        }&#10;    }&#10;&#10;    private fun fetchCompletedRequests() {&#10;        historyViewModel.fetchCompletedRequests()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        fetchCompletedRequests()&#10;    }&#10;&#10;    private fun parseDateFromRequest(request: Request): Date? {&#10;        val candidates = listOf(request.submittedAt, request.pickupDate, request.deliveryDate, request.dateUpdated, request.schedule)&#10;        for (c in candidates) {&#10;            if (!c.isNullOrBlank()) {&#10;                val s = if (c.length &gt;= 10) c.substring(0, 10) else c&#10;                try {&#10;                    return dateFormat.parse(s)&#10;                } catch (_: Exception) {&#10;                    // ignore&#10;                }&#10;            }&#10;        }&#10;        return null&#10;    }&#10;&#10;    private fun applyDateFilter() {&#10;        val startDate = selectedStartDate&#10;        val endDate = selectedEndDate&#10;&#10;        if (startDate == null &amp;&amp; endDate == null) {&#10;            historyAdapter.updateRequests(allCompletedRequests)&#10;            return&#10;        }&#10;&#10;        try {&#10;            val filtered = allCompletedRequests.filter { req -&gt;&#10;                val d = parseDateFromRequest(req) ?: return@filter false&#10;                val afterStart = startDate?.let { !d.before(it) } ?: true&#10;                val beforeEnd = endDate?.let { !d.after(it) } ?: true&#10;                afterStart &amp;&amp; beforeEnd&#10;            }&#10;&#10;            historyAdapter.updateRequests(filtered)&#10;&#10;            recyclerView.visibility = if (filtered.isEmpty()) View.GONE else View.VISIBLE&#10;            tvNoHistory.visibility = if (filtered.isEmpty()) View.VISIBLE else View.GONE&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;OwnerHistory&quot;, &quot;Error applying date filter&quot;, e)&#10;            Toast.makeText(requireContext(), &quot;Invalid date filter&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun maybeExportPdf() {&#10;        val currentList = historyAdapter.getRequests()&#10;        if (currentList.isEmpty()) {&#10;            Toast.makeText(requireContext(), getString(R.string.export_pdf_empty), Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.Q) {&#10;            val hasPermission = ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED&#10;            if (!hasPermission) {&#10;                pendingExportAfterPermission = true&#10;                requestPermissions(arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE), REQ_WRITE_EXTERNAL_STORAGE)&#10;                Toast.makeText(requireContext(), getString(R.string.storage_permission_required), Toast.LENGTH_SHORT).show()&#10;                return&#10;            }&#10;        }&#10;        exportPdf(currentList)&#10;    }&#10;&#10;    private fun exportPdf(requests: List&lt;Request&gt;) {&#10;        try {&#10;            val sdfFile = SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;, Locale.getDefault())&#10;            val fileName = &quot;owner_history_${sdfFile.format(Date())}.pdf&quot;&#10;&#10;            // Build PDF document&#10;            val doc = PdfDocument()&#10;            val pageWidth = 595 // A4 width in points (approx)&#10;            val pageHeight = 842 // A4 height in points (approx)&#10;&#10;            val titlePaint = Paint().apply {&#10;                isAntiAlias = true&#10;                textSize = 18f&#10;                typeface = Typeface.create(Typeface.DEFAULT, Typeface.BOLD)&#10;            }&#10;            val headerPaint = Paint().apply {&#10;                isAntiAlias = true&#10;                textSize = 12f&#10;                typeface = Typeface.create(Typeface.DEFAULT, Typeface.BOLD)&#10;            }&#10;            val textPaint = Paint().apply {&#10;                isAntiAlias = true&#10;                textSize = 11f&#10;            }&#10;            val linePaint = Paint().apply {&#10;                strokeWidth = 1f&#10;            }&#10;&#10;            var pageNumber = 1&#10;            var y = 0f&#10;            lateinit var currentPage: PdfDocument.Page&#10;            lateinit var canvas: Canvas&#10;&#10;            fun startNewPage() {&#10;                val pageInfo = PdfDocument.PageInfo.Builder(pageWidth, pageHeight, pageNumber).create()&#10;                currentPage = doc.startPage(pageInfo)&#10;                canvas = currentPage.canvas&#10;                y = 40f&#10;                // Title&#10;                canvas.drawText(&quot;Capstone – Owner Transaction History&quot;, 40f, y, titlePaint)&#10;                y += 30f&#10;                // Header row&#10;                var x = 40f&#10;                canvas.drawText(&quot;ID&quot;, x, y, headerPaint); x += 50f&#10;                canvas.drawText(&quot;Customer&quot;, x, y, headerPaint); x += 160f&#10;                canvas.drawText(&quot;Service&quot;, x, y, headerPaint); x += 130f&#10;                canvas.drawText(&quot;Date&quot;, x, y, headerPaint); x += 110f&#10;                canvas.drawText(&quot;Sacks&quot;, x, y, headerPaint); x += 60f&#10;                canvas.drawText(&quot;Amount&quot;, x, y, headerPaint)&#10;                // underline&#10;                y += 6f&#10;                canvas.drawLine(40f, y, (pageWidth - 40).toFloat(), y, linePaint)&#10;                y += 12f&#10;            }&#10;&#10;            startNewPage()&#10;&#10;            for (req in requests) {&#10;                if (y &gt; pageHeight - 60) {&#10;                    doc.finishPage(currentPage)&#10;                    pageNumber++&#10;                    startNewPage()&#10;                }&#10;                var x = 40f&#10;                canvas.drawText(req.requestID.toString(), x, y, textPaint); x += 50f&#10;                canvas.drawText(if (req.customerName.length &lt;= 18) req.customerName else req.customerName.substring(0,17) + &quot;…&quot;, x, y, textPaint); x += 160f&#10;                canvas.drawText(if (req.serviceName.length &lt;= 16) req.serviceName else req.serviceName.substring(0,15) + &quot;…&quot;, x, y, textPaint); x += 130f&#10;                val dateStr = req.dateUpdated?.let { if (it.length &gt;= 10) it.substring(0,10) else it }&#10;                    ?: req.deliveryDate?.let { if (it.length &gt;= 10) it.substring(0,10) else it }&#10;                    ?: req.submittedAt?.let { if (it.length &gt;= 10) it.substring(0,10) else it }&#10;                    ?: &quot;&quot;&#10;                canvas.drawText(dateStr, x, y, textPaint); x += 110f&#10;                canvas.drawText(req.sackQuantity.toString(), x, y, textPaint); x += 60f&#10;                val amt: Double? = req.paymentAmount&#10;                    ?: req.payment?.amount&#10;                    ?: req.payment?.amountString?.toDoubleOrNull()&#10;                val amtStr = if (amt != null) &quot;₱&quot; + String.format(Locale.getDefault(), &quot;%.2f&quot;, amt) else &quot;-&quot;&#10;                canvas.drawText(amtStr, x, y, textPaint)&#10;                y += 18f&#10;            }&#10;&#10;            // Close last page&#10;            doc.finishPage(currentPage)&#10;&#10;            // Save to storage&#10;            val outputStream: OutputStream?&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) {&#10;                val resolver = requireContext().contentResolver&#10;                val contentValues = ContentValues().apply {&#10;                    put(MediaStore.MediaColumns.DISPLAY_NAME, fileName)&#10;                    put(MediaStore.MediaColumns.MIME_TYPE, &quot;application/pdf&quot;)&#10;                    put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS + &quot;/Capstone&quot;)&#10;                }&#10;                val collection = MediaStore.Downloads.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY)&#10;                val savedUri = resolver.insert(collection, contentValues)&#10;                outputStream = savedUri?.let { resolver.openOutputStream(it) }&#10;            } else {&#10;                val downloads = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)&#10;                val dir = File(downloads, &quot;Capstone&quot;).apply { if (!exists()) mkdirs() }&#10;                val outFile = File(dir, fileName)&#10;                outputStream = FileOutputStream(outFile)&#10;            }&#10;&#10;            outputStream.use { os -&gt;&#10;                if (os == null) throw IllegalStateException(&quot;No output stream available&quot;)&#10;                doc.writeTo(os)&#10;            }&#10;            doc.close()&#10;&#10;            val shownName = fileName&#10;            Toast.makeText(requireContext(), getString(R.string.export_pdf_success, shownName), Toast.LENGTH_LONG).show()&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;OwnerHistory&quot;, &quot;Failed to export PDF&quot;, e)&#10;            Toast.makeText(requireContext(), getString(R.string.export_pdf_error), Toast.LENGTH_LONG).show()&#10;        }&#10;    }&#10;&#10;    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array&lt;out String&gt;, grantResults: IntArray) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults)&#10;        if (requestCode == REQ_WRITE_EXTERNAL_STORAGE) {&#10;            val granted = grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED&#10;            if (granted &amp;&amp; pendingExportAfterPermission) {&#10;                pendingExportAfterPermission = false&#10;                val list = historyAdapter.getRequests()&#10;                if (list.isNotEmpty()) exportPdf(list)&#10;            } else {&#10;                pendingExportAfterPermission = false&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.capstone2.owner&#10;&#10;import android.content.ContentValues&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Environment&#10;import android.provider.MediaStore&#10;import android.text.InputType&#10;import android.util.Log&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.capstone2.R&#10;import com.example.capstone2.adapter.OwnerHistoryAdapter&#10;import com.example.capstone2.network.ApiClient&#10;import com.example.capstone2.repository.RequestRepository&#10;import com.example.capstone2.repository.SharedPrefManager&#10;import com.example.capstone2.viewmodel.OwnerHistoryViewModel&#10;import com.example.capstone2.viewmodel.OwnerHistoryViewModelFactory&#10;import com.example.capstone2.data.models.Request&#10;import android.Manifest&#10;import android.graphics.Canvas&#10;import android.graphics.Paint&#10;import android.graphics.Typeface&#10;import android.graphics.pdf.PdfDocument&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.OutputStream&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;// Material date range picker + java.time for robust date handling&#10;import com.google.android.material.datepicker.MaterialDatePicker&#10;import java.time.Instant&#10;import java.time.ZoneOffset&#10;&#10;class OwnerFragmentHistory : Fragment(R.layout.owner_fragment_history) {&#10;&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var historyAdapter: OwnerHistoryAdapter&#10;    private lateinit var historyViewModel: OwnerHistoryViewModel&#10;    private lateinit var tvNoHistory: TextView&#10;&#10;    // Filter action buttons&#10;    private lateinit var btnFilter: Button&#10;    private lateinit var btnClear: Button&#10;    private lateinit var btnExportPdf: Button&#10;&#10;    // Filter state (selected range + queries)&#10;    private var selectedStartDate: Date? = null&#10;    private var selectedEndDate: Date? = null&#10;    private var selectedNameQuery: String? = null&#10;    private var selectedIdQuery: String? = null&#10;&#10;    private val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.UK)&#10;&#10;    // Local copy for filtering&#10;    private var allCompletedRequests: List&lt;Request&gt; = emptyList()&#10;&#10;    // Permission handling for export&#10;    private val REQ_WRITE_EXTERNAL_STORAGE = 201&#10;    private var pendingExportAfterPermission = false&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        recyclerView = view.findViewById(R.id.recyclerViewOwnerHistory)&#10;        tvNoHistory = view.findViewById(R.id.tvNoHistory)&#10;&#10;        // Buttons&#10;        btnFilter = view.findViewById(R.id.btnFilterHistoryOwner)&#10;        btnClear = view.findViewById(R.id.btnClearFilterOwner)&#10;        btnExportPdf = view.findViewById(R.id.btnExportPdfOwner)&#10;&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        historyAdapter = OwnerHistoryAdapter(emptyList())&#10;        recyclerView.adapter = historyAdapter&#10;&#10;        // Get token from shared preferences&#10;        val token = SharedPrefManager.getAuthToken(requireContext())&#10;&#10;        if (token.isNullOrEmpty()) {&#10;            Toast.makeText(requireContext(), &quot;Missing auth token&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        // Setup ViewModel&#10;        val authedApiService = ApiClient.getApiService { token }&#10;        val repository = RequestRepository(authedApiService)&#10;        val viewModelFactory = OwnerHistoryViewModelFactory(repository)&#10;        historyViewModel = ViewModelProvider(this, viewModelFactory)[OwnerHistoryViewModel::class.java]&#10;&#10;        // Observe completed requests&#10;        historyViewModel.completedRequests.observe(viewLifecycleOwner) { requests -&gt;&#10;            Log.d(&quot;OwnerHistory&quot;, &quot;Received ${requests.size} completed requests in fragment&quot;)&#10;&#10;            if (requests.isNotEmpty()) {&#10;                allCompletedRequests = requests&#10;                applyFilters() // respect any existing filters&#10;                recyclerView.visibility = View.VISIBLE&#10;                tvNoHistory.visibility = View.GONE&#10;            } else {&#10;                allCompletedRequests = emptyList()&#10;                recyclerView.visibility = View.GONE&#10;                tvNoHistory.visibility = View.VISIBLE&#10;                Toast.makeText(requireContext(), getString(R.string.no_completed_requests), Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;&#10;        // Fetch owner's completed requests&#10;        fetchCompletedRequests()&#10;&#10;        // Filter button opens a filter options menu&#10;        btnFilter.setOnClickListener {&#10;            showFilterMenu()&#10;        }&#10;&#10;        btnClear.setOnClickListener {&#10;            selectedStartDate = null&#10;            selectedEndDate = null&#10;            selectedNameQuery = null&#10;            selectedIdQuery = null&#10;            historyAdapter.updateRequests(allCompletedRequests)&#10;            if (allCompletedRequests.isEmpty()) {&#10;                recyclerView.visibility = View.GONE&#10;                tvNoHistory.visibility = View.VISIBLE&#10;            } else {&#10;                recyclerView.visibility = View.VISIBLE&#10;                tvNoHistory.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Export button&#10;        btnExportPdf.setOnClickListener {&#10;            maybeExportPdf()&#10;        }&#10;    }&#10;&#10;    private fun showFilterMenu() {&#10;        val options = arrayOf(&#10;            getString(R.string.filter_by_date_range),&#10;            getString(R.string.filter_by_customer_name),&#10;            getString(R.string.filter_by_request_id)&#10;        )&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(getString(R.string.action_filter))&#10;            .setItems(options) { _, which -&gt;&#10;                when (which) {&#10;                    0 -&gt; openDateRangePicker()&#10;                    1 -&gt; promptForCustomerName()&#10;                    2 -&gt; promptForRequestId()&#10;                }&#10;            }&#10;            .show()&#10;    }&#10;&#10;    private fun openDateRangePicker() {&#10;        val picker = MaterialDatePicker.Builder.dateRangePicker()&#10;            .setTitleText(getString(R.string.filter_by_date_range))&#10;            .build()&#10;&#10;        picker.addOnPositiveButtonClickListener { selection -&gt;&#10;            if (selection != null) {&#10;                val startMillis = selection.first&#10;                val endMillis = selection.second&#10;                if (startMillis != null &amp;&amp; endMillis != null) {&#10;                    // Normalize to start of day UTC to align with yyyy-MM-dd parsing&#10;                    selectedStartDate = Date.from(&#10;                        Instant.ofEpochMilli(startMillis).atZone(ZoneOffset.UTC)&#10;                            .toLocalDate().atStartOfDay().toInstant(ZoneOffset.UTC)&#10;                    )&#10;                    selectedEndDate = Date.from(&#10;                        Instant.ofEpochMilli(endMillis).atZone(ZoneOffset.UTC)&#10;                            .toLocalDate().atStartOfDay().toInstant(ZoneOffset.UTC)&#10;                    )&#10;                    applyFilters()&#10;                }&#10;            }&#10;        }&#10;        picker.show(parentFragmentManager, &quot;owner_history_date_range&quot;)&#10;    }&#10;&#10;    private fun promptForCustomerName() {&#10;        val input = EditText(requireContext()).apply {&#10;            hint = getString(R.string.enter_customer_name)&#10;            inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_FLAG_CAP_WORDS&#10;            setText(selectedNameQuery ?: &quot;&quot;)&#10;        }&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(getString(R.string.filter_by_customer_name))&#10;            .setView(input)&#10;            .setPositiveButton(R.string.apply) { _, _ -&gt;&#10;                selectedNameQuery = input.text.toString().trim().ifBlank { null }&#10;                applyFilters()&#10;            }&#10;            .setNegativeButton(R.string.cancel, null)&#10;            .setNeutralButton(R.string.action_clear) { _, _ -&gt;&#10;                selectedNameQuery = null&#10;                applyFilters()&#10;            }&#10;            .show()&#10;    }&#10;&#10;    private fun promptForRequestId() {&#10;        val input = EditText(requireContext()).apply {&#10;            hint = getString(R.string.enter_request_id)&#10;            inputType = InputType.TYPE_CLASS_NUMBER&#10;            setText(selectedIdQuery ?: &quot;&quot;)&#10;        }&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(getString(R.string.filter_by_request_id))&#10;            .setView(input)&#10;            .setPositiveButton(R.string.apply) { _, _ -&gt;&#10;                selectedIdQuery = input.text.toString().trim().ifBlank { null }&#10;                applyFilters()&#10;            }&#10;            .setNegativeButton(R.string.cancel, null)&#10;            .setNeutralButton(R.string.action_clear) { _, _ -&gt;&#10;                selectedIdQuery = null&#10;                applyFilters()&#10;            }&#10;            .show()&#10;    }&#10;&#10;    private fun fetchCompletedRequests() {&#10;        historyViewModel.fetchCompletedRequests()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        fetchCompletedRequests()&#10;    }&#10;&#10;    private fun parseDateFromRequest(request: Request): Date? {&#10;        val candidates = listOf(request.submittedAt, request.pickupDate, request.deliveryDate, request.dateUpdated, request.schedule)&#10;        for (c in candidates) {&#10;            if (!c.isNullOrBlank()) {&#10;                val s = if (c.length &gt;= 10) c.substring(0, 10) else c&#10;                try {&#10;                    return dateFormat.parse(s)&#10;                } catch (_: Exception) {&#10;                    // ignore&#10;                }&#10;            }&#10;        }&#10;        return null&#10;    }&#10;&#10;    private fun applyFilters() {&#10;        val startDate = selectedStartDate&#10;        val endDate = selectedEndDate&#10;        val nameQuery = selectedNameQuery&#10;        val idQuery = selectedIdQuery&#10;&#10;        if (startDate == null &amp;&amp; endDate == null &amp;&amp; nameQuery == null &amp;&amp; idQuery == null) {&#10;            historyAdapter.updateRequests(allCompletedRequests)&#10;            return&#10;        }&#10;&#10;        try {&#10;            val filtered = allCompletedRequests.filter { req -&gt;&#10;                val d = parseDateFromRequest(req)&#10;                val afterStart = startDate?.let { date -&gt; d?.let { !it.before(date) } ?: false } ?: true&#10;                val beforeEnd = endDate?.let { date -&gt; d?.let { !it.after(date) } ?: false } ?: true&#10;                val nameOk = nameQuery?.let { q -&gt; req.customerName.contains(q, ignoreCase = true) } ?: true&#10;                val idOk = idQuery?.let { q -&gt; req.requestID.toString().contains(q, ignoreCase = true) } ?: true&#10;                afterStart &amp;&amp; beforeEnd &amp;&amp; nameOk &amp;&amp; idOk&#10;            }&#10;&#10;            historyAdapter.updateRequests(filtered)&#10;&#10;            recyclerView.visibility = if (filtered.isEmpty()) View.GONE else View.VISIBLE&#10;            tvNoHistory.visibility = if (filtered.isEmpty()) View.VISIBLE else View.GONE&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;OwnerHistory&quot;, &quot;Error applying filters&quot;, e)&#10;            Toast.makeText(requireContext(), &quot;Invalid filters&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun maybeExportPdf() {&#10;        val currentList = historyAdapter.getRequests()&#10;        if (currentList.isEmpty()) {&#10;            Toast.makeText(requireContext(), getString(R.string.export_pdf_empty), Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.Q) {&#10;            val hasPermission = ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED&#10;            if (!hasPermission) {&#10;                pendingExportAfterPermission = true&#10;                requestPermissions(arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE), REQ_WRITE_EXTERNAL_STORAGE)&#10;                Toast.makeText(requireContext(), getString(R.string.storage_permission_required), Toast.LENGTH_SHORT).show()&#10;                return&#10;            }&#10;        }&#10;        exportPdf(currentList)&#10;    }&#10;&#10;    private fun exportPdf(requests: List&lt;Request&gt;) {&#10;        try {&#10;            val sdfFile = SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;, Locale.getDefault())&#10;            val fileName = &quot;owner_history_${sdfFile.format(Date())}.pdf&quot;&#10;&#10;            // Build PDF document&#10;            val doc = PdfDocument()&#10;            val pageWidth = 595 // A4 width in points (approx)&#10;            val pageHeight = 842 // A4 height in points (approx)&#10;&#10;            val titlePaint = Paint().apply {&#10;                isAntiAlias = true&#10;                textSize = 18f&#10;                typeface = Typeface.create(Typeface.DEFAULT, Typeface.BOLD)&#10;            }&#10;            val headerPaint = Paint().apply {&#10;                isAntiAlias = true&#10;                textSize = 12f&#10;                typeface = Typeface.create(Typeface.DEFAULT, Typeface.BOLD)&#10;            }&#10;            val textPaint = Paint().apply {&#10;                isAntiAlias = true&#10;                textSize = 11f&#10;            }&#10;            val linePaint = Paint().apply {&#10;                strokeWidth = 1f&#10;            }&#10;&#10;            var pageNumber = 1&#10;            var y = 0f&#10;            lateinit var currentPage: PdfDocument.Page&#10;            lateinit var canvas: Canvas&#10;&#10;            fun startNewPage() {&#10;                val pageInfo = PdfDocument.PageInfo.Builder(pageWidth, pageHeight, pageNumber).create()&#10;                currentPage = doc.startPage(pageInfo)&#10;                canvas = currentPage.canvas&#10;                y = 40f&#10;                // Title&#10;                canvas.drawText(&quot;Capstone – Owner Transaction History&quot;, 40f, y, titlePaint)&#10;                y += 30f&#10;                // Header row&#10;                var x = 40f&#10;                canvas.drawText(&quot;ID&quot;, x, y, headerPaint); x += 50f&#10;                canvas.drawText(&quot;Customer&quot;, x, y, headerPaint); x += 160f&#10;                canvas.drawText(&quot;Service&quot;, x, y, headerPaint); x += 130f&#10;                canvas.drawText(&quot;Date&quot;, x, y, headerPaint); x += 110f&#10;                canvas.drawText(&quot;Sacks&quot;, x, y, headerPaint); x += 60f&#10;                canvas.drawText(&quot;Amount&quot;, x, y, headerPaint)&#10;                // underline&#10;                y += 6f&#10;                canvas.drawLine(40f, y, (pageWidth - 40).toFloat(), y, linePaint)&#10;                y += 12f&#10;            }&#10;&#10;            startNewPage()&#10;&#10;            for (req in requests) {&#10;                if (y &gt; pageHeight - 60) {&#10;                    doc.finishPage(currentPage)&#10;                    pageNumber++&#10;                    startNewPage()&#10;                }&#10;                var x = 40f&#10;                canvas.drawText(req.requestID.toString(), x, y, textPaint); x += 50f&#10;                canvas.drawText(if (req.customerName.length &lt;= 18) req.customerName else req.customerName.substring(0,17) + &quot;…&quot;, x, y, textPaint); x += 160f&#10;                canvas.drawText(if (req.serviceName.length &lt;= 16) req.serviceName else req.serviceName.substring(0,15) + &quot;…&quot;, x, y, textPaint); x += 130f&#10;                val dateStr = req.dateUpdated?.let { if (it.length &gt;= 10) it.substring(0,10) else it }&#10;                    ?: req.deliveryDate?.let { if (it.length &gt;= 10) it.substring(0,10) else it }&#10;                    ?: req.submittedAt?.let { if (it.length &gt;= 10) it.substring(0,10) else it }&#10;                    ?: &quot;&quot;&#10;                canvas.drawText(dateStr, x, y, textPaint); x += 110f&#10;                canvas.drawText(req.sackQuantity.toString(), x, y, textPaint); x += 60f&#10;                val amt: Double? = req.paymentAmount&#10;                    ?: req.payment?.amount&#10;                    ?: req.payment?.amountString?.toDoubleOrNull()&#10;                val amtStr = if (amt != null) &quot;₱&quot; + String.format(Locale.getDefault(), &quot;%.2f&quot;, amt) else &quot;-&quot;&#10;                canvas.drawText(amtStr, x, y, textPaint)&#10;                y += 18f&#10;            }&#10;&#10;            // Close last page&#10;            doc.finishPage(currentPage)&#10;&#10;            // Save to storage&#10;            val outputStream: OutputStream?&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) {&#10;                val resolver = requireContext().contentResolver&#10;                val contentValues = ContentValues().apply {&#10;                    put(MediaStore.MediaColumns.DISPLAY_NAME, fileName)&#10;                    put(MediaStore.MediaColumns.MIME_TYPE, &quot;application/pdf&quot;)&#10;                    put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS + &quot;/Capstone&quot;)&#10;                }&#10;                val collection = MediaStore.Downloads.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY)&#10;                val savedUri = resolver.insert(collection, contentValues)&#10;                outputStream = savedUri?.let { resolver.openOutputStream(it) }&#10;            } else {&#10;                val downloads = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)&#10;                val dir = File(downloads, &quot;Capstone&quot;).apply { if (!exists()) mkdirs() }&#10;                val outFile = File(dir, fileName)&#10;                outputStream = FileOutputStream(outFile)&#10;            }&#10;&#10;            outputStream.use { os -&gt;&#10;                if (os == null) throw IllegalStateException(&quot;No output stream available&quot;)&#10;                doc.writeTo(os)&#10;            }&#10;            doc.close()&#10;&#10;            val shownName = fileName&#10;            Toast.makeText(requireContext(), getString(R.string.export_pdf_success, shownName), Toast.LENGTH_LONG).show()&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;OwnerHistory&quot;, &quot;Failed to export PDF&quot;, e)&#10;            Toast.makeText(requireContext(), getString(R.string.export_pdf_error), Toast.LENGTH_LONG).show()&#10;        }&#10;    }&#10;&#10;    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array&lt;out String&gt;, grantResults: IntArray) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults)&#10;        if (requestCode == REQ_WRITE_EXTERNAL_STORAGE) {&#10;            val granted = grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED&#10;            if (granted &amp;&amp; pendingExportAfterPermission) {&#10;                pendingExportAfterPermission = false&#10;                val list = historyAdapter.getRequests()&#10;                if (list.isNotEmpty()) exportPdf(list)&#10;            } else {&#10;                pendingExportAfterPermission = false&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_messages.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_messages.xml" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvConversations&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvEmpty&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:text=&quot;No conversations&quot;&#10;        android:visibility=&quot;gone&quot;/&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Capstone&lt;/string&gt;&#10;    &lt;!-- TODO: Remove or change this placeholder text --&gt;&#10;    &lt;string name=&quot;hello_blank_fragment&quot;&gt;Hello blank fragment&lt;/string&gt;&#10;    &lt;string name=&quot;title_activity_login&quot;&gt;LoginActivity&lt;/string&gt;&#10;    &lt;string name=&quot;prompt_email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;prompt_password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;action_sign_in&quot;&gt;Sign in or register&lt;/string&gt;&#10;    &lt;string name=&quot;action_sign_in_short&quot;&gt;Sign in&lt;/string&gt;&#10;    &lt;string name=&quot;welcome&quot;&gt;&quot;Welcome !&quot;&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_username&quot;&gt;Not a valid username&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_password&quot;&gt;Password must be &amp;gt;5 characters&lt;/string&gt;&#10;    &lt;string name=&quot;login_failed&quot;&gt;&quot;Login failed&quot;&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close navigation drawer&lt;/string&gt;&#10;&#10;    &lt;!-- Labels for customer track item --&gt;&#10;    &lt;string name=&quot;label_request_id&quot;&gt;Request ID:&lt;/string&gt;&#10;    &lt;string name=&quot;label_date_requested&quot;&gt;Date Requested:&lt;/string&gt;&#10;    &lt;string name=&quot;label_status&quot;&gt;Status:&lt;/string&gt;&#10;    &lt;string name=&quot;more&quot;&gt;More&lt;/string&gt;&#10;    &lt;string name=&quot;mark_as_complete&quot;&gt;Mark as Complete&lt;/string&gt;&#10;&#10;    &lt;!-- Formatted strings (use these in code to avoid concatenation) --&gt;&#10;    &lt;string name=&quot;request_id_format&quot;&gt;Request ID: %1$d&lt;/string&gt;&#10;    &lt;string name=&quot;date_requested_format&quot;&gt;Date Requested: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;sack_qty_format&quot;&gt;Sack Quantity: %1$d&lt;/string&gt;&#10;    &lt;string name=&quot;service_format&quot;&gt;Service: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;pickup_location_format&quot;&gt;Pickup Location: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;delivery_location_format&quot;&gt;Delivery Location: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;status_format&quot;&gt;Status: %1$s&lt;/string&gt;&#10;&#10;    &lt;!-- Dialog labels --&gt;&#10;    &lt;string name=&quot;request_details_title&quot;&gt;Request Details&lt;/string&gt;&#10;    &lt;string name=&quot;label_customer&quot;&gt;Customer:&lt;/string&gt;&#10;    &lt;string name=&quot;label_sacks&quot;&gt;Sacks:&lt;/string&gt;&#10;    &lt;string name=&quot;label_services&quot;&gt;Services:&lt;/string&gt;&#10;    &lt;string name=&quot;label_schedule&quot;&gt;Pickup Schedule:&lt;/string&gt;&#10;    &lt;string name=&quot;label_pickup_location&quot;&gt;Pickup Location:&lt;/string&gt;&#10;    &lt;string name=&quot;label_delivery_location&quot;&gt;Delivery Location:&lt;/string&gt;&#10;    &lt;string name=&quot;label_comment&quot;&gt;Comment:&lt;/string&gt;&#10;    &lt;string name=&quot;label_submitted_at&quot;&gt;Submitted At:&lt;/string&gt;&#10;    &lt;string name=&quot;label_progress&quot;&gt;Progress:&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;customer_format&quot;&gt;Customer: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;sacks_format&quot;&gt;Sacks: %1$d&lt;/string&gt;&#10;    &lt;string name=&quot;services_format&quot;&gt;Services: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;schedule_format&quot;&gt;Pickup Schedule: %1$s&lt;/string&gt;&#10;    &lt;!-- Owner track uses a shorter label 'Schedule:' per request --&gt;&#10;    &lt;string name=&quot;label_schedule_owner&quot;&gt;Schedule:&lt;/string&gt;&#10;    &lt;string name=&quot;schedule_format_owner&quot;&gt;Schedule: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;comment_format&quot;&gt;Comment: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;submitted_at_format&quot;&gt;Submitted At: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;close&quot;&gt;Close&lt;/string&gt;&#10;&#10;    &lt;!-- Progress --&gt;&#10;    &lt;string name=&quot;progress_format&quot;&gt;Progress: %1$d%%&lt;/string&gt;&#10;&#10;    &lt;!-- Customer profile strings --&gt;&#10;    &lt;string name=&quot;nav_home&quot;&gt;Home&lt;/string&gt;&#10;    &lt;string name=&quot;nav_request&quot;&gt;Request&lt;/string&gt;&#10;    &lt;string name=&quot;nav_track&quot;&gt;Track&lt;/string&gt;&#10;    &lt;string name=&quot;nav_history&quot;&gt;History&lt;/string&gt;&#10;    &lt;string name=&quot;nav_profile&quot;&gt;Profile&lt;/string&gt;&#10;    &lt;string name=&quot;nav_logout&quot;&gt;Logout&lt;/string&gt;&#10;    &lt;string name=&quot;nav_messages&quot;&gt;Messages&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;profile_title&quot;&gt;Profile&lt;/string&gt;&#10;    &lt;string name=&quot;hint_first_name&quot;&gt;First name&lt;/string&gt;&#10;    &lt;string name=&quot;hint_last_name&quot;&gt;Last name&lt;/string&gt;&#10;    &lt;string name=&quot;hint_email&quot;&gt;Email address&lt;/string&gt;&#10;    &lt;string name=&quot;hint_contact&quot;&gt;Contact number&lt;/string&gt;&#10;    &lt;string name=&quot;hint_address&quot;&gt;Home address&lt;/string&gt;&#10;    &lt;string name=&quot;action_save&quot;&gt;Save&lt;/string&gt;&#10;    &lt;string name=&quot;change_password_title&quot;&gt;Change password&lt;/string&gt;&#10;    &lt;string name=&quot;hint_old_password&quot;&gt;Old password&lt;/string&gt;&#10;    &lt;string name=&quot;hint_new_password&quot;&gt;New password&lt;/string&gt;&#10;    &lt;string name=&quot;action_change_password&quot;&gt;Change password&lt;/string&gt;&#10;&#10;    &lt;!-- Profile labels (extracted) --&gt;&#10;    &lt;string name=&quot;label_first_name&quot;&gt;First name:&lt;/string&gt;&#10;    &lt;string name=&quot;label_last_name&quot;&gt;Last name:&lt;/string&gt;&#10;    &lt;string name=&quot;label_email&quot;&gt;Email:&lt;/string&gt;&#10;    &lt;string name=&quot;label_contact&quot;&gt;Contact number:&lt;/string&gt;&#10;    &lt;string name=&quot;label_address&quot;&gt;Home address:&lt;/string&gt;&#10;    &lt;string name=&quot;label_contact_number&quot;&gt;Contact Number:&lt;/string&gt;&#10;&#10;    &lt;!-- Validation messages --&gt;&#10;    &lt;string name=&quot;error_first_name_required&quot;&gt;Please enter your first name&lt;/string&gt;&#10;    &lt;string name=&quot;error_last_name_required&quot;&gt;Please enter your last name&lt;/string&gt;&#10;    &lt;string name=&quot;error_contact_required&quot;&gt;Please enter your 11-digit contact number&lt;/string&gt;&#10;    &lt;string name=&quot;error_contact_invalid&quot;&gt;Contact must be 11 digits&lt;/string&gt;&#10;    &lt;string name=&quot;error_address_required&quot;&gt;Please enter your home address&lt;/string&gt;&#10;    &lt;string name=&quot;error_new_password_short&quot;&gt;New password must be at least 8 characters&lt;/string&gt;&#10;    &lt;string name=&quot;saving_profile&quot;&gt;Saving…&lt;/string&gt;&#10;    &lt;string name=&quot;saving_password&quot;&gt;Updating password…&lt;/string&gt;&#10;&#10;    &lt;!-- New password confirmation --&gt;&#10;    &lt;string name=&quot;hint_new_password_confirm&quot;&gt;Confirm new password&lt;/string&gt;&#10;    &lt;string name=&quot;error_password_mismatch&quot;&gt;Passwords do not match&lt;/string&gt;&#10;    &lt;string name=&quot;error_old_password_required&quot;&gt;Please enter your current password&lt;/string&gt;&#10;    &lt;string name=&quot;not_set&quot;&gt;Not set&lt;/string&gt;&#10;    &lt;string name=&quot;not_available&quot;&gt;Not available&lt;/string&gt;&#10;    &lt;string name=&quot;server_returned_raw&quot;&gt;Server returned raw: %1$s&lt;/string&gt;&#10;&#10;    &lt;!-- Labels used in owner track item layout --&gt;&#10;    &lt;string name=&quot;rb_delivery_boy_pickup&quot;&gt;Rider going for Pickup&lt;/string&gt;&#10;    &lt;string name=&quot;rb_waiting_customer_dropoff&quot;&gt;Waiting for Customer to drop the Palay&lt;/string&gt;&#10;    &lt;string name=&quot;rb_pending&quot;&gt;Pending&lt;/string&gt;&#10;    &lt;string name=&quot;rb_processing&quot;&gt;Processing&lt;/string&gt;&#10;    &lt;string name=&quot;rb_out_for_delivery&quot;&gt;Out for Delivery&lt;/string&gt;&#10;    &lt;string name=&quot;rb_milling_done&quot;&gt;Milling Done&lt;/string&gt;&#10;    &lt;string name=&quot;rb_delivered&quot;&gt;Delivered&lt;/string&gt;&#10;    &lt;string name=&quot;rb_waiting_customer_pickup&quot;&gt;Waiting for Customer to claim&lt;/string&gt;&#10;    &lt;string name=&quot;submit&quot;&gt;Submit&lt;/string&gt;&#10;&#10;    &lt;!-- Add title string used in owner fragment --&gt;&#10;    &lt;string name=&quot;title_track&quot;&gt;Update Status&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;partner_name&quot;&gt;Partner Name&lt;/string&gt;&#10;&#10;    &lt;!-- Added for chat fragment --&gt;&#10;    &lt;string name=&quot;copy_debug&quot;&gt;Copy&lt;/string&gt;&#10;    &lt;string name=&quot;hint_type_message&quot;&gt;Type a message…&lt;/string&gt;&#10;    &lt;string name=&quot;send&quot;&gt;Send&lt;/string&gt;&#10;    &lt;!-- Debug UI strings --&gt;&#10;    &lt;string name=&quot;waiting_debug&quot;&gt;Waiting for debug output…&lt;/string&gt;&#10;    &lt;string name=&quot;messages_label&quot;&gt;Messages:\n&lt;/string&gt;&#10;    &lt;string name=&quot;show_debug&quot;&gt;Show debug&lt;/string&gt;&#10;    &lt;string name=&quot;hide_debug&quot;&gt;Hide debug&lt;/string&gt;&#10;    &lt;string name=&quot;requesting_conversation_id&quot;&gt;Requesting conversationID=%1$s for user=%2$d&lt;/string&gt;&#10;    &lt;string name=&quot;requesting_conversation_other&quot;&gt;Requesting conversation with otherUserID=%1$d for user=%2$d&lt;/string&gt;&#10;    &lt;string name=&quot;use_signup_address&quot;&gt;Use my signup address&lt;/string&gt;&#10;    &lt;string name=&quot;label_pickup_date&quot;&gt;Pickup Date&lt;/string&gt;&#10;    &lt;string name=&quot;hint_pickup_date&quot;&gt;Select pickup date&lt;/string&gt;&#10;    &lt;string name=&quot;next&quot;&gt;Next&lt;/string&gt;&#10;    &lt;string name=&quot;bg_rice_field&quot;&gt;Rice field background&lt;/string&gt;&#10;&#10;    &lt;!-- Milling fragment strings --&gt;&#10;    &lt;string name=&quot;step_title&quot;&gt;Step 1 of 4:&lt;/string&gt;&#10;    &lt;string name=&quot;details_title&quot;&gt;Details of Rice Milling&lt;/string&gt;&#10;    &lt;string name=&quot;step_progress_text&quot;&gt;1/4&lt;/string&gt;&#10;    &lt;string name=&quot;select_milling_service&quot;&gt;Select the type of rice milling service:&lt;/string&gt;&#10;    &lt;string name=&quot;currency_dollar&quot;&gt;$&lt;/string&gt;&#10;    &lt;string name=&quot;milling_for_fee&quot;&gt;Milling for a fee&lt;/string&gt;&#10;    &lt;string name=&quot;label_number_of_sacks&quot;&gt;Number of sacks:&lt;/string&gt;&#10;    &lt;string name=&quot;minus&quot;&gt;-&lt;/string&gt;&#10;    &lt;string name=&quot;plus&quot;&gt;+&lt;/string&gt;&#10;    &lt;string name=&quot;sack_default_count&quot;&gt;1&lt;/string&gt;&#10;    &lt;string name=&quot;service_rates&quot;&gt;Service rates&lt;/string&gt;&#10;    &lt;string name=&quot;rate_per_sack_label&quot;&gt;Rate per sack:&lt;/string&gt;&#10;    &lt;string name=&quot;rate_per_sack_value&quot;&gt;₱20.00&lt;/string&gt;&#10;&#10;    &lt;!-- Service rates layout strings --&gt;&#10;    &lt;string name=&quot;sr_pabayo&quot;&gt;Pabayo&lt;/string&gt;&#10;    &lt;string name=&quot;sr_pabayo_rate&quot;&gt;2.50 / kilo&lt;/string&gt;&#10;    &lt;string name=&quot;sr_pickup&quot;&gt;Pick up&lt;/string&gt;&#10;    &lt;string name=&quot;sr_pickup_rate&quot;&gt;10.00&lt;/string&gt;&#10;    &lt;string name=&quot;sr_delivery&quot;&gt;Delivery&lt;/string&gt;&#10;    &lt;string name=&quot;sr_delivery_rate&quot;&gt;10.00&lt;/string&gt;&#10;    &lt;string name=&quot;sr_feeds_conversion&quot;&gt;Feeds Conversion&lt;/string&gt;&#10;    &lt;string name=&quot;sr_feeds_rate1&quot;&gt;220.00 / 1 kilo&lt;/string&gt;&#10;    &lt;string name=&quot;sr_feeds_rate2&quot;&gt;110.00 / ½ kilo&lt;/string&gt;&#10;&#10;    &lt;!-- Step labels for wizard fragments --&gt;&#10;    &lt;string name=&quot;step1_title&quot;&gt;Step 1 of 4:&lt;/string&gt;&#10;    &lt;string name=&quot;step2_title&quot;&gt;Step 2 of 4:&lt;/string&gt;&#10;    &lt;string name=&quot;step3_title&quot;&gt;Step 3 of 4:&lt;/string&gt;&#10;    &lt;string name=&quot;step4_title&quot;&gt;Step 4 of 4:&lt;/string&gt;&#10;&#10;    &lt;!-- Delivery and contact information labels used by updated layouts --&gt;&#10;    &lt;string name=&quot;delivery_service_title&quot;&gt;Delivery Service&lt;/string&gt;&#10;    &lt;!-- Added missing strings referenced by layouts --&gt;&#10;    &lt;string name=&quot;pickup_service_title&quot;&gt;Pick up Service&lt;/string&gt;&#10;    &lt;string name=&quot;step2_progress&quot;&gt;2/4&lt;/string&gt;&#10;    &lt;string name=&quot;select_completed&quot;&gt;Select completed&lt;/string&gt;&#10;    &lt;string name=&quot;pickup_from_my_location&quot;&gt;Pick up the palay from my location&lt;/string&gt;&#10;    &lt;string name=&quot;dropoff_at_facility&quot;&gt;I will drop off the palay at your facility&lt;/string&gt;&#10;    &lt;string name=&quot;enter_your_location&quot;&gt;Enter your location&lt;/string&gt;&#10;    &lt;string name=&quot;contact_number_loading&quot;&gt;Loading…&lt;/string&gt;&#10;    &lt;string name=&quot;contact_number_format&quot;&gt;Contact number: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;action_call&quot;&gt;Call&lt;/string&gt;&#10;    &lt;string name=&quot;action_message&quot;&gt;Message&lt;/string&gt;&#10;    &lt;string name=&quot;action_view_profile&quot;&gt;View profile&lt;/string&gt;&#10;    &lt;string name=&quot;action_edit&quot;&gt;Edit&lt;/string&gt;&#10;    &lt;string name=&quot;step3_progress&quot;&gt;3/4&lt;/string&gt;&#10;    &lt;string name=&quot;step4_progress&quot;&gt;4/4&lt;/string&gt;&#10;    &lt;string name=&quot;delivery_question&quot;&gt;How would you like to receive your milled rice?&lt;/string&gt;&#10;    &lt;string name=&quot;rb_deliver_to_location&quot;&gt;Deliver the milled rice to my location&lt;/string&gt;&#10;    &lt;string name=&quot;rb_pickup_from_facility&quot;&gt;I will pick up the milled rice from your facility&lt;/string&gt;&#10;    &lt;string name=&quot;label_delivery_address&quot;&gt;Enter your delivery address&lt;/string&gt;&#10;    &lt;string name=&quot;hint_delivery_address&quot;&gt;Enter your delivery address&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;contact_details_title&quot;&gt;Contact Details&lt;/string&gt;&#10;    &lt;string name=&quot;contact_information&quot;&gt;Contact Information&lt;/string&gt;&#10;    &lt;string name=&quot;label_name&quot;&gt;Name&lt;/string&gt;&#10;    &lt;string name=&quot;hint_enter_name&quot;&gt;Enter your name&lt;/string&gt;&#10;    &lt;string name=&quot;hint_enter_contact_number&quot;&gt;Enter your contact number&lt;/string&gt;&#10;    &lt;string name=&quot;additional_comments_optional&quot;&gt;Additional Comments (Optional)&lt;/string&gt;&#10;    &lt;string name=&quot;hint_message_for_owner&quot;&gt;Message for the owner&lt;/string&gt;&#10;&#10;    &lt;!-- Strings added for owner and queue layouts --&gt;&#10;    &lt;string name=&quot;queue_status&quot;&gt;Queue Status&lt;/string&gt;&#10;    &lt;string name=&quot;processing_label&quot;&gt;Processing&lt;/string&gt;&#10;    &lt;string name=&quot;pending_label&quot;&gt;Pending&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;request_title&quot;&gt;Request&lt;/string&gt;&#10;    &lt;string name=&quot;home_title&quot;&gt;Homepage&lt;/string&gt;&#10;    &lt;string name=&quot;btn_view_requests&quot;&gt;View Requests&lt;/string&gt;&#10;    &lt;string name=&quot;btn_view_history&quot;&gt;View Transaction History&lt;/string&gt;&#10;    &lt;string name=&quot;btn_view_messages&quot;&gt;View Messages&lt;/string&gt;&#10;    &lt;string name=&quot;messages_badge_zero&quot;&gt;0&lt;/string&gt;&#10;&#10;    &lt;!-- New strings added to support recent layout refactors --&gt;&#10;    &lt;string name=&quot;start_date_hint&quot;&gt;Start date&lt;/string&gt;&#10;    &lt;string name=&quot;end_date_hint&quot;&gt;End date&lt;/string&gt;&#10;    &lt;string name=&quot;action_filter&quot;&gt;Filter&lt;/string&gt;&#10;    &lt;string name=&quot;action_clear&quot;&gt;Clear&lt;/string&gt;&#10;    &lt;string name=&quot;no_completed_requests&quot;&gt;No completed requests found&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;feeds_conversion_question&quot;&gt;Would you like to convert your milling by-products (rice hulls, bran) into animal feeds?&lt;/string&gt;&#10;    &lt;string name=&quot;yes&quot;&gt;Yes&lt;/string&gt;&#10;    &lt;string name=&quot;no&quot;&gt;No&lt;/string&gt;&#10;    &lt;string name=&quot;feeds_conversion_explanation&quot;&gt;Converting by-products can provide a sustainable stream. We process the hulls and bran into nutrient-rich feed pellets, ready for sale or your own use.&lt;/string&gt;&#10;&#10;    &lt;!-- Authentication / Signup strings --&gt;&#10;    &lt;string name=&quot;create_account&quot;&gt;Create Account&lt;/string&gt;&#10;    &lt;string name=&quot;identification&quot;&gt;Identification&lt;/string&gt;&#10;    &lt;string name=&quot;hint_password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;hint_confirm_password&quot;&gt;Confirm password&lt;/string&gt;&#10;    &lt;string name=&quot;action_sign_up&quot;&gt;Sign Up&lt;/string&gt;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Already have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;choose_photo&quot;&gt;Choose photo&lt;/string&gt;&#10;    &lt;string name=&quot;sign_in&quot;&gt;Sign in&lt;/string&gt;&#10;    &lt;string name=&quot;content_desc_id_photo&quot;&gt;Identification photo&lt;/string&gt;&#10;    &lt;string name=&quot;content_desc_back_button&quot;&gt;Back&lt;/string&gt;&#10;&#10;    &lt;!-- Added runtime-configurable API base URL. Change this to your server's address. For emulator use 10.0.2.2 --&gt;&#10;    &lt;!-- For debugging via adb reverse: device localhost will be forwarded to host's port 8000 --&gt;&#10;    &lt;string name=&quot;api_base_url&quot;&gt;http://192.168.1.15:8000/&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;pickup_preparing_message&quot;&gt;Driver is preparing for pickup. You\'ll be able to update status after pickup is recorded.&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;service_label&quot;&gt;Service:&lt;/string&gt;&#10;&#10;    &lt;!-- New strings for delivery and pickup status/buttons --&gt;&#10;    &lt;string name=&quot;status_pickup_ongoing&quot;&gt;Pickup ongoing&lt;/string&gt;&#10;    &lt;string name=&quot;status_pickup_done&quot;&gt;Pickup done&lt;/string&gt;&#10;    &lt;string name=&quot;status_ongoing_delivery&quot;&gt;Ongoing delivery&lt;/string&gt;&#10;    &lt;string name=&quot;status_delivery_done&quot;&gt;Delivery done&lt;/string&gt;&#10;    &lt;string name=&quot;status_milling_ready_delivery&quot;&gt;Milling done – ready for delivery&lt;/string&gt;&#10;    &lt;string name=&quot;action_initiate_delivery&quot;&gt;Initiate Delivery&lt;/string&gt;&#10;    &lt;string name=&quot;action_delivery_done&quot;&gt;Delivery Done&lt;/string&gt;&#10;&#10;    &lt;!-- Queue dialog messages --&gt;&#10;    &lt;string name=&quot;no_processing_requests&quot;&gt;No processing requests&lt;/string&gt;&#10;    &lt;string name=&quot;no_pending_requests&quot;&gt;No pending requests&lt;/string&gt;&#10;    &lt;string name=&quot;request_number&quot;&gt;Request #%1$s&lt;/string&gt;&#10;    &lt;string name=&quot;debug_other_statuses_present&quot;&gt;(debug) Other statuses present: %1$s&lt;/string&gt;&#10;&#10;    &lt;!-- Indicate when only the current customer’s requests are being shown due to global access not being available --&gt;&#10;    &lt;string name=&quot;queue_scope_customer_only&quot;&gt;Showing your requests&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;total_processing_count&quot;&gt;Total: %1$d&lt;/string&gt;&#10;    &lt;string name=&quot;total_pending_count&quot;&gt;Total: %1$d&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;label_pickup_time&quot;&gt;Pickup Time (optional)&lt;/string&gt;&#10;    &lt;string name=&quot;hint_pickup_time&quot;&gt;Select pickup time&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;beams_instance_id&quot;&gt;REPLACE_WITH_YOUR_BEAMS_INSTANCE_ID&lt;/string&gt;&#10;&#10;    &lt;!-- New string for status-updated timestamp in customer details dialog --&gt;&#10;    &lt;string name=&quot;status_updated_at&quot;&gt;Status updated: %1$s&lt;/string&gt;&#10;&#10;    &lt;!-- New strings for status change timeline --&gt;&#10;    &lt;string name=&quot;status_timeline_header&quot;&gt;Status timeline&lt;/string&gt;&#10;    &lt;string name=&quot;status_timeline_entry&quot;&gt;%1$s — %2$s&lt;/string&gt;&#10;&#10;    &lt;!-- Added strings for owner-side payment amount input when marking Milling Done --&gt;&#10;    &lt;string name=&quot;set_payment_amount_title&quot;&gt;Set Payment Amount&lt;/string&gt;&#10;    &lt;string name=&quot;set_payment_amount_message&quot;&gt;Enter the total amount the customer has to pay based on the milled rice weight.&lt;/string&gt;&#10;    &lt;string name=&quot;enter_amount_hint&quot;&gt;Amount (e.g., 1234.50)&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_amount_message&quot;&gt;Please enter a valid non-negative amount&lt;/string&gt;&#10;    &lt;string name=&quot;payment_amount_set_and_status_updated&quot;&gt;Amount saved and status updated&lt;/string&gt;&#10;    &lt;string name=&quot;confirm&quot;&gt;Confirm&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Cancel&lt;/string&gt;&#10;&#10;    &lt;!-- Payment amount display --&gt;&#10;    &lt;string name=&quot;label_payment_amount&quot;&gt;Payment amount:&lt;/string&gt;&#10;    &lt;string name=&quot;payment_amount_format&quot;&gt;Payment amount: ₱%1$.2f&lt;/string&gt;&#10;    &lt;string name=&quot;payment_amount_not_set&quot;&gt;Payment amount: Not set&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;completed_on_format&quot;&gt;Completed on: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;view_details&quot;&gt;View Details&lt;/string&gt;&#10;    &lt;string name=&quot;hide_details&quot;&gt;Hide Details&lt;/string&gt;&#10;    &lt;string name=&quot;completed_label&quot;&gt;Completed&lt;/string&gt;&#10;&#10;    &lt;!-- Owner-side: kg input and auto calculation (₱10/kg) --&gt;&#10;    &lt;string name=&quot;set_kg_and_amount_title&quot;&gt;Milling output&lt;/string&gt;&#10;    &lt;string name=&quot;set_kg_and_amount_message&quot;&gt;Enter the rice weight (in kilograms). Amount will be auto-calculated at ₱10.00 per kilo. You can adjust the amount if needed.&lt;/string&gt;&#10;    &lt;string name=&quot;hint_milled_kg&quot;&gt;Rice weight (kg)&lt;/string&gt;&#10;    &lt;string name=&quot;hint_amount_auto&quot;&gt;Amount (auto)&lt;/string&gt;&#10;    &lt;string name=&quot;rate_per_kilo_note&quot;&gt;Rate: ₱10.00 / kilo&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_kg_message&quot;&gt;Please enter a valid milled weight in kilograms&lt;/string&gt;&#10;    &lt;string name=&quot;milled_kg_format&quot;&gt;Total rice kg: %1$.2f kg&lt;/string&gt;&#10;&#10;    &lt;!-- Export to PDF strings --&gt;&#10;    &lt;string name=&quot;action_export_pdf&quot;&gt;Export PDF&lt;/string&gt;&#10;    &lt;string name=&quot;export_pdf_empty&quot;&gt;Nothing to export&lt;/string&gt;&#10;    &lt;string name=&quot;export_pdf_success&quot;&gt;Saved to Downloads: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;export_pdf_error&quot;&gt;Failed to save PDF&lt;/string&gt;&#10;    &lt;string name=&quot;storage_permission_required&quot;&gt;Storage permission is required to save PDF&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Capstone&lt;/string&gt;&#10;    &lt;!-- TODO: Remove or change this placeholder text --&gt;&#10;    &lt;string name=&quot;hello_blank_fragment&quot;&gt;Hello blank fragment&lt;/string&gt;&#10;    &lt;string name=&quot;title_activity_login&quot;&gt;LoginActivity&lt;/string&gt;&#10;    &lt;string name=&quot;prompt_email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;prompt_password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;action_sign_in&quot;&gt;Sign in or register&lt;/string&gt;&#10;    &lt;string name=&quot;action_sign_in_short&quot;&gt;Sign in&lt;/string&gt;&#10;    &lt;string name=&quot;welcome&quot;&gt;&quot;Welcome !&quot;&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_username&quot;&gt;Not a valid username&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_password&quot;&gt;Password must be &amp;gt;5 characters&lt;/string&gt;&#10;    &lt;string name=&quot;login_failed&quot;&gt;&quot;Login failed&quot;&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close navigation drawer&lt;/string&gt;&#10;&#10;    &lt;!-- Labels for customer track item --&gt;&#10;    &lt;string name=&quot;label_request_id&quot;&gt;Request ID:&lt;/string&gt;&#10;    &lt;string name=&quot;label_date_requested&quot;&gt;Date Requested:&lt;/string&gt;&#10;    &lt;string name=&quot;label_status&quot;&gt;Status:&lt;/string&gt;&#10;    &lt;string name=&quot;more&quot;&gt;More&lt;/string&gt;&#10;    &lt;string name=&quot;mark_as_complete&quot;&gt;Mark as Complete&lt;/string&gt;&#10;&#10;    &lt;!-- Formatted strings (use these in code to avoid concatenation) --&gt;&#10;    &lt;string name=&quot;request_id_format&quot;&gt;Request ID: %1$d&lt;/string&gt;&#10;    &lt;string name=&quot;date_requested_format&quot;&gt;Date Requested: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;sack_qty_format&quot;&gt;Sack Quantity: %1$d&lt;/string&gt;&#10;    &lt;string name=&quot;service_format&quot;&gt;Service: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;pickup_location_format&quot;&gt;Pickup Location: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;delivery_location_format&quot;&gt;Delivery Location: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;status_format&quot;&gt;Status: %1$s&lt;/string&gt;&#10;&#10;    &lt;!-- Dialog labels --&gt;&#10;    &lt;string name=&quot;request_details_title&quot;&gt;Request Details&lt;/string&gt;&#10;    &lt;string name=&quot;label_customer&quot;&gt;Customer:&lt;/string&gt;&#10;    &lt;string name=&quot;label_sacks&quot;&gt;Sacks:&lt;/string&gt;&#10;    &lt;string name=&quot;label_services&quot;&gt;Services:&lt;/string&gt;&#10;    &lt;string name=&quot;label_schedule&quot;&gt;Pickup Schedule:&lt;/string&gt;&#10;    &lt;string name=&quot;label_pickup_location&quot;&gt;Pickup Location:&lt;/string&gt;&#10;    &lt;string name=&quot;label_delivery_location&quot;&gt;Delivery Location:&lt;/string&gt;&#10;    &lt;string name=&quot;label_comment&quot;&gt;Comment:&lt;/string&gt;&#10;    &lt;string name=&quot;label_submitted_at&quot;&gt;Submitted At:&lt;/string&gt;&#10;    &lt;string name=&quot;label_progress&quot;&gt;Progress:&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;customer_format&quot;&gt;Customer: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;sacks_format&quot;&gt;Sacks: %1$d&lt;/string&gt;&#10;    &lt;string name=&quot;services_format&quot;&gt;Services: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;schedule_format&quot;&gt;Pickup Schedule: %1$s&lt;/string&gt;&#10;    &lt;!-- Owner track uses a shorter label 'Schedule:' per request --&gt;&#10;    &lt;string name=&quot;label_schedule_owner&quot;&gt;Schedule:&lt;/string&gt;&#10;    &lt;string name=&quot;schedule_format_owner&quot;&gt;Schedule: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;comment_format&quot;&gt;Comment: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;submitted_at_format&quot;&gt;Submitted At: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;close&quot;&gt;Close&lt;/string&gt;&#10;&#10;    &lt;!-- Progress --&gt;&#10;    &lt;string name=&quot;progress_format&quot;&gt;Progress: %1$d%%&lt;/string&gt;&#10;&#10;    &lt;!-- Customer profile strings --&gt;&#10;    &lt;string name=&quot;nav_home&quot;&gt;Home&lt;/string&gt;&#10;    &lt;string name=&quot;nav_request&quot;&gt;Request&lt;/string&gt;&#10;    &lt;string name=&quot;nav_track&quot;&gt;Track&lt;/string&gt;&#10;    &lt;string name=&quot;nav_history&quot;&gt;History&lt;/string&gt;&#10;    &lt;string name=&quot;nav_profile&quot;&gt;Profile&lt;/string&gt;&#10;    &lt;string name=&quot;nav_logout&quot;&gt;Logout&lt;/string&gt;&#10;    &lt;string name=&quot;nav_messages&quot;&gt;Messages&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;profile_title&quot;&gt;Profile&lt;/string&gt;&#10;    &lt;string name=&quot;hint_first_name&quot;&gt;First name&lt;/string&gt;&#10;    &lt;string name=&quot;hint_last_name&quot;&gt;Last name&lt;/string&gt;&#10;    &lt;string name=&quot;hint_email&quot;&gt;Email address&lt;/string&gt;&#10;    &lt;string name=&quot;hint_contact&quot;&gt;Contact number&lt;/string&gt;&#10;    &lt;string name=&quot;hint_address&quot;&gt;Home address&lt;/string&gt;&#10;    &lt;string name=&quot;action_save&quot;&gt;Save&lt;/string&gt;&#10;    &lt;string name=&quot;change_password_title&quot;&gt;Change password&lt;/string&gt;&#10;    &lt;string name=&quot;hint_old_password&quot;&gt;Old password&lt;/string&gt;&#10;    &lt;string name=&quot;hint_new_password&quot;&gt;New password&lt;/string&gt;&#10;    &lt;string name=&quot;action_change_password&quot;&gt;Change password&lt;/string&gt;&#10;&#10;    &lt;!-- Profile labels (extracted) --&gt;&#10;    &lt;string name=&quot;label_first_name&quot;&gt;First name:&lt;/string&gt;&#10;    &lt;string name=&quot;label_last_name&quot;&gt;Last name:&lt;/string&gt;&#10;    &lt;string name=&quot;label_email&quot;&gt;Email:&lt;/string&gt;&#10;    &lt;string name=&quot;label_contact&quot;&gt;Contact number:&lt;/string&gt;&#10;    &lt;string name=&quot;label_address&quot;&gt;Home address:&lt;/string&gt;&#10;    &lt;string name=&quot;label_contact_number&quot;&gt;Contact Number:&lt;/string&gt;&#10;&#10;    &lt;!-- Validation messages --&gt;&#10;    &lt;string name=&quot;error_first_name_required&quot;&gt;Please enter your first name&lt;/string&gt;&#10;    &lt;string name=&quot;error_last_name_required&quot;&gt;Please enter your last name&lt;/string&gt;&#10;    &lt;string name=&quot;error_contact_required&quot;&gt;Please enter your 11-digit contact number&lt;/string&gt;&#10;    &lt;string name=&quot;error_contact_invalid&quot;&gt;Contact must be 11 digits&lt;/string&gt;&#10;    &lt;string name=&quot;error_address_required&quot;&gt;Please enter your home address&lt;/string&gt;&#10;    &lt;string name=&quot;error_new_password_short&quot;&gt;New password must be at least 8 characters&lt;/string&gt;&#10;    &lt;string name=&quot;saving_profile&quot;&gt;Saving…&lt;/string&gt;&#10;    &lt;string name=&quot;saving_password&quot;&gt;Updating password…&lt;/string&gt;&#10;&#10;    &lt;!-- New password confirmation --&gt;&#10;    &lt;string name=&quot;hint_new_password_confirm&quot;&gt;Confirm new password&lt;/string&gt;&#10;    &lt;string name=&quot;error_password_mismatch&quot;&gt;Passwords do not match&lt;/string&gt;&#10;    &lt;string name=&quot;error_old_password_required&quot;&gt;Please enter your current password&lt;/string&gt;&#10;    &lt;string name=&quot;not_set&quot;&gt;Not set&lt;/string&gt;&#10;    &lt;string name=&quot;not_available&quot;&gt;Not available&lt;/string&gt;&#10;    &lt;string name=&quot;server_returned_raw&quot;&gt;Server returned raw: %1$s&lt;/string&gt;&#10;&#10;    &lt;!-- Labels used in owner track item layout --&gt;&#10;    &lt;string name=&quot;rb_delivery_boy_pickup&quot;&gt;Rider going for Pickup&lt;/string&gt;&#10;    &lt;string name=&quot;rb_waiting_customer_dropoff&quot;&gt;Waiting for Customer to drop the Palay&lt;/string&gt;&#10;    &lt;string name=&quot;rb_pending&quot;&gt;Pending&lt;/string&gt;&#10;    &lt;string name=&quot;rb_processing&quot;&gt;Processing&lt;/string&gt;&#10;    &lt;string name=&quot;rb_out_for_delivery&quot;&gt;Out for Delivery&lt;/string&gt;&#10;    &lt;string name=&quot;rb_milling_done&quot;&gt;Milling Done&lt;/string&gt;&#10;    &lt;string name=&quot;rb_delivered&quot;&gt;Delivered&lt;/string&gt;&#10;    &lt;string name=&quot;rb_waiting_customer_pickup&quot;&gt;Waiting for Customer to claim&lt;/string&gt;&#10;    &lt;string name=&quot;submit&quot;&gt;Submit&lt;/string&gt;&#10;&#10;    &lt;!-- Add title string used in owner fragment --&gt;&#10;    &lt;string name=&quot;title_track&quot;&gt;Update Status&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;partner_name&quot;&gt;Partner Name&lt;/string&gt;&#10;&#10;    &lt;!-- Added for chat fragment --&gt;&#10;    &lt;string name=&quot;copy_debug&quot;&gt;Copy&lt;/string&gt;&#10;    &lt;string name=&quot;hint_type_message&quot;&gt;Type a message…&lt;/string&gt;&#10;    &lt;string name=&quot;send&quot;&gt;Send&lt;/string&gt;&#10;    &lt;!-- Debug UI strings --&gt;&#10;    &lt;string name=&quot;waiting_debug&quot;&gt;Waiting for debug output…&lt;/string&gt;&#10;    &lt;string name=&quot;messages_label&quot;&gt;Messages:\n&lt;/string&gt;&#10;    &lt;string name=&quot;show_debug&quot;&gt;Show debug&lt;/string&gt;&#10;    &lt;string name=&quot;hide_debug&quot;&gt;Hide debug&lt;/string&gt;&#10;    &lt;string name=&quot;requesting_conversation_id&quot;&gt;Requesting conversationID=%1$s for user=%2$d&lt;/string&gt;&#10;    &lt;string name=&quot;requesting_conversation_other&quot;&gt;Requesting conversation with otherUserID=%1$d for user=%2$d&lt;/string&gt;&#10;    &lt;string name=&quot;use_signup_address&quot;&gt;Use my signup address&lt;/string&gt;&#10;    &lt;string name=&quot;label_pickup_date&quot;&gt;Pickup Date&lt;/string&gt;&#10;    &lt;string name=&quot;hint_pickup_date&quot;&gt;Select pickup date&lt;/string&gt;&#10;    &lt;string name=&quot;next&quot;&gt;Next&lt;/string&gt;&#10;    &lt;string name=&quot;bg_rice_field&quot;&gt;Rice field background&lt;/string&gt;&#10;&#10;    &lt;!-- Milling fragment strings --&gt;&#10;    &lt;string name=&quot;step_title&quot;&gt;Step 1 of 4:&lt;/string&gt;&#10;    &lt;string name=&quot;details_title&quot;&gt;Details of Rice Milling&lt;/string&gt;&#10;    &lt;string name=&quot;step_progress_text&quot;&gt;1/4&lt;/string&gt;&#10;    &lt;string name=&quot;select_milling_service&quot;&gt;Select the type of rice milling service:&lt;/string&gt;&#10;    &lt;string name=&quot;currency_dollar&quot;&gt;$&lt;/string&gt;&#10;    &lt;string name=&quot;milling_for_fee&quot;&gt;Milling for a fee&lt;/string&gt;&#10;    &lt;string name=&quot;label_number_of_sacks&quot;&gt;Number of sacks:&lt;/string&gt;&#10;    &lt;string name=&quot;minus&quot;&gt;-&lt;/string&gt;&#10;    &lt;string name=&quot;plus&quot;&gt;+&lt;/string&gt;&#10;    &lt;string name=&quot;sack_default_count&quot;&gt;1&lt;/string&gt;&#10;    &lt;string name=&quot;service_rates&quot;&gt;Service rates&lt;/string&gt;&#10;    &lt;string name=&quot;rate_per_sack_label&quot;&gt;Rate per sack:&lt;/string&gt;&#10;    &lt;string name=&quot;rate_per_sack_value&quot;&gt;₱20.00&lt;/string&gt;&#10;&#10;    &lt;!-- Service rates layout strings --&gt;&#10;    &lt;string name=&quot;sr_pabayo&quot;&gt;Pabayo&lt;/string&gt;&#10;    &lt;string name=&quot;sr_pabayo_rate&quot;&gt;2.50 / kilo&lt;/string&gt;&#10;    &lt;string name=&quot;sr_pickup&quot;&gt;Pick up&lt;/string&gt;&#10;    &lt;string name=&quot;sr_pickup_rate&quot;&gt;10.00&lt;/string&gt;&#10;    &lt;string name=&quot;sr_delivery&quot;&gt;Delivery&lt;/string&gt;&#10;    &lt;string name=&quot;sr_delivery_rate&quot;&gt;10.00&lt;/string&gt;&#10;    &lt;string name=&quot;sr_feeds_conversion&quot;&gt;Feeds Conversion&lt;/string&gt;&#10;    &lt;string name=&quot;sr_feeds_rate1&quot;&gt;220.00 / 1 kilo&lt;/string&gt;&#10;    &lt;string name=&quot;sr_feeds_rate2&quot;&gt;110.00 / ½ kilo&lt;/string&gt;&#10;&#10;    &lt;!-- Step labels for wizard fragments --&gt;&#10;    &lt;string name=&quot;step1_title&quot;&gt;Step 1 of 4:&lt;/string&gt;&#10;    &lt;string name=&quot;step2_title&quot;&gt;Step 2 of 4:&lt;/string&gt;&#10;    &lt;string name=&quot;step3_title&quot;&gt;Step 3 of 4:&lt;/string&gt;&#10;    &lt;string name=&quot;step4_title&quot;&gt;Step 4 of 4:&lt;/string&gt;&#10;&#10;    &lt;!-- Delivery and contact information labels used by updated layouts --&gt;&#10;    &lt;string name=&quot;delivery_service_title&quot;&gt;Delivery Service&lt;/string&gt;&#10;    &lt;!-- Added missing strings referenced by layouts --&gt;&#10;    &lt;string name=&quot;pickup_service_title&quot;&gt;Pick up Service&lt;/string&gt;&#10;    &lt;string name=&quot;step2_progress&quot;&gt;2/4&lt;/string&gt;&#10;    &lt;string name=&quot;select_completed&quot;&gt;Select completed&lt;/string&gt;&#10;    &lt;string name=&quot;pickup_from_my_location&quot;&gt;Pick up the palay from my location&lt;/string&gt;&#10;    &lt;string name=&quot;dropoff_at_facility&quot;&gt;I will drop off the palay at your facility&lt;/string&gt;&#10;    &lt;string name=&quot;enter_your_location&quot;&gt;Enter your location&lt;/string&gt;&#10;    &lt;string name=&quot;contact_number_loading&quot;&gt;Loading…&lt;/string&gt;&#10;    &lt;string name=&quot;contact_number_format&quot;&gt;Contact number: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;action_call&quot;&gt;Call&lt;/string&gt;&#10;    &lt;string name=&quot;action_message&quot;&gt;Message&lt;/string&gt;&#10;    &lt;string name=&quot;action_view_profile&quot;&gt;View profile&lt;/string&gt;&#10;    &lt;string name=&quot;action_edit&quot;&gt;Edit&lt;/string&gt;&#10;    &lt;string name=&quot;step3_progress&quot;&gt;3/4&lt;/string&gt;&#10;    &lt;string name=&quot;step4_progress&quot;&gt;4/4&lt;/string&gt;&#10;    &lt;string name=&quot;delivery_question&quot;&gt;How would you like to receive your milled rice?&lt;/string&gt;&#10;    &lt;string name=&quot;rb_deliver_to_location&quot;&gt;Deliver the milled rice to my location&lt;/string&gt;&#10;    &lt;string name=&quot;rb_pickup_from_facility&quot;&gt;I will pick up the milled rice from your facility&lt;/string&gt;&#10;    &lt;string name=&quot;label_delivery_address&quot;&gt;Enter your delivery address&lt;/string&gt;&#10;    &lt;string name=&quot;hint_delivery_address&quot;&gt;Enter your delivery address&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;contact_details_title&quot;&gt;Contact Details&lt;/string&gt;&#10;    &lt;string name=&quot;contact_information&quot;&gt;Contact Information&lt;/string&gt;&#10;    &lt;string name=&quot;label_name&quot;&gt;Name&lt;/string&gt;&#10;    &lt;string name=&quot;hint_enter_name&quot;&gt;Enter your name&lt;/string&gt;&#10;    &lt;string name=&quot;hint_enter_contact_number&quot;&gt;Enter your contact number&lt;/string&gt;&#10;    &lt;string name=&quot;additional_comments_optional&quot;&gt;Additional Comments (Optional)&lt;/string&gt;&#10;    &lt;string name=&quot;hint_message_for_owner&quot;&gt;Message for the owner&lt;/string&gt;&#10;&#10;    &lt;!-- Strings added for owner and queue layouts --&gt;&#10;    &lt;string name=&quot;queue_status&quot;&gt;Queue Status&lt;/string&gt;&#10;    &lt;string name=&quot;processing_label&quot;&gt;Processing&lt;/string&gt;&#10;    &lt;string name=&quot;pending_label&quot;&gt;Pending&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;request_title&quot;&gt;Request&lt;/string&gt;&#10;    &lt;string name=&quot;home_title&quot;&gt;Homepage&lt;/string&gt;&#10;    &lt;string name=&quot;btn_view_requests&quot;&gt;View Requests&lt;/string&gt;&#10;    &lt;string name=&quot;btn_view_history&quot;&gt;View Transaction History&lt;/string&gt;&#10;    &lt;string name=&quot;btn_view_messages&quot;&gt;View Messages&lt;/string&gt;&#10;    &lt;string name=&quot;messages_badge_zero&quot;&gt;0&lt;/string&gt;&#10;&#10;    &lt;!-- New strings added to support recent layout refactors --&gt;&#10;    &lt;string name=&quot;start_date_hint&quot;&gt;Start date&lt;/string&gt;&#10;    &lt;string name=&quot;end_date_hint&quot;&gt;End date&lt;/string&gt;&#10;    &lt;string name=&quot;action_filter&quot;&gt;Filter&lt;/string&gt;&#10;    &lt;string name=&quot;action_clear&quot;&gt;Clear&lt;/string&gt;&#10;    &lt;string name=&quot;no_completed_requests&quot;&gt;No completed requests found&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;feeds_conversion_question&quot;&gt;Would you like to convert your milling by-products (rice hulls, bran) into animal feeds?&lt;/string&gt;&#10;    &lt;string name=&quot;yes&quot;&gt;Yes&lt;/string&gt;&#10;    &lt;string name=&quot;no&quot;&gt;No&lt;/string&gt;&#10;    &lt;string name=&quot;feeds_conversion_explanation&quot;&gt;Converting by-products can provide a sustainable stream. We process the hulls and bran into nutrient-rich feed pellets, ready for sale or your own use.&lt;/string&gt;&#10;&#10;    &lt;!-- Authentication / Signup strings --&gt;&#10;    &lt;string name=&quot;create_account&quot;&gt;Create Account&lt;/string&gt;&#10;    &lt;string name=&quot;identification&quot;&gt;Identification&lt;/string&gt;&#10;    &lt;string name=&quot;hint_password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;hint_confirm_password&quot;&gt;Confirm password&lt;/string&gt;&#10;    &lt;string name=&quot;action_sign_up&quot;&gt;Sign Up&lt;/string&gt;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Already have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;choose_photo&quot;&gt;Choose photo&lt;/string&gt;&#10;    &lt;string name=&quot;sign_in&quot;&gt;Sign in&lt;/string&gt;&#10;    &lt;string name=&quot;content_desc_id_photo&quot;&gt;Identification photo&lt;/string&gt;&#10;    &lt;string name=&quot;content_desc_back_button&quot;&gt;Back&lt;/string&gt;&#10;&#10;    &lt;!-- Added runtime-configurable API base URL. Change this to your server's address. For emulator use 10.0.2.2 --&gt;&#10;    &lt;!-- For debugging via adb reverse: device localhost will be forwarded to host's port 8000 --&gt;&#10;    &lt;string name=&quot;api_base_url&quot;&gt;http://192.168.1.15:8000/&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;pickup_preparing_message&quot;&gt;Driver is preparing for pickup. You\'ll be able to update status after pickup is recorded.&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;service_label&quot;&gt;Service:&lt;/string&gt;&#10;&#10;    &lt;!-- New strings for delivery and pickup status/buttons --&gt;&#10;    &lt;string name=&quot;status_pickup_ongoing&quot;&gt;Pickup ongoing&lt;/string&gt;&#10;    &lt;string name=&quot;status_pickup_done&quot;&gt;Pickup done&lt;/string&gt;&#10;    &lt;string name=&quot;status_ongoing_delivery&quot;&gt;Ongoing delivery&lt;/string&gt;&#10;    &lt;string name=&quot;status_delivery_done&quot;&gt;Delivery done&lt;/string&gt;&#10;    &lt;string name=&quot;status_milling_ready_delivery&quot;&gt;Milling done – ready for delivery&lt;/string&gt;&#10;    &lt;string name=&quot;action_initiate_delivery&quot;&gt;Initiate Delivery&lt;/string&gt;&#10;    &lt;string name=&quot;action_delivery_done&quot;&gt;Delivery Done&lt;/string&gt;&#10;&#10;    &lt;!-- Queue dialog messages --&gt;&#10;    &lt;string name=&quot;no_processing_requests&quot;&gt;No processing requests&lt;/string&gt;&#10;    &lt;string name=&quot;no_pending_requests&quot;&gt;No pending requests&lt;/string&gt;&#10;    &lt;string name=&quot;request_number&quot;&gt;Request #%1$s&lt;/string&gt;&#10;    &lt;string name=&quot;debug_other_statuses_present&quot;&gt;(debug) Other statuses present: %1$s&lt;/string&gt;&#10;&#10;    &lt;!-- Indicate when only the current customer’s requests are being shown due to global access not being available --&gt;&#10;    &lt;string name=&quot;queue_scope_customer_only&quot;&gt;Showing your requests&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;total_processing_count&quot;&gt;Total: %1$d&lt;/string&gt;&#10;    &lt;string name=&quot;total_pending_count&quot;&gt;Total: %1$d&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;label_pickup_time&quot;&gt;Pickup Time (optional)&lt;/string&gt;&#10;    &lt;string name=&quot;hint_pickup_time&quot;&gt;Select pickup time&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;beams_instance_id&quot;&gt;REPLACE_WITH_YOUR_BEAMS_INSTANCE_ID&lt;/string&gt;&#10;&#10;    &lt;!-- New string for status-updated timestamp in customer details dialog --&gt;&#10;    &lt;string name=&quot;status_updated_at&quot;&gt;Status updated: %1$s&lt;/string&gt;&#10;&#10;    &lt;!-- New strings for status change timeline --&gt;&#10;    &lt;string name=&quot;status_timeline_header&quot;&gt;Status timeline&lt;/string&gt;&#10;    &lt;string name=&quot;status_timeline_entry&quot;&gt;%1$s — %2$s&lt;/string&gt;&#10;&#10;    &lt;!-- Added strings for owner-side payment amount input when marking Milling Done --&gt;&#10;    &lt;string name=&quot;set_payment_amount_title&quot;&gt;Set Payment Amount&lt;/string&gt;&#10;    &lt;string name=&quot;set_payment_amount_message&quot;&gt;Enter the total amount the customer has to pay based on the milled rice weight.&lt;/string&gt;&#10;    &lt;string name=&quot;enter_amount_hint&quot;&gt;Amount (e.g., 1234.50)&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_amount_message&quot;&gt;Please enter a valid non-negative amount&lt;/string&gt;&#10;    &lt;string name=&quot;payment_amount_set_and_status_updated&quot;&gt;Amount saved and status updated&lt;/string&gt;&#10;    &lt;string name=&quot;confirm&quot;&gt;Confirm&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Cancel&lt;/string&gt;&#10;&#10;    &lt;!-- Payment amount display --&gt;&#10;    &lt;string name=&quot;label_payment_amount&quot;&gt;Payment amount:&lt;/string&gt;&#10;    &lt;string name=&quot;payment_amount_format&quot;&gt;Payment amount: ₱%1$.2f&lt;/string&gt;&#10;    &lt;string name=&quot;payment_amount_not_set&quot;&gt;Payment amount: Not set&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;completed_on_format&quot;&gt;Completed on: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;view_details&quot;&gt;View Details&lt;/string&gt;&#10;    &lt;string name=&quot;hide_details&quot;&gt;Hide Details&lt;/string&gt;&#10;    &lt;string name=&quot;completed_label&quot;&gt;Completed&lt;/string&gt;&#10;&#10;    &lt;!-- Owner-side: kg input and auto calculation (₱10/kg) --&gt;&#10;    &lt;string name=&quot;set_kg_and_amount_title&quot;&gt;Milling output&lt;/string&gt;&#10;    &lt;string name=&quot;set_kg_and_amount_message&quot;&gt;Enter the rice weight (in kilograms). Amount will be auto-calculated at ₱10.00 per kilo. You can adjust the amount if needed.&lt;/string&gt;&#10;    &lt;string name=&quot;hint_milled_kg&quot;&gt;Rice weight (kg)&lt;/string&gt;&#10;    &lt;string name=&quot;hint_amount_auto&quot;&gt;Amount (auto)&lt;/string&gt;&#10;    &lt;string name=&quot;rate_per_kilo_note&quot;&gt;Rate: ₱10.00 / kilo&lt;/string&gt;&#10;    &lt;string name=&quot;invalid_kg_message&quot;&gt;Please enter a valid milled weight in kilograms&lt;/string&gt;&#10;    &lt;string name=&quot;milled_kg_format&quot;&gt;Total rice kg: %1$.2f kg&lt;/string&gt;&#10;&#10;    &lt;!-- Export to PDF strings --&gt;&#10;    &lt;string name=&quot;action_export_pdf&quot;&gt;Export PDF&lt;/string&gt;&#10;    &lt;string name=&quot;export_pdf_empty&quot;&gt;Nothing to export&lt;/string&gt;&#10;    &lt;string name=&quot;export_pdf_success&quot;&gt;Saved to Downloads: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;export_pdf_error&quot;&gt;Failed to save PDF&lt;/string&gt;&#10;    &lt;string name=&quot;storage_permission_required&quot;&gt;Storage permission is required to save PDF&lt;/string&gt;&#10;&#10;    &lt;!-- Filter menu and dialogs for Owner History --&gt;&#10;    &lt;string name=&quot;filter_by_date_range&quot;&gt;Filter by date range&lt;/string&gt;&#10;    &lt;string name=&quot;filter_by_customer_name&quot;&gt;Filter by customer name&lt;/string&gt;&#10;    &lt;string name=&quot;filter_by_request_id&quot;&gt;Filter by request ID&lt;/string&gt;&#10;    &lt;string name=&quot;enter_customer_name&quot;&gt;Enter customer name&lt;/string&gt;&#10;    &lt;string name=&quot;enter_request_id&quot;&gt;Enter request ID&lt;/string&gt;&#10;    &lt;string name=&quot;apply&quot;&gt;Apply&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>